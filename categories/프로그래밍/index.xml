<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>프로그래밍 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D.html</link>
    <description>Recent content in 프로그래밍 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sat, 03 Sep 2022 17:09:24 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>해외 IT 컨퍼런스 영상 편집을 하면서 느낀 기획의 중요성</title>
      <link>https://dongwooklee96.github.io/post/2022/09/03/%ED%95%B4%EC%99%B8-it-%EC%BB%A8%ED%8D%BC%EB%9F%B0%EC%8A%A4-%EC%98%81%EC%83%81-%ED%8E%B8%EC%A7%91%EC%9D%84-%ED%95%98%EB%A9%B4%EC%84%9C-%EB%8A%90%EB%82%80-%EA%B8%B0%ED%9A%8D%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1.html</link>
      <pubDate>Sat, 03 Sep 2022 17:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/09/03/%ED%95%B4%EC%99%B8-it-%EC%BB%A8%ED%8D%BC%EB%9F%B0%EC%8A%A4-%EC%98%81%EC%83%81-%ED%8E%B8%EC%A7%91%EC%9D%84-%ED%95%98%EB%A9%B4%EC%84%9C-%EB%8A%90%EB%82%80-%EA%B8%B0%ED%9A%8D%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1.html</guid>
      <description>&lt;h3 id=&#34;해외-컨퍼런스-영상-번역이-필요한-이유&#34;&gt;해외 컨퍼런스 영상 번역이 필요한 이유&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;이전에 해외 IT 컨퍼런스 영상을 번역 및 편집을 하여 공유를 하자는 생각을 한 적이 있었다. 그 이유는 크게 2가지 필요성을 느꼈기 때문이다.&lt;/p&gt;
&lt;p&gt;첫 번째는 해외 컨퍼런스 영상의 경우 번역 컨텐츠가 거의 존재 하지 않기 때문이다. 해외 기술 블로그 글의 경우 번역기를 이용해 읽거나 가끔 번역글이 올라오면 읽으면 된다. 또한 이러한 블로그 글들의 핵심을 정리해서 요약한 글도 가끔 올라오는 편이다. 하지만 영상의 경우에는 글에 비해서 많은 시간과 노력을 필요로 하기 때문에 이러한 컨텐츠를 찾아보기가 거의 힘들다.&lt;/p&gt;
&lt;p&gt;두 번째는 컨퍼런스의 영상의 핵심만 시청하고 싶기 때문이다. 때때로 컨퍼런스 영상을 시청하다가 이런 생각이 든 적이 있을 것이다.
&amp;ldquo;간단하게 내용을 요약해서 정리된 영상을 먼저 보고 싶어&amp;rdquo;, &amp;ldquo;영상을 다 보고 나서 어떤 내용인지 정리가 안돼&amp;quot;와 같은 것 들이다.
제목만으로 어떤 내용을 말할 것인지 대략적으로 파악이 가능하지만, 내가 원하는 정보가 아니였다는 사실을 영상 거의 막바지에 이르러서야 알게되는 경우도 많다. 따라서 컨퍼런스 영상을 간략하게 요약한 영상이 있다면 많은 시간을 아낄 수도 있고 내가 알고자 하는 내용인지 빠르게 파악하고 원본 영상을 유의깊게 시청할 수 도 있을 것이다.&lt;/p&gt;
&lt;p&gt;따라서 이러한 필요성에 의해서 영상을 제작해보았고, 그 뒤로 더 이상 만들지 않게 되었다.&lt;/p&gt;
&lt;h3 id=&#34;영상-제작을-포기-하게-된-이유&#34;&gt;영상 제작을 포기 하게 된 이유&lt;/h3&gt;
&lt;hr&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/Uc6PaakOC6k?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;p&gt;위의 영상은 내가 첫 번째로 만든 영상이다. 부족한 점이 아주 많이 보이는 영상이지만 완벽한 영상을 추구하다보면 포기할 거 같아서 마감 시간을 정해두고 업로드를 하였다. 영상을 포기하게 된 궁극적인 이유는 다음과 같다. 첫 째로 시간 생각보다 너무 많이 소요된 다는 것이다. 거의 이 7분 남짓한 시간의 영상을 만드는데 주말을 거의 다 사용한 것 같다. 앞으로 이러한 시간을 지속적으로 투입하고 싶지도 않았고 할 수 있을 것 같지도 않았다.
두 번째는 내가 하고 있는 번역이 맞는지, 내가 올바른 방향으로 지식을 전달하고 있는지 알 수 없다는 점이다. 이러한 점은 나중에 커뮤니티를 형성하여 사람들을 많이 모으게 되면 해결될 문제라고 생각한다. 그 전까지는 번역기를 돌려서라도 내용을 파악하는 수 밖에는 없다.
이러한 이유때문에 한동안 영상을 만들고 있지 않았는데 우연히 한 책을 읽고나서 영상의 내용을 논리적으로 분석하고 요약한다면 시간을 단축할 수 있을 거라는 생각이 들었다.&lt;/p&gt;
&lt;h3 id=&#34;생각정리-스피치&#34;&gt;생각정리 스피치&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/uogm2n6g3sqffkq/k372532570_1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;아직 끝까지 다 읽지는 않았지만 내가 읽으면서 느낀 구절과 앞으로 내가 어떻게 분석을 해야할지 알 수 있었다.
나의 잘못을 되돌아 보았을 때 내가 생각하지 못했던 것이 하나 있었다. 그것은 바로 기획을 하지 않고 무작정 만들었다는 것이다. 이러한 문제점을 알게된 계기는 바로 책 &amp;ldquo;생각정리 스피치&amp;rdquo; 라는 책을 읽고 나서 알게 되었다.
영상 편집 이야기를 하는데 무슨 스피치 이야기를 하느냐는 사람도 있을 것이다. 하지만 나는 이 책을 읽으면서 영상을 어떻게 만들어야하는지에 대한 힌트를 얻을 수 있었다.&lt;/p&gt;
&lt;p&gt;이 책은 어떻게 하면 말을 잘 할 수 있을까에 대한 이야기를 하고 있다. 이 책에서 말하는 바는 말하기를 잘하려면 우선 글쓰기를 잘해야한다는 것이다.&lt;/p&gt;
&lt;p&gt;쇼펜하우어는 문장론에서 크게 세 가지 그룹으로 나눌 수 있다고 했는데 아래와 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- 생각하지 않고 글을 쓰는 사람
- 쓰면서 생각하는 사람
- 말하기 전에 생각정리를 모두 마친 사람
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;따라서 내가 과거에 영상을 작성할 때 첫 번째 유형이였다는 것을 깨닫고 나서 앞으로 어떻게 하면 영상을 잘 만들 수 있을까라는 생각을 해봤을 때 미리 기획을 했어야 했다는 결론이 나왔다.&lt;/p&gt;
&lt;p&gt;이 책에서는 말하기 전에 대본에 해당하는 글쓰기에서 논리 구조 형태의 대본을 만들어야 한다고 주장한다.&lt;/p&gt;
&lt;p&gt;따라서 나도 영상을 먼저 보면서 논리 구조 형태를 마인드 맵 형태로 분류하고 이를 쪼갤 것이다. 쪼개면서 해당 부분의 시작점의 시간을 표시하면 앞으로 편집할 때 시간을 단축할 수 있을 것 같다.&lt;/p&gt;
&lt;h3 id=&#34;앞으로-내가-할-일&#34;&gt;앞으로 내가 할 일&lt;/h3&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. 번역 및 요약할 영상 선정
2. 영상을 시청하면서 논리 구조를 분리한다.
2-1. 분리한 논리 구조를 바탕으로 각 구조에서 말하고 있는 내용을 간략하게 요약한다.
3. 이를 바탕으로 어떤 것을 전달할지 생각하고 대본을 작성한다.
4. 실제 편집 및 영상 작업을 한다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;영상을 만들면서 시행착오가 있을 것이다. 나의 최종 목표는 먼저 시행착오를 줄여나가고 어느정도 프로세스를 구축한 후에 커뮤니티를 형성하는 것이다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>글또 7기 다짐글</title>
      <link>https://dongwooklee96.github.io/post/2022/05/14/%EA%B8%80%EB%98%90-7%EA%B8%B0-%EB%8B%A4%EC%A7%90%EA%B8%80.html</link>
      <pubDate>Sat, 14 May 2022 15:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/05/14/%EA%B8%80%EB%98%90-7%EA%B8%B0-%EB%8B%A4%EC%A7%90%EA%B8%80.html</guid>
      <description>&lt;h1 id=&#34;글또-다짐글&#34;&gt;글또 다짐글&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/9kz1jtraslny6xf/download.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이번에 글또 7기를 시작하면서 목표를 세우고 마음가짐을 새롭게 하기 위해서 다짐글을 작성하게 되었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;글또-6기를-마치고-느낀점&#34;&gt;글또 6기를 마치고 느낀점&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;지난 글또 6기에 이어서, 7기를 신청하게 되었다. 처음에는 목표했던 퀄리티있는 글과 단순히 정보를 나열한 글이 아닌 정보를 소화해서 이해하기 쉬운 글로 변경하는 것이 목표였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지난 기수에서 내가 목표했던 것을 이루었는가를 생각해보면, 그렇지는 못했던 것 같다. 우선 퀄리티 있는 글을 작성하기로 마음을 먹었는데 항상 공부를 하면서 책의 내용을 요약하는 것을 글또 글로 올리거나, 짤막한 정보를 기록하는 용도로 작성했던 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 그렇다고 해서 완전히 실패한 것은 아니라고 생각한다. 지난 글을 읽다보면 내가 이런 것도 공부했었구나 하면서 내가 지나온 길을 확인 할 수 있었고 내가 앞으로 어떤 방향으로 나아가야할지 방향을 잡을 수 있었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 아쉬웠던 점은 그때 당시의 나의 생각 및 느낌점을 알고 싶었지만 이는 기록되어있지 않았다. 따라서 앞으로 이러한 점을 위주로 기록한다면 나중에 나의 글을 다시 읽었을 때 많은 것을 느끼고 되집어 볼 수 있을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;글또-7기의-목표&#34;&gt;글또 7기의 목표&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위와 같은 이유로 글또 7기의 목표는 글을 작성할 때 사실 위주의 글도 좋지만 그보다는 나의 개인적인 생각을 위주로 글을 남기자는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예를 들어서 어떤 기술을 공부할 때 이 기술이 내가 알고 있는 다른 기술과의 차이점과 배웠을 때 어떤 부분이 어려웠고, 이를 해결하기 위해서 어떤 것을 해야겠다는 생각을 적는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 앞으로의 커리어와 내가 최근에 공부하고 있는 것 같은 일상 글을 올려도 좋을 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;마무리&#34;&gt;마무리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이번에도 글또 7기를 무사히 마쳤으면 좋겠다. 그리고 이번년도 후반기에는 오프라인 컨퍼런스도 많이 열려서 이를 리뷰하는 글을 작성하는 것도 재미있을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이번 년도를 알차게 보내서, 작성할 수 있는 많은 글이 있으면 좋겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>코딩 테스트 공부를 다시 시작해보도록 하였다</title>
      <link>https://dongwooklee96.github.io/post/2022/04/10/%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B3%B5%EB%B6%80%EB%A5%BC-%EB%8B%A4%EC%8B%9C-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EB%8F%84%EB%A1%9D-%ED%95%98%EC%98%80%EB%8B%A4.html</link>
      <pubDate>Sun, 10 Apr 2022 20:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/04/10/%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B3%B5%EB%B6%80%EB%A5%BC-%EB%8B%A4%EC%8B%9C-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EB%8F%84%EB%A1%9D-%ED%95%98%EC%98%80%EB%8B%A4.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;작년에 인프런에서 주도하는 카톡으로 매일 코딩 테스트 문제를 풀고 올리는 스터디를 3개월 정도 하였지만, 시간이 지나면서 점차 의무적으로 하게 되어 대충고민한 후에 구글링 하여 정답을 확인한 적이 많았다. 게다가 지금은 포기하여 전혀 기억나지 않는 상태가 되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 코딩 테스트를 공부해야겠다는 생각은 떠나지 않아서 빠르면 다음주부터 본격적으로 코딩 테스트 공부를 하기로 하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;플랫폼으로 많은 고민을 하였지만, 일단은 리트 코드로 시작하기로 하였다. 이유는 아래와 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다른 플랫폼들과 다르게 문제가 깔끔하고 코딩 인터뷰에 최적화된 사이트라는 것을 알 수 있었다. 개인적으로는 코드 포스라는 사이트에서 랭킹을 올려보고 싶은데 리트 코드를 통해서 실력을 올린후에 코드 포스 콘테스트에 도전해봐야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 데일리 문제가 있어서 매일 어떤 문제를 풀지 고민하지 않아도 알아서 정해준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세션이라는 기능이 있어, 자신이 풀어본 문제를 새롭게 풀어볼 수 있다. 어떤 사람은 매주 자신이 풀어본 문제를 다시 새로운 세션을 통해서 복습한다고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/QasimWani/LeetHub&#34;&gt;LeetHub&lt;/a&gt; 라는 플러그인이 있어서, 자동으로 깃허브에 리트코드에서 푼 문제와 코드 실행결과를 기록해준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이러한 이유로 매우 재미있게 코딩 테스트를 공부할 수 있을 것 같다. 코딩 테스트를 게임처럼 생각하자!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아직 유료 구독은 하지 않았지만, 블랙 프라이데이때 할인을 한다고 하니 일단은 무료 회원으로 버티다가 세일할때 구독하는 것도 나쁘지 않을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/0yiu1crw76gf6tm/Screen%20Shot%202022-04-10%20at%2021.37.54.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;방법은 위의 루틴대로 나도 해볼 생각이다. 아침에 일어나면 문제를 읽고나서 짜투리 시간에 계속 해보는 것이다. 또한 풀었던 문제를 나중에 다시 풀어보는 것도 굉장히 중요한 것 같다. 지난번과 같은 실수를 반복하지 말자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://skillist.tistory.com/211&#34;&gt;추천 75문제와 알고리즘 공부 방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>API 개선에 대한 좋은 글을 읽고 나서 작성한 글</title>
      <link>https://dongwooklee96.github.io/post/2022/04/05/api-%EA%B0%9C%EC%84%A0%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A2%8B%EC%9D%80-%EA%B8%80%EC%9D%84-%EC%9D%BD%EA%B3%A0-%EB%82%98%EC%84%9C-%EC%9E%91%EC%84%B1%ED%95%9C-%EA%B8%80.html</link>
      <pubDate>Tue, 05 Apr 2022 01:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/04/05/api-%EA%B0%9C%EC%84%A0%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A2%8B%EC%9D%80-%EA%B8%80%EC%9D%84-%EC%9D%BD%EA%B3%A0-%EB%82%98%EC%84%9C-%EC%9E%91%EC%84%B1%ED%95%9C-%EA%B8%80.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하쿠나 블로그에서 API 개선에 대한 매우 유용한 글을 읽어 기록하게 되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개선을 할 때는 분석하기, 리펙토링 하기, 성능 개선하기 순서로 이루어진다. 그리고 한 과정의 사이클이 마무리 되면 다시 위의 과정을 반복하여 개선을 한다고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/sqgmqzghfu4g5yk/Screen%20Shot%202022-04-05%20at%209.03.41.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;특히 기억에 남는 부분은 분석하기 단계에서 API의 요청에서부터 응답을 하기 까지의 로직을 하나하나 글로 작성해보는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 글의 필자도 귀찮고 시간을 많이 잡아먹는 작업이지만, 좀 더 구체적이고 어디를 어떻게 수정하면 좋을지 고민하는 일에 큰 도움이 된다고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;나는 나아가서, &lt;code&gt;plantuml&lt;/code&gt;을 통해서 수도코드를 작성하고 이를 &lt;code&gt;pull request&lt;/code&gt;할 때 기록으로 남기면 굉장히 좋은 문서화가 될 것 같다는 생각이 든다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 오픈 소스 분석을 할 때 이해가 되지 않는 코드를 로직에 따라서 정리를 하면 이해하는데 많은 도움이 될 것이라고 생각한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;성능 개선하기 부분에서 동기적으로 처리할 부분과 비동기적으로 처리할 작업을 분리하고 성능을 개선하는 부분도 매우 유용했다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/k6v17x4r770grew/Screen%20Shot%202022-04-05%20at%209.11.30.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;나는 머리가 좋은 편은 아니기 때문에 머리로만 생각을 하거나, 글로만 기록을 하면 시간이 지나면서 다시 내가 작성한 글을 볼 때 헷갈릴 때가 있다. 따라서 시각화한 것을 기록하는 것이 나와 다른 동료들을 위해서 좋을 것 같고, 생산성을 위해서 이를 코드로 작성할 수 있는 &lt;code&gt;plantuml&lt;/code&gt;을 적극적으로 사용해야겠다. 그리고 글에서 소개하는 방법을 이용하여 API 개선 및 작성을 해야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hyperconnect.github.io/2022/03/14/develop-liveroom-entrance-on-hakuna.html&#34;&gt;하쿠나 입장 API 개선하기 - 괴물 API 리팩토링과 성능개선하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>목표를 달성하기 위한 방법</title>
      <link>https://dongwooklee96.github.io/post/2022/03/11/%EB%AA%A9%ED%91%9C%EB%A5%BC-%EB%8B%AC%EC%84%B1%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%B0%A9%EB%B2%95.html</link>
      <pubDate>Fri, 11 Mar 2022 10:01:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/03/11/%EB%AA%A9%ED%91%9C%EB%A5%BC-%EB%8B%AC%EC%84%B1%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%B0%A9%EB%B2%95.html</guid>
      <description>&lt;h3 id=&#34;목표를-달성하기-위한-방법&#34;&gt;목표를 달성하기 위한 방법&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;최근에 공부를 하고 있는데, 목표 의식이 없어서 그런지 몰라도 흐지부지 될 때가 많다, 그러던 중에 참고 문헌에 있는 글을 읽고 나를 반성함과 동시에 해당 방법을 이용해보면 좋을 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-원하는-것을-결정해야-한다&#34;&gt;1. 원하는 것을 결정해야 한다&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;대부분의 사람들은 정말로 원하는 것이 무엇인지를 모른다. 따라서 어떤 것을 실행으로 옮겨야 할지 모르게 만든다. 이것이 계획이 실패하는 가장 큰 이유다. 따라서 목표를 명확하게 잡는 것 부터 시작을 해야한다. 나의 경우에는 강의를 들음으로써 어떤 효과를 얻고 내가 지금 왜 이 일을 하려고하는지에 대해서 목표를 잡아야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-목표를-종이에-써-내려가라&#34;&gt;2. 목표를 종이에 써 내려가라&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;목표를 적는 것은 잠재 의식에 프로그래밍을 하는 것과 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이것은 정신적인 에너지를 활성화 시켜서, 목표를 더 성취하게 만들어준다. 오직 3%의 성인만이 목표를 종이에 써내려간다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;성공은 종이와 펜 그리고 시작을 위한 몇 분의 시간 투자에서부터 시작된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-데드라인을-설정하라&#34;&gt;3. 데드라인을 설정하라&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;마감 시간을 정하는 것은 매우 중요하다. 마감 시간보다 빠르거나 늦게 이룰 수 있지만, 가장 중요한 것은 정확한 날짜와 시간을 설정하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 데드라인은 여러분들의 잠재 의식 속에서 목표를 달성하기 위한 강제적인 힘으로 작용할 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;말이 안되는 목표는 없다. 말이 안되는 데드라인만 있을 뿐이다. 데드라인을 지키지 못했다면 수정하면 된다. 그대신에 포기는 하지 말아라.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-목표-달성을-위한-모든-것을-적어봐라&#34;&gt;4. 목표 달성을 위한 모든 것을 적어봐라&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;목표가 있지만 그것을 달성하지 못하는 이유는 목표 달성을 위해서 무엇이 필요한지 적어보지 않았기 때문이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;목표 달성을 위한 아주 사소한 것이라도 적어보라. 제거해야할 것 및 방해요소 그리고 내가 도움을 구해야할 사람은 누구인지, 복합적으로 리스트를 적어갈 수록 더욱 동기 부여가 될 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;적어 내려간 것들을 우선순위에 맞게 정렬하고 조직화하는 것은 중요하다. 빠르게 행동하고 시작하는 것은 중요하다. 하지만 더 중요한 것은 이것을 계획하고 조직화하는 것이다. 이를 위해 사용한 20%의 시간이 나중에는 80%의 효율성을 가져다 줄 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-마지막은-위의-네-가지를-복합적으로-계획해보는-것이다&#34;&gt;5. 마지막은 위의 네 가지를 복합적으로 계획해보는 것이다&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;원하는 목표가 무엇인지 명확하게 설정하고 종이에 적어보는 것, 두번째 이 목표를 달성하기 위해서 종이에 직접 적어보는 것, 각 행동에 데드라인을 설정하는 것, 하루의 계획은 다음 달이 시작되기 전날 밤에, 한주의 계획은 다음주가 시작되기 전 주에, 한달의 계획은 다음달이 시작되기 전 달에 계획을 해봐라.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;느낀점&#34;&gt;느낀점&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;최근에 &lt;code&gt;GSoC&lt;/code&gt; 지원서를 작성하는데 목표가 없어서 그런지 몰라도 집중하기 힘들었다. 이 방법을 통해서 목표를 달성해야겠다. 그리고 계획을 세우고 매일 목표를 종이에 적어보면서 내 목표가 무엇인지 구체화 시켜야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fishpoint.tistory.com/7022?url=https://fishpoint.tistory.com/7022&#34;&gt;우리의 계획이 실패하는 가장 큰 이유 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>요즘 근황에 대해서...</title>
      <link>https://dongwooklee96.github.io/post/2022/03/02/%EC%9A%94%EC%A6%98-%EA%B7%BC%ED%99%A9%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C....html</link>
      <pubDate>Wed, 02 Mar 2022 09:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/03/02/%EC%9A%94%EC%A6%98-%EA%B7%BC%ED%99%A9%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C....html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;요즘 블로그 글을 작성하는데 조금은 소흘해진 것 같다. 그 이유는 영어 공부를 하느라 바쁘기도 하고, 서적으로 개발 공부를 하기 보다는 블로그 포스팅을 참조하기 때문이다. 그래서 요즘 근황에 대해서 정리하는 글을 작성하기로 하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;영어&#34;&gt;영어&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;요즘에 영어 회화를 위주로 공부를 하고 있다. 매일 주중에 새벽에 원어민이랑 같이 하는 영어 회화 수업을 나가고 있다. 매일 영어로 말을 하니까 영어 공부를 하는데 목표의식이 생김과 동시에 어떤 표현을 배울 때 내일 써먹어야지 라는 생각이 들어서 더 기억에 잘 남는 것 같다. 하지만 아직은 사용하는 패턴을 그대로 사용하고 있다. 좀 더 시간이 지나면 유창하게 할 수 있었으면 좋겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 주중 월요일하고 수요일은 영어 회화 학원에 다니고 있다. 여기서는 주로 문법적인 내용과 글쓰기 위주로 배우고 있다. 확실히 작문 실력이 말하기 실력과 관련이 있는 것 같다. 아직은 긴 문장을 말하지 못하고, 메일을 작성할 때 내가 하고 싶은 말이 바로 영어로 써지지 않는다. 메일링 리스트를 보면 새로운 기능이나, 변경사항이 많은 개선과 같은 경우에는 아주 길고 많은 메일을 주고 받는 것을 확인할 수 있다. 따라서 메일을 잘 읽고 쓸 수 있도록 많이 연습을 해야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 마지막으로 EBS 라디오를 통해서 많은 프로그램을 통근 시간에 청취하고 있다. 여태까지 통근시간을 유튜브를 보면서 시간을 소비했던 것 같은데 이 시간을 예습하는데 사용하고 있다. 물론 요즘에는 라디오에 집중하지 못하는 것 같기는 한데 안하는 것보다는 나은 것 같아서 하고 있다. 교재는 퇴근후에 바로 푼다. 오전에 들었던 내용이지만 퇴근후에는 완전 까먹게 되는데 복습할 수 있어서 좋다. 그나저나 3월호부터는 정기 구독을 하였는데, 배송이 늦어져서 걱정이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;리눅스-공부-및-i-am-root&#34;&gt;리눅스 공부 및 I AM ROOT&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;리눅스 개발에 및 시스템 트레이싱에도 관심이 많은데, 결국에는 내가 관심있는 모든 애플리케이션이 주로 리눅스 위에 돌아가기 때문에 성능 분석 및 내부 동작을 이해하기 위해서 리눅스에 및 시스템 프로그래밍에 대해서 공부를 하려고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구글링을 하던 도중에 이분의 &lt;a href=&#34;https://velog.io/@mythos/series/Linux-Kernel&#34;&gt;블로그&lt;/a&gt;를 발견 하였는데 리눅스 공부를 처음 시작할 때 참조하면 좋은 내용으로 이루어져 있어 참고한 도서도 같이 구매하게 되었다. 그리고 나도 이제부터 &lt;a href=&#34;https://lwn.net/&#34;&gt;LWN&lt;/a&gt; 을 읽어봐야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사실 포스트그레스 메일링 리스트 알림이 귀찮을 때도 있지만 메일 제목만 읽는 것도 어느정도 도움이 되는 것 같기는 하다. 이와 같이 리눅스 공부를 어느정도 하고 다이내믹 트레이싱도 익숙해지면, 메일링 리스트 및 LWN을 구독하면서 리눅스 개발이 어떻게 돌아가는지 감을 익히도록 해야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=233619033&#34;&gt;리눅스 커널 소스 해설 기초입문&lt;/a&gt;, &lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=52166775&#34;&gt;리눅스 커널 내부구조&lt;/a&gt;, &lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=253271218&#34;&gt;운영체제 아주 쉬운 세 가지 이야기&lt;/a&gt; 공부를 하기 위해서 해당 책들을 구매하였는데, 이번 기회에 운영체제 및 파일 시스템에 대해서 깊게 이해할 수 있으면 좋겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 마지막으로 &lt;a href=&#34;http://www.iamroot.org/xe/&#34;&gt;iamroot&lt;/a&gt; 라는 커널 스터디에 가입할 예정이다. 경험상 업무와 관련없는 분야를 혼자서 공부하면은 지치기도 쉽고 오래 지속할 수 없었다. 따라서 이러한 분야는 같이 공부를 해야한다. 따라서 스터디를 통해서 같이 공부하기로 하였다. 보통 3 ~ 4월달에 스터디원을 모집하는 것 같은데 이번 기회에 지원을 해봐야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gsoc&#34;&gt;GSoC&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이번에 &lt;code&gt;Postgres&lt;/code&gt;와 &lt;code&gt;MariaDB&lt;/code&gt;에 대해서 &lt;code&gt;GSoC&lt;/code&gt;를 참여하려고 한다. 작년에 오픈소스 컨트리뷰톤에 참여를 하지 못해서 너무 아쉬웠다. 사실 내가 잘 알지도 못하는 프로젝트에 무턱대고 지원한 탓도 있다. 따라서 이번 년도에는 구글 서머 코드에 지원을 하고 합격을 하여 활동하면서 작년의 아쉬움과 &lt;code&gt;postgres&lt;/code&gt;에 대해서 더욱 파고들 수 있는 기회를 만들려고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;더욱 좋은 점은 지원 자격이 이번년도 부터 변경되었기 때문이다. 이전에는 지원자격이 대학생으로 제한되었는데 이번년도부터 18세 이상이라면 누구나 지원할 수 있다. 작년에 참여한 프로젝트를 확인해보니, &lt;code&gt;postgres&lt;/code&gt;, &lt;code&gt;mariadb&lt;/code&gt; 가 있는데 당연히 첫 번째로는 &lt;code&gt;postgres&lt;/code&gt;에 지원할 예정이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/r8egl2omjlz360r/Screen%20Shot%202022-03-02%20at%2014.11.20.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.postgresql.org/wiki/GSoC_2022&#34;&gt;GSoC_2022_POSTGRES_WIKI&lt;/a&gt; &lt;code&gt;GSoc&lt;/code&gt;에서 진행할 예정인 내용이 문서로 정리되어있다. 아마도 다음주에 프로젝트 마감이 될 것 같은데 블로그 후기를 보니 미리서 컨택을 한다고 되어있다. 미리서 걱정이 앞서기는 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/h6ludxrhj23q6c6/Screen%20Shot%202022-03-02%20at%2014.26.44.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그 중에서 내가 관심이 있고, 가능할 것 같은 항목은 &lt;a href=&#34;https://coverage.postgresql.org/&#34;&gt;회귀 테스트 커버리지&lt;/a&gt;이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 코드를 작성하기 위해서 조금이지만 펄을 공부한 적도 있었고, 테스트 코드를 작성하면서 내부 코드를 이해할 수 있는 것이라는 생각이 들었다. 처음 컨트리뷰션을 하는데 접근하기 좋을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;버클리-데이터베이스-강의-수강&#34;&gt;버클리 데이터베이스 강의 수강&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/b8pk4fwohlsgszc/Screen%20Shot%202022-03-02%20at%2014.34.10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cs186berkeley.net/fa21/&#34;&gt;CS W186&lt;/a&gt; 해당 강의를 매주 화,목 마다 듣고 있다. 사실 매주 들으려고 했지만 빼먹은 날도 많았다. 물론 강의가 영어로 진행되기도 하고, 내용도 쉽지는 않기 때문에 (쉽게는 잘 가르쳐주는 것 같지만 내가 잘 이해를 못한다;;) 1회차로는 안될 것 같은 마음에 3회차까지 할 생각이다. 1회차때는 그냥 어떤 내용을 배우는지 익히는 과정이라면 2회차때는 이해하지 못했던 내용을 중점적으로 학습을 할 예정이고, 마지막때는 강의와 같이 과제를 할 예정이다. 이제 트랜잭션 및 병렬 쿼리 그리고 분산 트랜잭션, NoSQL만 들으면 된다. 끝까지 화이팅하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://summerofcode.withgoogle.com/programs/2022&#34;&gt;GSoC_2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://butter-shower.tistory.com/240?category=836410&#34;&gt;구글 서머 오브 코드 (Google Summer Of Code)란? - 합격 팁 &amp;amp; 1st evaluation 통과 후기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CTAGS 파일 버전관리에서 빼는법</title>
      <link>https://dongwooklee96.github.io/post/2022/02/13/ctags-%ED%8C%8C%EC%9D%BC-%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC%EC%97%90%EC%84%9C-%EB%B9%BC%EB%8A%94%EB%B2%95.html</link>
      <pubDate>Sun, 13 Feb 2022 01:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/02/13/ctags-%ED%8C%8C%EC%9D%BC-%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC%EC%97%90%EC%84%9C-%EB%B9%BC%EB%8A%94%EB%B2%95.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;최근에 터미널로 소스를 확인할 일이 있었는데 그때 &lt;code&gt;CTAGS&lt;/code&gt; 를 사용했다. 그런데 깃에 변경사항으로 포함되어서 불편하였다. 다행이 인터넷에서 이를 제외하는 법을 알게 되었는데 다음과 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd Project-Root-Directory
$ echo &amp;#39;tags&amp;#39; &amp;gt;&amp;gt; ./.git/info/exclude
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;이렇게 되면 더이상 &lt;code&gt;ctags&lt;/code&gt; 파일이 버전관리에 포함되지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://johngrib.github.io/wiki/ctags/&#34;&gt;ctags 명령어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>=== [2021년 회고] ===</title>
      <link>https://dongwooklee96.github.io/post/2022/01/02/2021%EB%85%84-%ED%9A%8C%EA%B3%A0.html</link>
      <pubDate>Sun, 02 Jan 2022 10:01:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/01/02/2021%EB%85%84-%ED%9A%8C%EA%B3%A0.html</guid>
      <description>&lt;h3 id=&#34;2021년-회고&#34;&gt;2021년 회고&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;진작부터 작성을 하려고 했으나, 미루다가 결국에는 2021년이 다 가고 나서야 적게 되는 것 같다. 굉장히 많은 일들이 있었던 것 같기는 하지만, 막상 기억을 해보려고 하니까 잘 기억이 나지 않는 것 같다. 하지만 최대한 기억을 해보려고 노력을 해봐야겠다. 그래도 다행인 것은 일일 회고가 내가 어떤 일을 했었는지 기억하기 굉장히 쉽게 만들어 준다는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;코드숨---스프링-과정-수강&#34;&gt;코드숨 - 스프링 과정 수강&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;우선 첫 번째로 기억이 나는 것은 코드숨 자바 백엔드 개발 과정을 수강했다는 것이다. 이는 나에게 많은 도움이 되었던 것 같다. 물론 스프링에 대해서 이론적인 것을 배운 것도 있지만 기술적인 내용을 배우는 자세에 대해 특히 더 많은 것을 배운 것 같다. 특히 기계인간 님인 이종립 님이 어떤 방법으로 학습하는지 어께 너머라도 배울 수 있어서 많은 도움이 되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 메서드 주석을 작성하는 방법 및 테스트 코드를 작성하는 방법에 대해서 배우게 되었다. 이는 현재 솔루션을 개발 할 때 협업하는 개발자를 위해서 어떻게 코드를 명확하게 작성하고 설명할지에 대해서 고민을 하고 노력하게 만들었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;무엇보다 좋았던 것은, 코드숨을 통해서 처음 회고를 작성해야겠다는 생각을 하게 되었고 블로그를 통해서 글을 작성하는 습관을 들였다는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 코드숨에서 진행하는 스터디도 참여하였다. 물론 도중에 많이 빠지기는 했지만 그래도 도메인 주도 개발에 대해서 조금이라도 알게되는 계기가 되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;사내-세미나---자바-및-스프링&#34;&gt;사내 세미나 - 자바 및 스프링&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;사내 세미나로 진행하는 자바 스터디 및 스프링 강의를 수강하고 연습문제를 과제로 제출하였다. 이를 통해서 모던 자바 문법에 대해서 많이 알게 되었다. 하지만, 현재는 자바로 솔루션 개발을 하고 있지 않아서 많이 까먹어서 많이 아쉽다. 자바나 코틀린으로 서버 개발을 하고 싶은 마음이 있지만, 내년에 그게 가능할지는 잘 모르겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;코딩-테스트-공부&#34;&gt;코딩 테스트 공부&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이번 년도 상반기까지는 코딩 테스트 공부를 열심히 했던 것 같다. 하지만 그때는 코딩 테스트를 공부하는 것이 솔루션을 개선하는데 도움이 되지 않아서 흥미가 떨어져서 지속적으로 공부를 하지 못했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지금도 솔직한 마음으로는 코딩 테스트 공부를 하기 보다는 내가 관심을 가지고 있는 분야를 공부하는 것이 더 재미있을 것이라는 생각이 든다. 내년에는 그래도 틈틈히 코딩 테스트 공부를 하여 좋은 기회를 놓치는 일이 없도록 해야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자신이 없기는 한데, 오프라인 스터디를 참여하거나 아니면 내가 개설을 해서라도 코딩 테스트에 대한 두려움을 극복할 수 있으면 좋겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일일 회고를 보다보니, 나도 까먹었는데 이번 년도에 코딩 테스트 스터디에 참여했었다. 하루에 한 문제씩 풀어서 정리한 내용을 카카오톡에 올리는 것이였는데 그래도 안하는 것보다는 낫지만 지속적이지 못해서 효과는 그리 크지는 않은 것 같다. 확실히 지속적으로 하는 것이 중요한 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;시스템-프로그래밍-공부&#34;&gt;시스템 프로그래밍 공부&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;시스템 프로그래밍에 대해서 공부를 했다. 운영체제 시간에 이론적으로만 접했던 개념들을 실제 코드로 작성해보니까 좀 더 와닿는 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;좋은 책을 찾아서 비교적 쉽게 이해할 수 있었다고 생각한다. 하지만, 내가 시스템 프로그래밍을 직접 할 일이 없다보니까 공부하지 않아서 조금씩 까먹고 있는 것 같다. 하지만 네트워크 쪽은 내년에도 여유가 된다면 다시 한번 공부를 하고 싶다. 추상적으로 배웠던 소켓 통신을 직접 코드로 작성하다보니 매우 재미있었고, 실제 어떤 개념을 이해하는데 많은 도움이 되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;쿼리-튜닝&#34;&gt;쿼리 튜닝&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;오라클 성능 고도화 강의를 수강하였지만, 그때는 아무것도 몰라서 솔직히 무슨 이야기를 하는지도 제대로 파악하지 못했다. 솔직히 말하면 거의 이해하지 못했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 연말에 성능이 느린 쿼리를 개선하는 작업을 하면서 관련된 도서를 읽게 되었고 과거보다는 SQL에 익숙해진 상태라서 책의 내용이 무엇을 말하는지 알 수 있었다. 따라서 쿼리 튜닝에 대해서 재미를 느꼈으며 조금은 성장한 것이 느껴졌다. 역시 직접 해봐야 실력이 많이 느는 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;마리아 데이터베이스에 조인 방식에 대해서 글로 정리해보려고 했으나, 시간이 없다는 핑계로 자꾸 뒤로 미루었는데 이럴 수록 빨리 해야겠다는 마음이 든다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;글또&#34;&gt;글또&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;글또를 신청하여 활동한 것은 참 잘한 것 같다. 이유는 블로그 글을 꾸준하게 작성하게 되는 이유를 만들어주기 때문이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 글또를 처음 시작했을 당시에 목표를 채우지는 못했던 것 같다. 글또를 시작할 당시의 목표는 배운 내용을 정리하기 위해서 작성하는 글이 아닌 다른 사람에게 유용한 정보를 전달하기 위한 글을 작성하는 것이 였는데, 그러한 글을 작성하지 못한 것 같아서 아쉽다. 퀄리티 있는 글을 작성하기 위해서는 많은 노력이 필요한 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 글또 기수에는 정리하기 위한 글을 작성하되, 제출하는 글은 퀄리티 있는 글을 작성하는 것을 목표로 삼고 활동을 해야겠다는 생각이 든다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;오픈-소스&#34;&gt;오픈 소스&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이번 년도에는 오픈 소스 컨트리뷰톤에 참여하지 못하였다. 이 부분에 대해서 굉장히 아쉽게 생각하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연말에 데이터베이스에 대해서 많은 컨퍼런스를 시청하고 정리하려고 노력했던 것 같다. 따라서 &lt;code&gt;POSTGRES&lt;/code&gt;애 대해서 조금은 알게 된 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특히 디버깅을 하는 법 및 테스트 코드를 작성하기 위해서 &lt;code&gt;PERL&lt;/code&gt; 언어를 배우는 등 노력을 하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다국어 관련해서 번역을 하기는 하였지만, 아직은 오픈 소스 기여에 대한 노력이 많이 부족하기는 한 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;취미-생활&#34;&gt;취미 생활&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이번 여름부터 복싱을 배우기 시작했는데, 백신을 맞고 나서 지속하지 못했던 것 같다. 내년부터 다시 복싱을 해야하는지 조금 고민되기는 하지만, 운동을 무조건 시작하기는 해야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기타는 여름부터 시작하여 계속 배우고 있다. 스트레스를 풀거나, 나중에 캠핑에 가서 연주를 하려고 배웠는데 잘 한 것 같다. 하지만 요즘 조금은 슬럼프에 빠져서 연습을 열심히 하고 있지 않은데 이를 반성하고 열심히 공부할 수 있도록 노력을 해야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;영어&#34;&gt;영어&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하반기부터, 영어 회화 스터디를 진행하면서 영어 회화 및 공부를 해야겠다는 필요성을 느끼게 되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;영어 학원을 추가적으로 등록하기는 하였지만, 결국에는 영어 회화 및 학습을 꾸준히 하는 것이 답이 될 것 같다. 어떻게 할지는 고민을 하고 있는데, 영어 회화는 매일 전화 영어를 하는 것이 어떨까 고민중이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>이상한 리뷰의 앨리스 영상 구성 방식 분석</title>
      <link>https://dongwooklee96.github.io/post/2021/12/19/%EC%9D%B4%EC%83%81%ED%95%9C-%EB%A6%AC%EB%B7%B0%EC%9D%98-%EC%95%A8%EB%A6%AC%EC%8A%A4-%EC%98%81%EC%83%81-%EA%B5%AC%EC%84%B1-%EB%B0%A9%EC%8B%9D-%EB%B6%84%EC%84%9D.html</link>
      <pubDate>Sun, 19 Dec 2021 18:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/12/19/%EC%9D%B4%EC%83%81%ED%95%9C-%EB%A6%AC%EB%B7%B0%EC%9D%98-%EC%95%A8%EB%A6%AC%EC%8A%A4-%EC%98%81%EC%83%81-%EA%B5%AC%EC%84%B1-%EB%B0%A9%EC%8B%9D-%EB%B6%84%EC%84%9D.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컨퍼런스의 내용을 10분 내외의 동영상으로 요약해서 영상을 만들자는 생각을 한 적이 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;오래동안 미뤄두다가 이제야 구체적인 방향을 잡기 시작했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이전에 자기 계발 채널중에서 &lt;code&gt;이상한 리뷰의 앨리스&lt;/code&gt; 채널을 보았는데 이 방식을 참고하여 요약한 내용을 전달하면 영상에서 전달하려는 메시지를 잘 전달할 수 있을 것 같았다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 해당 채널에서 어떻게 메시지를 전달하는지 분석을 해보았다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;분석한-내용&#34;&gt;분석한 내용&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/bjuztxtz99x619h/Screen%20Shot%202021-12-19%20at%206.32.58%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;처음에는 의미를 알 수 없는 영상으로 시작한다. 그리고 처음에 보여주는 영상은 시청자들의 호기심을 자극하는 용도인 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/8rj58jx4wkntcwm/Screen%20Shot%202021-12-19%20at%206.33.46%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그리고 나서, 주제와 연관된 이야기를 하면서, 마지막으로 해당 이야기를 할 연사에 대해서 소개를 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/s85mo9o3b2h2nep/Screen%20Shot%202021-12-19%20at%206.35.22%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그 다음에 강연의 핵심 내용을 편집해서 보여준다. 그리고 나서, 강연의 내용을 알기 쉽게 풀어서 이야기를 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/s7eostb814cw0r4/Screen%20Shot%202021-12-19%20at%206.36.08%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이어서, 강연과 해설을 반복해서 하고 싶은 이야기를 풀어나간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;느낀점&#34;&gt;느낀점&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;영상을 어떻게 편집할지에 대한 고민도 필요하겠지만 그보다 컨텐츠를 어떻게 구성할 것인가?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 어떻게 요약을 할지에 대한 고민이 선행되어야 할 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;영상을 편집하기에 앞서서 내가 요약한 내용을 어떻게 풀어갈지, 그리고 정리를 어떻게 해야할지에 대해서 평소에 많은 생각을 해야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCzmyfZl7lxV-lLZxpSJWsWQ&#34;&gt;이상한 리뷰의 앨리스&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PRORRPyqf2Y&#34;&gt;이상한 리뷰의 앨리스 - 부자들은 무의식적으로 이것을 할 수 있습니다
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>공식 문서를 한글로 편하게 읽을 수 있는 사이트</title>
      <link>https://dongwooklee96.github.io/post/2021/12/15/%EA%B3%B5%EC%8B%9D-%EB%AC%B8%EC%84%9C%EB%A5%BC-%ED%95%9C%EA%B8%80%EB%A1%9C-%ED%8E%B8%ED%95%98%EA%B2%8C-%EC%9D%BD%EC%9D%84-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%82%AC%EC%9D%B4%ED%8A%B8.html</link>
      <pubDate>Wed, 15 Dec 2021 17:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/12/15/%EA%B3%B5%EC%8B%9D-%EB%AC%B8%EC%84%9C%EB%A5%BC-%ED%95%9C%EA%B8%80%EB%A1%9C-%ED%8E%B8%ED%95%98%EA%B2%8C-%EC%9D%BD%EC%9D%84-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%82%AC%EC%9D%B4%ED%8A%B8.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/mjiu1rmvgig795c/Screen%20Shot%202021-12-15%20at%206.04.37%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;공식 문서를 한글로 편하게 번역한 사이트를 발견하였다. 번역이 이상하거나 원문이 보고 싶을 때 번역된 부분을 마우스로 올려놓고 있으면 자동으로 원문이 나온다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 번역이 이상하거나, 마음에 들지 않을 때 쉽게 제안할 수 있다는 것도 마음에 든다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PostgreSQL&lt;/code&gt;의 경우에는 누락된 부분이 없이 깔끔하게 번역된 것 같지만, &lt;code&gt;MariaDB&lt;/code&gt;의 경우에는 테이블에 번역되지 않은체 영어 원문 그대로 보여지는 경우도 있고 심지어는 아에 글씨가 나타나지 않는 부분도 있는 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;직접 번역 작업을 하면서, &lt;code&gt;PostgresSQL&lt;/code&gt;에 대해서 알아보려고 했지만, 그렇게 까지는 하지 않아도 될 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://runebook.dev/&#34;&gt;runebook.dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CUI 프로그램을 만드는 방법을 배워야겠다</title>
      <link>https://dongwooklee96.github.io/post/2021/12/03/cui-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%84-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%84-%EB%B0%B0%EC%9B%8C%EC%95%BC%EA%B2%A0%EB%8B%A4.html</link>
      <pubDate>Fri, 03 Dec 2021 09:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/12/03/cui-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%84-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%84-%EB%B0%B0%EC%9B%8C%EC%95%BC%EA%B2%A0%EB%8B%A4.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;최근에 터미널 기반의 UI를 많이 보았다. 예를 들어서, &lt;a href=&#34;https://github.com/extrawurst/gitui&#34;&gt;gitui&lt;/a&gt; 같은 터미널 기반의 프로그램인데도 불구하고, UI는 GUI와 별 다를게 없는 것들 말이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 개발을 하는데 필요한 도구들을 이런식으로 만들면 많이 편할 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예를 들어서, 테스팅을 하기 위해서, UI적으로 많은 작업을 해야하는데 이것이 상당히 불편할 때가 있다. 따라서 이런 생산성을 높히기 위한 도구로 사용하면 좋을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이런 작업을 배우면서, 새로운 언어를 배워가는 것도 재미있을 것이라는 생각도 든다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GO 나 RUST를 배울 수 있는 기회로 여기면 좋을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/extrawurst/gitui&#34;&gt;gitui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>(C언어) goto 문</title>
      <link>https://dongwooklee96.github.io/post/2021/11/28/c%EC%96%B8%EC%96%B4-goto-%EB%AC%B8.html</link>
      <pubDate>Sun, 28 Nov 2021 15:30:23 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/28/c%EC%96%B8%EC%96%B4-goto-%EB%AC%B8.html</guid>
      <description>&lt;h3 id=&#34;goto-제어문&#34;&gt;GOTO 제어문&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;goto&lt;/code&gt; 문은 지정한 곳으로 무조건 점프를 시키는 제어문이다. &lt;code&gt;goto&lt;/code&gt; 라는 말이 의미하듯이 조건 없이 무조건 제어를 옮겨버리기 때문에, 가장 사용하기 쉬운 제어문이기도 하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;goto&lt;/code&gt;로 제어를 옮길 지점은 레이블이라는 것으로 표식을 한다. 단 블록의 끝만 제외하고 프로그램의 어느 곳에나 레이블을 배치해놓고 &lt;code&gt;goto&lt;/code&gt; 레이블 명; 이라는 명령을 내리면 즉시 레이블 위치로 이동한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;레이블 보다 앞에서 뒤로 이동할 수 있지만 함수 내에서만 이동할 수 있으며 다른 함수로는 점프할 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;예제&#34;&gt;예제&lt;/h3&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char *argv[]) {

    int i, sum;

    i = 1;
    sum = 0;

here:
    sum = sum + i;
    if (i &amp;lt; 100) {
        i = i + 1;
        goto here;
    }
    printf(&amp;#34;1 ~ 100 total = %d\n&amp;#34;, sum);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;다음은 1부터 100까지 더하는 예제이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://beej.us/guide/bgc/html/split/index.html&#34;&gt;Beej&amp;rsquo;s Guide to C Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>(C언어) typedef 키워드</title>
      <link>https://dongwooklee96.github.io/post/2021/11/28/c%EC%96%B8%EC%96%B4-typedef-%ED%82%A4%EC%9B%8C%EB%93%9C.html</link>
      <pubDate>Sun, 28 Nov 2021 15:00:23 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/28/c%EC%96%B8%EC%96%B4-typedef-%ED%82%A4%EC%9B%8C%EB%93%9C.html</guid>
      <description>&lt;h3 id=&#34;사용자-정의-형-타입&#34;&gt;사용자 정의 형 타입&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C언어에서는 기존의 타입들로부터 사용자가 새로운 타입을 정의하는 방법을 제공한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용자 정의형 타입을 만드는 방법은 다음과 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;typedef 타입정의 타입이름;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;사용-예제&#34;&gt;사용 예제&lt;/h3&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

typedef enum {true, false} bool;

int main(int argc, char *argv[]) {

    bool is_true = true;
    printf(&amp;#34;result: %d\n&amp;#34;, is_true);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다음은 &lt;code&gt;bool&lt;/code&gt; 타입을 선언하여 사용하는 예제이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C언어에서는 &lt;code&gt;bool&lt;/code&gt; 타입이 존재하지 않지만, &lt;code&gt;typedef&lt;/code&gt;를 통해서 만들어서 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용자 정의형은 가독성을 높히는 효과가 있어서 주로 구조체와 같이 큰 타입에 대해서 별도의 타입을 정의하여 사용하는 경우가 많다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://beej.us/guide/bgc/html/split/index.html&#34;&gt;Beej&amp;rsquo;s Guide to C Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>앞으로 POSTGRES에 컨트리뷰션을 할 방향에 대해서...</title>
      <link>https://dongwooklee96.github.io/post/2021/11/25/%EC%95%9E%EC%9C%BC%EB%A1%9C-postgres%EC%97%90-%EC%BB%A8%ED%8A%B8%EB%A6%AC%EB%B7%B0%EC%85%98%EC%9D%84-%ED%95%A0-%EB%B0%A9%ED%96%A5%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C....html</link>
      <pubDate>Thu, 25 Nov 2021 00:50:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/25/%EC%95%9E%EC%9C%BC%EB%A1%9C-postgres%EC%97%90-%EC%BB%A8%ED%8A%B8%EB%A6%AC%EB%B7%B0%EC%85%98%EC%9D%84-%ED%95%A0-%EB%B0%A9%ED%96%A5%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C....html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;최근에 다시 컨트리뷰션을 하기 위해서, POSTGRES 소스 코드 및 메일링 리스트 그리고 COMMITFEST를 살펴보았다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;처음 커밋을 한 후로 오랜 시간이 지났지만, 여전히 메인 소스코드를 파악하고 막연히 소스 코드를 보는 것도 힘들기도 하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 범위를 줄여야겠다는 생각을 했다. 우선 &lt;code&gt;pg_dump&lt;/code&gt; 와 같은 클라이언트 도구를 하나 정해서 파악을 하고, 그 뒤에 조금 더 큰 기능을 보는 것이 좋을 것이라고 생각을 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 소스 코드 분석도 중요하지만, 우선은 테스트 코드에 집중을 하여, &lt;code&gt;perl&lt;/code&gt; 스크립트를 공부해야겠다는 생각을 했다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.timescale.com/blog/how-and-why-to-become-a-postgresql-contributor/&#34;&gt;How (and why) to become a PostgreSQL contributor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.citusdata.com/blog/2019/01/15/contributing-to-postgres/&#34;&gt;Contributing to Postgres&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.postgresql.org/wiki/So,_you_want_to_be_a_developer%3F&#34;&gt;So, you want to be a developer?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://commitfest.postgresql.org/&#34;&gt;PostgreSQL - COMMITFEST&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://planet.postgresql.org/&#34;&gt;PostgresSQL - PLANET&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>앞으로의 커리어 패쓰에 대한 정리</title>
      <link>https://dongwooklee96.github.io/post/2021/11/21/%EC%95%9E%EC%9C%BC%EB%A1%9C%EC%9D%98-%EC%BB%A4%EB%A6%AC%EC%96%B4-%ED%8C%A8%EC%93%B0%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A6%AC.html</link>
      <pubDate>Sun, 21 Nov 2021 20:19:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/21/%EC%95%9E%EC%9C%BC%EB%A1%9C%EC%9D%98-%EC%BB%A4%EB%A6%AC%EC%96%B4-%ED%8C%A8%EC%93%B0%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A6%AC.html</guid>
      <description>&lt;h3 id=&#34;이번년도에-대한-평가&#34;&gt;이번년도에 대한 평가&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이번년도를 만족스럽게 보냈는지 누군가 물어본다면, 그냥 보통이라고 대답을 할 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이번 년도에 좋았던 것은 내가 잘 몰랐던 것을 실제로 사용해보면서 알게 된 경우가 많았다. 그전에는 알고 있다고 생각을 했지만, 제대로 알지 못했던 그런 것들 말이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 업무에 조금은 익숙해진 것 같아서, 다행이라고 생각이 드는 한편, 조금은 정체 된 것 같다는 생각이 들기도 하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이번 년도에 별로 만족스럽지 못한 것은 하반기에 많은 시간이 있었음에도 불구하고 시간을 효율적으로 사용하지 못했기 때문이다. 그 이유는 명확하지 않은 목표 때문이라고 생각을 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DBMS 코어 개발을 경험해보고 싶은 마음에 시스템 프로그래밍에 대해서 공부를 했었는데, 실제 현재 하는 일과 관련 되어 있지도 않고, 그저 학습만 했기 때문에 실력이 많이 늘지 않았다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 현재 업무와 관련되어 있지 않다고 핑계를 대면서, 내가 제대로 공부를 하려면 실제 그 분야에서 일을 해야하고 그렇지 않다면 나는 절대로 하지 못할 것이라고 생각하기도 하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;내가 정말로 관심이 있다면 누가 시키거나, 억지로 하지 않아도 내가 알아서 했을 것 아닌가.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;솔직히 말하면, 내가 정말로 이 분야에 관심이 있는지 나조차도 제대로 모르겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;앞으로의-방향&#34;&gt;앞으로의 방향&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;따라서 DBMS 기업에서 일하려는 생각은 일단 접어두었다. 그 대신에 백엔드 개발자로서의 역량을 더 키워보기로 마음을 먹었다. 백엔드 개발자로서의 역량이 아직은 성숙되지 못했다고 생각이 들고, 무엇보다 내가 정말로 DBMS 코어 개발자가 되어야만 하는가에 대한 생각 정리가 되지 않았기 때문이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만, 완전히 포기한다는 것은 아니다. 우선은 방법을 조금 바꾸기로 하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;평일에는 도메인 주도 개발이나, 쿼리 튜닝같은 백엔드 엔지니어의 실력을 키울 수 있는 공부를 한다면, 주말에는 내가 평일에 공부했던 DBMS의 동작이 실제로 어떻게 구현되어 있는지 살펴보는 일을 하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이를 공부하면서, 내가 진짜로 DBMS 개발에 관심이 있는지 아니면 그냥 단순히 시스템 개발은 어떻게 이루어지는지 그리고 내가 할 수 있는지에 대한 호기심에 의해서 그런건지를 알 수 있을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 이번년도에는 우선 도메인주도 개발이나 클린 아키텍처 같은 공부를 하기 보다는 데이터베이스 이론이나, 쿼리 튜닝에 대해서 공부를 할 것이다. 그렇기 위해서는 목표가 있으면 좋은데 2022년 1회 SQLP 자격증 취득을 목표로 공부를 진행할 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 취득을 하고 나면, 그 후에 이벤트 기반 아키텍처나 도메인 주도 설계 그리고 자바에 대해서 좀 더 깊게 공부를 하면 좋을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 또한 영어 회화를 평소에 꾸준하게 하여, 외국인이랑 일상 대화를 주고 받는데 어려움이 없도록 해야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;정리&#34;&gt;정리&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;평일에는 백엔드 엔지니어로서 역량을 키울 수 있는 도메인 주도 개발 및 대용량 트레픽을 처리할 수 있는 인프라에 대해서 학습을 하자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주말에는 DBMS 인터널한 내용에 대해서 공부를 하자. 이건 일을 위해서 학습한다기 보다는 내가 관심 있어서 하는 일이고, 배운 내용을 정리해서, 포스팅을 올리자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 절대로 조바심을 가지고 공부를 하지 말고 즐기려고 최대한 노력해보자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 코드를 분석할 때는 너무 큰 목표가 아닌 작은 목표및 내가 분석한 내용을 정리하자.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>코드 카타를 하자</title>
      <link>https://dongwooklee96.github.io/post/2021/11/19/%EC%BD%94%EB%93%9C-%EC%B9%B4%ED%83%80%EB%A5%BC-%ED%95%98%EC%9E%90.html</link>
      <pubDate>Fri, 19 Nov 2021 09:19:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/19/%EC%BD%94%EB%93%9C-%EC%B9%B4%ED%83%80%EB%A5%BC-%ED%95%98%EC%9E%90.html</guid>
      <description>&lt;h3 id=&#34;코드-카타란-무엇인가&#34;&gt;코드 카타란 무엇인가?&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;최근에 &lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=258021255&#34;&gt;자바 개발자를 위한 97가지 제안&lt;/a&gt; 이라는 책을 읽게 되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;거기서 코드 카타를 통해서 학습을 하라는 글귀를 보게 되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드 카타란 쉽게 말하면, 짧은 예제 코드이다. 예를 들어서 어떤 문제를 어떻게 해결할지 쉽게 떠오르지 않을 때 구글링을 하여서, 블로그나 스택오버플로우에 나와있는 코드를 보고 도움을 받은 적이 있을 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이러한 예제들이 바로 코드 카타라고 하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;코드-카타를-만드는-절차&#34;&gt;코드 카타를 만드는 절차&lt;/h3&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- 1. 학습 하려는 주제를 선정한다.

- 2. 원하는 지식을 설명할 수 있으며 성공하는 단위 테스트를 작성한다.

- 3. 최종 솔루션에 만족할 때까지 반복해서 코드를 리펙토링 한다. 리펙토링 과정에서 단위 테스트가 실패하지 않는지 확인한다.
- 4. 테스트가 실패하도록 실습한 솔루션을 삭제한다.

- 5. 실패하는 테스트와 관련된 코드 그리고 빌드 결과물을 블로그에 올린다.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;마무리&#34;&gt;마무리&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;어떤 문제를 좋은 방법을 통해서 해결했다고 생각한다면 간단한 코드 카타를 만들어서, 이를 포스팅하는 것도 좋을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;뭔가 유용한 것을 배우고 나서 이를 기록으로 남기는 것은 중요하고, 나중에 유용하게 사용할 수 있을 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이러한 카타를 만드는 것은 해당 언어와 프레임워크의 커뮤니티를 개선시켜주는 작업이며 다른 사람들을 도울 수 있는 방법이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=258021255&#34;&gt;자바 개발자를 위한 97가지 제안&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>영어공부하기 좋은 사이트 YouEnglish</title>
      <link>https://dongwooklee96.github.io/post/2021/11/05/%EC%98%81%EC%96%B4%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EC%82%AC%EC%9D%B4%ED%8A%B8-youenglish.html</link>
      <pubDate>Fri, 05 Nov 2021 10:01:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/05/%EC%98%81%EC%96%B4%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EC%82%AC%EC%9D%B4%ED%8A%B8-youenglish.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;영어공부하기 굉장히 좋은 사이트를 찾았다. &lt;a href=&#34;https://youglish.com/&#34;&gt;YouEnglish&lt;/a&gt; 라는 사이트인데, 영어 단어를 입력하면 해당 영어 단어를 말하는 유튜브 영상이 매칭된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;영어공부할 때 예문이 부족한 경우가 많은데 발음과 함께 예문을 볼 수 있는 것이 정말로 많은 도움이 될 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youglish.com/&#34;&gt;YouEnglish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>면접 질문 3분 핵심 요약</title>
      <link>https://dongwooklee96.github.io/post/2021/11/05/%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8-3%EB%B6%84-%ED%95%B5%EC%8B%AC-%EC%9A%94%EC%95%BD.html</link>
      <pubDate>Fri, 05 Nov 2021 09:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/05/%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8-3%EB%B6%84-%ED%95%B5%EC%8B%AC-%EC%9A%94%EC%95%BD.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이전에 면접 준비를 할 때 자기 소개 및 나에 대한 소개를 어떻게 준비해야할지 고민을 많이 했고 또 어떻게 해야할지 몰라서 많은 어려움이 있었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 이에 대한 좋은 포스팅이 있어서 이를 정리하고 평소에 나의 생각과 이야기할 거리를 생각해보면 좋을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;자기소개에-대한-모든-것&#34;&gt;자기소개에 대한 모든 것&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;자기소개는 다시 돌와오지 않을 자신의 첫인상이 면접관들에게 결정되는 순간이기 때문에 매우 중요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;면접관들이 자기소개 시간때 지원자의 서류를 훓어보고, 그 다음에 어떤 질문을 할지 결정한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;앞부분에 내가 강조하고자 하는 것을 말하고 마지막에 그 내용을 반복해서 말하는 것이 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;직무와 연관지어서 내용을 구성하는 것이 좋다. 직무 역량과 관련된 자신만의 경험, 사례를 넣어서 자기소개를 하면 직무 적합성과 신뢰도가 높아진다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;면접관의 질문에 대해서 답할 때 자신의 자기소개에서 적은 내용과 다르게 말하거나 반대로 말하면 신뢰성이 저하된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;면접에서-자주-묻는-질문-top-7&#34;&gt;면접에서 자주 묻는 질문 TOP 7&lt;/h3&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. 1분 자기소개 해주세요.
2. 지원하신 직무에서 어떤 일을 했는지 아는대로 말해주세요.
3. 지원하신 직무에서 필요한 역량은 무엇인가요?
  -  지원자께서는 그 역량을 보유하고 있나요? 사례를 통해서 말씀해주세요
4. 회사를 선택하는 기준은 무엇인가요?
5. 팀의 구성원으로 조직의 목표를 위해서 노력했던 경험이 있으신가요?
6. 팀의 목표 본인의 역할은 무엇이었고, 어떻게 기여했는지 사례를 통해서 설명해주세요
7. 자신을 뽑아야하는 이유에 대해서 설명해주세요
8. 다른 사람과 갈등을 겪었던 경험에 관해서 설명해주세요.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;좋은-직원을-채용할-수-있는-최고의-면접-질문-best-5&#34;&gt;좋은 직원을 채용할 수 있는 최고의 면접 질문 BEST 5&lt;/h3&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;만약 취직해서 1년 후 큰 성과를 이루게 되고 우리가 함께 축하하는 자리에 있다고 생각해보세요. 당신은 지난 1년동안 무엇을 성취했을 것 같나요?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하기 싫은 일이 있다면 무엇인가?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지원하는 회사 업무를 실제로 어떻게 하는건지 과정을 설명해보세요.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지난 몇 년 동안 왜 몇번의 이직을 한 건가요?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;현재까지의 경력 중 가장 의미있었던 프로젝트나 업적에 대해서 말해 보시오.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;마무리&#34;&gt;마무리&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;평소에 이런 질문에 대해서 나의 생각을 정리하지 않으면 당황하여 헛소리가 튀어나올 수 있기 때문에 평소에 이를 정리하는 것이 좋은 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 이를 정리하면서 링크드인에 내가 회사를 다니면서 어떤 일을 했는지 꾸준히 업데이트를 하면 나중에 이직할 때 급하게 하지 않아도 될 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jobindexworld.com/contents/view/7701&#34;&gt;면접 질문 3분 핵심 요약&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C 언어를 깊게 배울 수 있는 좋은 사이트</title>
      <link>https://dongwooklee96.github.io/post/2021/10/31/c-%EC%96%B8%EC%96%B4%EB%A5%BC-%EA%B9%8A%EA%B2%8C-%EB%B0%B0%EC%9A%B8-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%A2%8B%EC%9D%80-%EC%82%AC%EC%9D%B4%ED%8A%B8.html</link>
      <pubDate>Sun, 31 Oct 2021 23:27:23 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/10/31/c-%EC%96%B8%EC%96%B4%EB%A5%BC-%EA%B9%8A%EA%B2%8C-%EB%B0%B0%EC%9A%B8-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%A2%8B%EC%9D%80-%EC%82%AC%EC%9D%B4%ED%8A%B8.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;요즘에는 파이썬을 배울 수 도 있지만, 대학교에가서 처음에 C언어를 배우면서 프로그래밍 공부를 하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만, 최근에 시스템 프로그래밍 공부를 하면서, 시스템 콜 함수 및 C언어 프로그래밍에 대한 공부를 해야겠다는 생각을 했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 책을 볼려고 찾아보았지만, 앞서 말했듯이 대부분 입문서가 많아서 내가 원하는 깊이의 책을 찾을 수 없었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그러던 중에 해커뉴스에서 글을 보았고 아주 많은 것을 다루고 있는 책을 보았다. 아래 링크에서 볼 수 있는데 책을 웹사이트로 만든 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매우 마음에 드는 것중에 하나는 예제가 풍부하다는 것이다. 때로는 글을 읽지 않고 예제만 보고 이해하고 싶은 것들이 있는데 이럴때 매우 좋을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특히 매크로랑 하나의 큰 프로그램을 여러개로 파일로 분할하는 부분이 많은 도움이 될 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://beej.us/guide/bgc/html/split/index.html&#34;&gt;Beej&amp;rsquo;s Guide to C Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>POSTGRES 메인터이너를 인터뷰한 사이트</title>
      <link>https://dongwooklee96.github.io/post/2021/10/22/postgres-%EB%A9%94%EC%9D%B8%ED%84%B0%EC%9D%B4%EB%84%88%EB%A5%BC-%EC%9D%B8%ED%84%B0%EB%B7%B0%ED%95%9C-%EC%82%AC%EC%9D%B4%ED%8A%B8.html</link>
      <pubDate>Fri, 22 Oct 2021 01:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/10/22/postgres-%EB%A9%94%EC%9D%B8%ED%84%B0%EC%9D%B4%EB%84%88%EB%A5%BC-%EC%9D%B8%ED%84%B0%EB%B7%B0%ED%95%9C-%EC%82%AC%EC%9D%B4%ED%8A%B8.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/whmfd8rdcmli04e/Screen%20Shot%202021-10-22%20at%209.00.20%20AM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;매우 재미있는 사이트를 발견하였다. 그것은 POSTGRES 메인테이너를 인터뷰한 내용이 있는 웹사이트였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;평소 메일링 리스트나, 커밋을 보았을 때 자주 보이는 사람들이 있었고, 그 사람들이 어떤 생각을 하는지 알 수 있어서 궁금한 점들이 해결되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://postgresql.life/&#34;&gt;POSTGRES PERSON OF WEEK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>프로그래밍을 학습하는 좋은 접근 방법</title>
      <link>https://dongwooklee96.github.io/post/2021/07/20/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%84-%ED%95%99%EC%8A%B5%ED%95%98%EB%8A%94-%EC%A2%8B%EC%9D%80-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95.html</link>
      <pubDate>Tue, 20 Jul 2021 01:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/07/20/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%84-%ED%95%99%EC%8A%B5%ED%95%98%EB%8A%94-%EC%A2%8B%EC%9D%80-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=91501933&#34;&gt;자바 웹 프로그래밍 Next Step&lt;/a&gt; 이라는 책을 읽다가 &lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=31679090&#34;&gt;코딩을 지탱하는 기술&lt;/a&gt;이라는 책에서 좋은 글귀를 발견했다고 인용하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;책의 목차를 살펴보니, 읽어보는 것도 나쁘지 않겠다. 이 책에서 말하는 프로그래밍 학습 방법은 다음과 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;첫번째 단계, 필요한 부분부터 흡수한다&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;책이나 자료 전체가 동일한 정도로 중요하다고 말할 수 없다. 목적이 명확하고, 목적 달성을 위해서
어디를 읽어야 할지 알고 있다면 다른 페이지는 신경쓰지 말고 바로 그곳을 읽도록 한다.
전체 모두 읽지 않은 것이 깨름칙한가? 하지만 좌절하고 전혀 읽지 않은 것보다는 낫다.
&amp;#39;전부 읽지 않으면&amp;#39;이라는 완벽주의가 배우고자 하는 동기를 짓누르고 있다면, 버려 버리는 것이 낫다.
동기는 매우 중요하다. 이 전략을 사용하기 위해서는 읽고 싶은 부분이 어디인지 대략적으로 전체적인
구조를 파악하고 있어야 한다. 만약 그게 어려우면 다음 전략인 
&amp;#39;대략적인 부분을 잡아서 조금씩 상세화한다.&amp;#39;를 시험해보도록 하자.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;두 번째 단계, 대략적인 부분을 잡아서 조금씩 상세화 한다&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;책이나 문서에는 목차가 있다. 목차를 보면 전체 구조를 대략적으로 알 수 있다.
그리고나서 본문을 속독으로 읽어나간다.
자세히 보지 않고 우선은 소제목이나 강조 부분, 그림과 그림 제목 등을 본다.
소스 코드를 읽을 때는 우선 디렉토리 구조와 파일 명을 본다. 그리고 파일을 속독으로 읽고
거기서 정의하고 있는 함수나 클래스 이름, 자주 호출되는 함수명 등을 본다. 이 방법들에는
&amp;#39;우선 대략적인 구조를 잡고, 조금씩 상세한 정보로 접근한다&amp;#39;는 공통점이 있다. 이것이 기본 원칙이다.
소스코드에는 다른 방식의 독해 방법이 있다. 디버거의 과정을 사용해서, 실행되는 순서나 호출 계층으로
읽는 방법이다. 이 경우도 동일하게 우선은 대략적인 처리 흐름을 따라가고, 조금씩 깊이를 더해서 함수 
안의 처리를 따라가는 것이 중요하다. 이 방법으로 읽이도 정보가 한쪽 귀로 들어와서 한쪽 귀로 나가버리는 
느낌을 받는 경우가 있다면, 마지막 방법인 &amp;#39;끝에서부터 차례대로 배껴간다&amp;#39;를 시도해보자.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;세 번째 단계, 끝에서부터 차례대로 배껴간다&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;명확히 &amp;#39;하고 싶은 것&amp;#39;, &amp;#39;조사하고 싶은 것이 없이 &amp;#39;대충 읽으면&amp;#39; 읽은 내용이 뇌를 그냥 스쳐 지나갈 뿐이다.
이런 상태에서 어떻게 배울까를 고민한다고 해도, 판단을 위한 지식 자체가 없기 때문에 무의미하다.
그래서 지식의 밑바탕을 만들기 위해서 교과서를 그대로 배껴 쓴다. 이것이 &amp;#39;베끼기&amp;#39;라 불리는 기술이다.
지식이 없는 상태에서 고민하는 것은 무익하기 때문에 우선 아무것도 생각하지 않고 지식을 복사하는 것이다.
이 이상의 방법은 없다. 저자는 시간을 정해서 &amp;#39;25분간 어디까지 베낄 수 있는지&amp;#39; 도전하는 것을 좋아한다.
분량으로 나눈 것도 좋은 방법이다. 중요한 것은 간격을 적절히 해서 목표를 이루었다는 만족감을 얻을 수 있도록
하는 것이다.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=91501933&#34;&gt;자바 웹 프로그래밍 Next Step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=31679090&#34;&gt;코딩을 지탱하는 기술&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C 포인터 이해와 활용 (2)</title>
      <link>https://dongwooklee96.github.io/post/2021/06/26/c-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9-2.html</link>
      <pubDate>Sat, 26 Jun 2021 23:27:23 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/06/26/c-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9-2.html</guid>
      <description>&lt;h2 id=&#34;chap-02-동적-메모리-관리&#34;&gt;CHAP 02. 동적 메모리 관리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터에서 강력한 기능의 대부분은 동적으로 할당된 메모리를 추적할 수 있는 포인터의 능력에서 기인한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C 프로그램은 런타임 시스템안에서 실행된다. 런타임 시스템은 일반적으로 운영체제에서 제공되는 환경이며, 많은 프로그램 기능들과 함께, 스택과 힙을 지원한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;동적-메모리-할당&#34;&gt;동적 메모리 할당&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;malloc&lt;/code&gt; 류의 함수로 메모리를 할당한다.&lt;/li&gt;
&lt;li&gt;애플리케이션에서 할당된 메모리를 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;free&lt;/code&gt; 함수를 이용해 할당된 메모리를 해제한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 단계는 매우 일반적인 동적 메모리 할당 순서이다. 다음 예제에선 &lt;code&gt;malloc&lt;/code&gt; 함수를 사용하여 정수를 저장할 메모리를 할당한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int *pi = (int*)malloc(sizeof(int));
*pi = 5;
printf(&amp;#34;*pi: %d\n&amp;#34;, *pi);
free(pi);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;malloc&lt;/code&gt; 함수의 유일한 인자에는 할당할 바이트 수를 저장한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리 할당에 성공하면 이 함수는 힙으로부터 할당된 메모리에 대한 포인터를 반환하고, 실패하면 널 포인터를 반환한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;할당할 바이트 수를 지정할 때, &lt;code&gt;sizeof&lt;/code&gt; 연산자를 사용하면 애플리케이션의 이식성을 높일 수 있고, 시스템에 할당할 정확한 바이트 수를 결정할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리가 해제 되는 즉시 해당 메모리에 다시 접근해서는 안된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;해제된 메모리에 대한 접근은 뜻하지 않게 발생하는데 일반적으로 해제된 포인터에는 항상 &lt;code&gt;NULL&lt;/code&gt;을 할당하는 것이 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리가 할당되면 추가적인 정보가 힙 관리자에 의해 관리되는 데이터 구조의 일부로 저장된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;메모리-누수&#34;&gt;메모리 누수&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메모리 누수는 할당된 메모리가 더는 사용되지 않지만, 해제되지 않을 때 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리의 주소를 잃어버리는 경우와 &lt;code&gt;free&lt;/code&gt; 함수가 호출되어야 하는 상황에 호출되지 않을 경우 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리 누수의 문제점은 해당 메모리가 반환되지 않고, 다시 사용될 수 없다는 것이다. 그 결과로 힙 관리자가 사용할 수 있는 메모리의 양이 감소하게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;char *chunk;

while (1) {
  chunk = (char*)malloc(10000000);
  printf(&amp;#34;Allocating\n&amp;#34;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;만약 메모리를 반복적으로 사용하고 누수가 발생하면, 추가적인 메모리가 필요할 때, &lt;code&gt;malloc&lt;/code&gt; 함수가 OOM(Out of Memory) 오류로 인해서 추가 메모리를 할당할 수 없어 프로그램이 종료된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;메모리-주소-손실&#34;&gt;메모리 주소 손실&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int *pi = (int*) malloc(sizeof(int));

*pi = 5;

pi = (int*) malloc(sizeof(int));
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pi&lt;/code&gt; 포인터는 해제되지 않고 새로운 메모리 주소로 재할당 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;char *name = (char*) malloc(strlen(&amp;#34;Susan&amp;#34;) + 1);
strcpy(name, &amp;#34;Susan&amp;#34;);

while (*name != 0) {
  printf(&amp;#34;c&amp;#34;, *name);
  name++;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위의 예제는 &lt;code&gt;name&lt;/code&gt; 변수의 루프를 하나씩 증가시키고 마지막에 NULL을 가리키고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;할당된 메모리의 시작 주소를 잃어버린 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;함수&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;malloc&lt;/td&gt;
          &lt;td&gt;힙에서 메모리 할당&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;realloc&lt;/td&gt;
          &lt;td&gt;기존 할당된 메모리의 크기 변경&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;calloc&lt;/td&gt;
          &lt;td&gt;힙에서 메모리 할당 그리고 0으로 설정&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;free&lt;/td&gt;
          &lt;td&gt;할당된 메모리를 힙으로 반환&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;정적-포인터-및-전역-포인터에-malloc-사용하기&#34;&gt;정적 포인터 및 전역 포인터에 &lt;code&gt;malloc&lt;/code&gt; 사용하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;정적 변수나 전역 변수는 선언시 초기화를 위해 함수 호출을 사용할 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래 코드는 정적 변수를 선언하고, &lt;code&gt;malloc&lt;/code&gt; 함수를 사용하여 초기화를 시도 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;static int *pi = (int*)malloc(sizeof(int));
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;따라서 위의 코드는 컴파일 시에 오류가 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;static int *pi;
pi = malloc(sizeof(int));
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;따라서 선언과 초기화를 분리함으로써, 오류를 피할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일러 관점에서 초기화 연산자 (=)의 사용과 할당 연산자의 사용은 차이가 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;힙-메모리와-시스템-메모리&#34;&gt;힙 메모리와 시스템 메모리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;힙은 일반적으로 운영체제의 기능을 이용해 메모리를 관리한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;힙의 크기는 프로그램이 실행될 때 고정된 크기로 정해지거나, 실행 도중에 크기를 늘리도록 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만, &lt;code&gt;free&lt;/code&gt; 함수가 호출되었다고 해도, 힙 관리자가 반드시 해제된 메모리를 운영체제로 반환하는 것은 아니고, 애플리케이션에서 해당 메모리를 다시 사용할 수 있게 할 뿐이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그래서 프로그램이 메모리를 할당한 후에, 다시 해제한다고 해도 일반적으로 운영체제 측면에서는 해제된 메모리가 애플리케이션의 메모리 사용량에 반영되지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;댕글링-포인터-다루기&#34;&gt;댕글링 포인터 다루기&lt;/h3&gt;
&lt;p&gt;포인터가 원인인 문제들의 디버깅은 때로 해결하기 어려울 때가 있다. 댕글링 포인터 문제를 처리하기 위한 몇 가지 접근 방법이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;메모리 해제 후 포인터를 NULL로 설정하라. NULL로 설정한 포인터를 그 이후에 사용하면, 애플리케이션이 종료될 것이다. 그러나 해당 포인터에 대한 다수의 복사본이 존재할 경우에는 문제는 여전히 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;free&lt;/code&gt; 함수를 대체할 새로운 함수를 작성하라.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;몇몇 런타임 시스템이나 디버깅 시스템은 해제된 메모리를 특별한 값으로 덮어쓴다. 예외가 발생하지 않은 상황이라도, 프로그래머는 예상치 못한 곳에 이러한 값이 포함된 것을 보고 프로그램이 해제된 메모리에 접근한 것을 알 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;댕글링 포인터와 다른 문제들을 발견하기 위한 서드 파티 도구들을 활용하라.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;동적-메모리-할당-기술&#34;&gt;동적 메모리 할당 기술&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;힙 관리자의 메모리 할당과 해제의 구현은 컴파일러마다 다를 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대부분의 힙 관리자들은 메모리를 할당하기 위해서, 힙 또는 데이터 세그먼트를 사용하며, 이 방식은 메모리 단편화나 프로그램 스택과 충돌이 일어나기도 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=33784887&#34;&gt;C 포인터의 이해와 활용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C 포인터 이해와 활용 (1)</title>
      <link>https://dongwooklee96.github.io/post/2021/06/26/c-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9-1.html</link>
      <pubDate>Sat, 26 Jun 2021 13:27:23 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/06/26/c-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9-1.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/123501837-a78c1480-d682-11eb-892e-eb7378e1ef67.jpg&#34; alt=&#34;8994506799_1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;포인터에 대해서 복습하고 모르던 내용을 다시 되집어 보기 위해서 다음 책을 읽고 정리한 내용이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;시작하기&#34;&gt;시작하기&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터를 얼마나 확실하게 이해하고 효율적으로 사용하는 가로 초보와 전문 C 프로그래머를 구분할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사실 포인터의 기본적인 개념은 매우 간닪다. 포인터는 메모리 위치의 주소를 저장하는 변수일 뿐이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;포인터와-메모리&#34;&gt;포인터와 메모리&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;컴파일된 C 프로그램은 다음 세가지 종류의 메모리를 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정적(Static) / 전역(Global)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;정적으로 선언된 변수들은 정적/전역 메모리에 할당된다. 또한 전역 변수들 또한 같은 메모리 공간에 할당된다.
정적/전역 변수들은 프로그램이 시작될 때 할다오디며, 프로그램이 종료될 때까지 메모리 공간에 남아 있다. 모든 함수에서 접근할 수 있는 전역 변수와는 달리 &lt;strong&gt;정적 변수의 접근 범위는 해당 변수를 선언한 함수로 제한된다&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자동 (Automatic) / 로컬 (Local)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자동 변수는 함수 안에서 선언되고 함수가 호출될 때 생성된다. 자동 변수의 접근 범위는 선언된 함수로 제한되며, 함수가 호출되는 동안에만 존재한다. 일반적으로 블록문 안에서 선언된 변수의 범위는 해당 블록으로 제한한다. 이들은 종종 자동 변수라고 언급된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동적 (Dynamic)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;동적 (Dynamic) 메모리는 힙(Heap) 메모리 영역에 할당되고 필요한 경우에 해제된다. 포인터를 사용하여 할당된 메모리 영역을 참조하며, 포인터에 의해 접근이 제한 된다. 메모리를 해제하지 않는 한 메모리레 존재한다.&lt;/p&gt;
&lt;h4 id=&#34;포인터를-잘-알아야하는-이유&#34;&gt;포인터를 잘 알아야하는 이유&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;빠르고 효율적인 코드 작성&lt;/li&gt;
&lt;li&gt;다양한 문제에 대한 효과적인 해결 방법 제공&lt;/li&gt;
&lt;li&gt;동적 메모리 할당 지원&lt;/li&gt;
&lt;li&gt;작고 간결한 표현의 사용&lt;/li&gt;
&lt;li&gt;큰 오버헤드 없이 데이터 구조를 포인터로 전달&lt;/li&gt;
&lt;li&gt;함수의 매개 변수로 전달된 데이터 보호&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;포인터를 잘 사용하면 강력한 도구이지만, 포인터를 이용할 때는 다음과 같은 다양한 문제가 발생할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배열이나 데이터 구조의 경계를 넘는 접근&lt;/li&gt;
&lt;li&gt;소멸한 자동/로컬 변수의 참조&lt;/li&gt;
&lt;li&gt;할당 해제된 힙 메모리의 참조&lt;/li&gt;
&lt;li&gt;아직 할당되지 않은 포인터에 대한 역참조&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;포인터-선언하기&#34;&gt;포인터 선언하기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;포인터 변수는 데이터 타입과 별표 그리고 변수 이름을 순서대로 나열하여 선언한다. 아래 예제 에서는 정수 변수와 정수 포인터 변수를 선언하고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int num;
int *pi;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;주소-연산자&#34;&gt;주소 연산자&lt;/h4&gt;
&lt;p&gt;주소 연산자(&amp;amp;)는 변수의 주소를 반환하다. 아래와 같이 주소 연산자를 사용하여 &lt;code&gt;pi&lt;/code&gt; 포인터를 &lt;code&gt;num&lt;/code&gt; 변수의 주소로 초기화 할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;num = 0
pi = &amp;amp;num;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;가상-메모리와-포인터&#34;&gt;가상 메모리와 포인터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;주소 출력을 좀 더 복잡하게 하기 위해서 가상 운영체제에서 표시되는 포인터의 주소가 실제 물리 메모리 주소가 될 가능성은 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가상 운영체제는 프로그램이 머신의 물리 주소 공간을 나눠 사용할 수 있게 하며, 프로그램은 페이지/프레임 단위로 물리 주소 공간을 나눠 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;애플리케이션의 페이지는 잠재적으로 연속적이지 않은 메모리 공간에 할당되거나 동시에 메모리상에 존재 하지 않을 수 도 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;운영체제는 페이지에 의해 메모리를 유지할 필요가 있을 때 보조 기억장치에 기록하고 필요한 시점에 다시 읽어들이며 이전과는 다른 메모리 공간에 할당된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;운영체제에서 실행되는 각각의 프로그램들은 머신의 전체 물리 메모리 공간에 접근할 수 있다고 가정되지만, 실제로는 그렇지 않다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;각각의 프로그램에서 사용하는 주소는 실제 물리 메모리 주소와는 다른 가상 주소이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;운영체제는 필요한 시점에 이 가상 주소를 실제 물리 메모리 주소로 변환한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;즉 페이지에 있는 코드와 데이터는 프로그램이 실행될 때 메모리의 서로 다른 물리 위치에 존재할 수 있다. 애플리케이션의 가상 주소는 실행중에 변경되지 않으며, 포인턴의 내용을 출력할 때 우리가 보게 되는 주소이다 또한 가상 주소는 실제 주소로 운영체제에 의해서 투명하게 변환된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;간접지정-연산자로-포인터-역참조하기&#34;&gt;간접지정 연산자로 포인터 역참조하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;간접 지정 연산자 (&lt;code&gt;*&lt;/code&gt;)는 포인터 변수가 가리키는 위치의 값을반환하며 참조 연산자로 포인터 값의 역참조를 하는 역할을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int num = 5;
int *pi = &amp;amp;num;


printf(&amp;#34;%d\n&amp;#34;, *pi); // 5
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그리고 또한 좌변값(left-value)에 의해서 참조 연산자의 결과를 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;좌변값은 할당 연산자의 좌측에 위치한 피연산자를 말한다. 모든 좌변값은 값이 할당될 수 있도록 변경 가능한 값이어야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*pi = 200;
printf(&amp;#34;%d\n&amp;#34;, num);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;함수-포인터&#34;&gt;함수 포인터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;포인터는 함수를 가리키도록 선언할 수 있으며 함수 포인터 선언은 일반적인 포인터 표기법에 비해서 다소 복잡하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void (*foo)();
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;null의-개념&#34;&gt;NULL의 개념&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;널은 흥미로운 주제이다. 하지만 종종 널이 가진 다양한 개념들이 잘못 이해되거나 혼란을 일으킨다. 널은 다음과 같은 개념들을 포함한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- 널 개념
- 널 포인터 상수
- NULL 매크로
- NUL 아스키 문자
- 널 문자열
- 널 문장
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터에서 NULL이 할당되면 해당 포인터는 아무것도 가리키지 않음을 의미한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;널 개념은 포인터가 다른 포인터와 다른 포인터와 특별한 값을 가질 수 있다는 것을 의미한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;널이 할당된 포인터는 메모리의 어떤 영역도 가리키지 않으며 두 개의 널 포인터는 항상 서로 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일반적이지는 않지만, 문자 포인터나 정수 포인터와 같이 포인터 타입을 위한 널 포인터 타입이 있는 경우도 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실제 널의 개념은 널 포인터 상수에 의해 지원되는 추상적인 개념이다. 널 포인터 상수는 0이거나 0이 아닐 수 있으며, C 개발자는 널 상수의 실제 내부적인 표현에 대해서 신경쓰지 않아도 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NULL 매크로는 상수 정수 0을 &lt;code&gt;void&lt;/code&gt; 포인터로 캐스팅 한 것이다. 많은 라이브러리에서 다음과 같이 정의한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#define NULL ((void*) 0)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NULL 포인터는 연결 리스트에서 종종 리스트의 끝을 표시하기 위해 사용되는 것 처럼, 많은 데이터 구조의 표현에서 매우 유용하게 사용된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;포인터 변수 &lt;code&gt;pi&lt;/code&gt;에 널 값을 할당하기 위해서는 다음과 같이 NULL 타입을 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi = NULL;
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;널 포인터와 초기화되지 않은 포인터는 명백히 다르다. NULL을 포함한 포인터가 메모리상의 어떤 위치도 참조하지 않지만, 초기화되지 않은 포인터는 어떤 값이라도 포함될 수 있으며 참조될 수 있다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;포인터는 논리식에서 단독으로 피연산자로 사용될 수 있다. 예를 들어서, 아래 코드처럼 포인터가 NULL로 설정되었는지 테스트 할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if (pi) {
  // 널이 아닌 경우
} else {
  // 널인 경우
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;널 포인터가 포함한 주소는 유효한 주소가 아니므로 절대로 역참조 해서는 안되며, 널 포인터에 대한 역참조는 프로그램에 대한 비정상 종료를 초래한다.&lt;/p&gt;
&lt;h3 id=&#34;void-포인터&#34;&gt;void 포인터&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt; 포인터는 어떤 타입의 데이터도 참조할 수 있는 범용 포인터이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void *pv;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;void&lt;/code&gt; 포인터 선어에는 두 가지 흥미로운 것이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt; 포인터는 &lt;code&gt;char&lt;/code&gt; 포인터와 같은 표현과 메모리 정렬 방법을 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt; 포인터는 다른 포인터와 절대 같지 않다. 하지만 NULL 값이 할당된 두 개의 &lt;code&gt;void&lt;/code&gt; 포인터는 서로 같다. &lt;code&gt;void&lt;/code&gt; 포인터의 실제 동작은 시스템에 따라서 서로 다르다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int num;
int *pi = &amp;amp;num;
printf(&amp;#34;Value of pi: %p\n&amp;#34;, pi); // Value of pi: 0x7ffee6dfd9cc
void* pv = pi;
pi = (int*) pv;
printf(&amp;#34;Value of pi: %p\n&amp;#34;, pi); // Value of pi: 0x7ffee6dfd9cc
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void 포인터 사용시 주의가 필요하다.
임의의 포인터를 void 포인터로 캐싱팅 한 후에, 기존 타입이 아닌 전혀 다른 타입의 포인터로 캐스팅하더라도 이를 막을 방법이 없다.
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;size_t size = sizeof(void*); // valid
size_t size = sizeof(void); // invalid
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;전역-포인터와-정적-포인터&#34;&gt;전역 포인터와 정적 포인터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;포인터가 전역 또는 정적으로 선언되면, 해당 포인터는 프로그램 시작 시에 &lt;code&gt;NULL&lt;/code&gt;로 초기화 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int *globalpi;

void foo() {
  static int *staticpi;
}

int main() {
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;포인터의-크기와-데이터-타입&#34;&gt;포인터의 크기와 데이터 타입&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터의 크기는 애플리케이션의 호환성과 다른 환경으로의 이식 가능성을 고민할 때 문제가 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;포인터의 크기는 사용하는 장비와 컴파일러에 따라서 다르다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;메모리-모델&#34;&gt;메모리 모델&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;64&lt;/code&gt;비트 컴퓨터의 도입으로 C 기본 데이터 타입의 메모리 크기 차이가 더 확실해졌다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴퓨터와 컴파일러들은 C 기본 데이터 타입의 메모리 할당을 위해서 저마다 다른 옵션의 메모리 모델을 가지고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;I In L Ln LL LLn P Pn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/123513904-c3b3a400-d6ca-11eb-8d44-66838289b5f0.png&#34; alt=&#34;Screen Shot 2021-06-26 at 10 06 25 PM&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;사전-정의된-포인터-관련-데이터-타입&#34;&gt;사전 정의된 포인터 관련 데이터 타입&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터를 다룰 때, 네 가지의 사전 정의된 데이터 타입이 종종 사용된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size_t&lt;/code&gt;, &lt;code&gt;ptrdiff_t&lt;/code&gt;, &lt;code&gt;intptr_t&lt;/code&gt;, &lt;code&gt;uintptr_t&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;size_t-타입의-이해&#34;&gt;&lt;code&gt;size_t&lt;/code&gt; 타입의 이해&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size_t&lt;/code&gt; 타입은 C 언어에서 임의의 객체가 가질 수 있는 최대 크기를 나타낸다. 크기를 표현하는 데 음수의 사용은 의미가 없기 때문에, &lt;code&gt;size_t&lt;/code&gt;는 부호 없는 정수를 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size_t&lt;/code&gt; 타입을 쓰는 이유는 시스템에서 주소 지정이 가능한 메모리 영역과 일치하는 크기를 선언하는 이식 가능한 방법을 제공하기 위해서이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;문자의 수나 배열 인덱스와 같은 크기 변수를 선언할 때는
size_t 타입을 사용하는 것이 좋다.
size_t 타입은 반복문이나 카운터나 배열의 참조 그리고 때로는 포인터 연산에서 사용될 수 있다.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;intptr_t-uintptr_t-사용하기&#34;&gt;&lt;code&gt;intptr_t&lt;/code&gt;, &lt;code&gt;uintptr_t&lt;/code&gt; 사용하기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;intptr_t&lt;/code&gt;, &lt;code&gt;uintptr_t&lt;/code&gt; 타입은 포인터의 주소를 저장하는데 사용된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 두 타입은 다른 환경으로 이식이 가능하고, 안전한 포인터 선언 방법을 제공하며, 시스템 내부에서 사용하는 포인터와 같은 크기다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;포인터를 정수 표현으로 변환할 때 유용하게 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;상수와-포인터&#34;&gt;상수와 포인터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C&lt;/code&gt; 에서 포인터와 &lt;code&gt;const&lt;/code&gt; 키워드를 함게 사용하면 매우 강력한 기능이 제공된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt; 키워드와 포인터의 사용은 몇몇 상황에 전혀 새로운 방식의 데이터 보호 방법을 제공한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;상수에-대한-포인터&#34;&gt;상수에 대한 포인터&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터는 상수를 가리키도록 정의될 수 있다. 이 말은 곧 포인터가 참조하는 값을 수정하는 데 사용될 수 없음을 의미한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 예제에서 상수 정수를 선언한다. 다음으로 정수에 대한 포인터와 상수 정수에 대한 포인터를 선언하고 각각의 정수로 초기화 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int num = 0;
const int limit = 500;
int *pi;
const int *pci;

pi = &amp;amp;num;
pci = &amp;amp;limit;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;상수 포인터에 대한 역참조는 단지 정수의 값을 읽기만 한다면 문제가 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;printf(&amp;#34;%d\n&amp;#34;, *pci);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터가 참조하는 값을 변경하기 위해서 상수 포인터를 역참조할 수는 없다. 그러나 포인터 값 자체는 상수가 아니므로 포인터 자체의 값은 변경할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;즉, 포인터는 다른 상수 정수나 정수를 사용하기 위해서 변경될 수 있다. 상숭 포인터 값 자체의 변경은 전혀 문제가 되지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상수 포인터 선언은 단지 포인터를 통해 참조된 값의 변경만을 제한한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pci = &amp;amp;num;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;상수 정수를 가리키는 &lt;code&gt;pci&lt;/code&gt; 포인터 변수의 선언은 다음을 의미한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pci&lt;/code&gt;는 다른 상수 정수를 가리키도록 할당될 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pci&lt;/code&gt;는 다른 비상수 정수를 가리키도록 할당될 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pci&lt;/code&gt;는 가리키는 정수의 값을 읽기 위해 역참조 될 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pci&lt;/code&gt;는 가리키는 정수의 값을 변경하기 위해 역참조 될 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;비상수를-가리키는-상수-포인터&#34;&gt;비상수를 가리키는 상수 포인터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;비상수를 가리키는 상수 포인터 역시 선언할 수 있으며, 이 선언의 의미는 포인터 자체의 값, 즉 가리키는 대상은 변경할 수 없지만 포인터가 가리키는 곳의 값은 변경할 수 있음을 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int num;
int *const cpi = &amp;amp;num;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위 선언은 다음을 의미한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cpi&lt;/code&gt; 변수는 비상수 변수로 초기화 되어야한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpi&lt;/code&gt; 변수는 변경될 수 없다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpi&lt;/code&gt; 포인터 변수가 가리키는 변수의 값은 변경할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;상수를-가리키는-상수-포인터&#34;&gt;상수를 가리키는 상수 포인터&lt;/h3&gt;
&lt;p&gt;상수를 가리키는 상수 포인터는 거의 사용되지 않는다. 포인터 값은 변경될 수 없으며, 포인터가 가리키는 값 역시 포인터를 통해 변경될 수 없다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const int* const cpic = &amp;amp;limit;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;다중-수준-상수-포인터&#34;&gt;다중 수준 상수 포인터&lt;/h3&gt;
&lt;p&gt;상수 포인터는 다중 수준의 간접 지정이 가능하다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const int * const cpci = &amp;amp;limit;
const int * const * pcpci;
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;포인터의 종류&lt;/th&gt;
          &lt;th&gt;포인터 데이터 변경&lt;/th&gt;
          &lt;th&gt;포인터 대상 데이터 변경&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;비상수를 가리키는 포인터&lt;/td&gt;
          &lt;td&gt;O&lt;/td&gt;
          &lt;td&gt;O&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;상수를 가리키는 포인터&lt;/td&gt;
          &lt;td&gt;O&lt;/td&gt;
          &lt;td&gt;X&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;비상수를 가리키는 상수 포인터&lt;/td&gt;
          &lt;td&gt;X&lt;/td&gt;
          &lt;td&gt;O&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;상수를 가리키는 상수 포인터&lt;/td&gt;
          &lt;td&gt;X&lt;/td&gt;
          &lt;td&gt;X&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=33784887&#34;&gt;C 포인터의 이해와 활용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
