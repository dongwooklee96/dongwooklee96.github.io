<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>서버 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/categories/%EC%84%9C%EB%B2%84.html</link>
    <description>Recent content in 서버 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sat, 27 Mar 2021 14:47:39 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/categories/%EC%84%9C%EB%B2%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>리버스 프록시란 무엇일까? (draft)</title>
      <link>https://dongwooklee96.github.io/post/2021/03/27/%EB%A6%AC%EB%B2%84%EC%8A%A4-%ED%94%84%EB%A1%9D%EC%8B%9C%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-draft.html</link>
      <pubDate>Sat, 27 Mar 2021 14:47:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/27/%EB%A6%AC%EB%B2%84%EC%8A%A4-%ED%94%84%EB%A1%9D%EC%8B%9C%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-draft.html</guid>
      <description>&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>메시지 교환 패턴이란(MESSAGE EXCHNAGE PATTERN)</title>
      <link>https://dongwooklee96.github.io/post/2021/03/27/%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B5%90%ED%99%98-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80message-exchnage-pattern.html</link>
      <pubDate>Sat, 27 Mar 2021 14:47:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/27/%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B5%90%ED%99%98-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80message-exchnage-pattern.html</guid>
      <description>&lt;h2 id=&#34;비동기-메시지-패턴&#34;&gt;비동기 메시지 패턴&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;비동기 메시지 패턴은 앞서 살펴보았듯이 중간에 큐를 두어서 구현하기 때문에, 여러 가지 메시지 전달 패턴을 구현할 수 있다. 몇 가지 대표적인 패턴에 대해서 알아보자.&lt;/p&gt;
&lt;h3 id=&#34;fire--forgot-패턴&#34;&gt;Fire &amp;amp; Forgot 패턴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메시지 큐를 사용하는 패턴 중에 가장 일반적인 비동기 호출 패턴으로, 클라이언트가 호출한 후 큐에 메시지가 제대로 들어갔을면 메시지의 처리 결과에 관계없이 응답을 기다리지 않고 바로 반환한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;큐에 저장된 메시지는 비즈니스 컴포넌트에 의해서 나중에 처리된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;publish--subscribe-패턴&#34;&gt;Publish &amp;amp; Subscribe 패턴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메시지 큐에 구독자를 등록하면 클라이언트에서 보낸 하나의 메시지가 등록된 모든 구독자에게 전달이 되어서 처리된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1 : N 관계의 비동기 처리를 구현하고자 할 때 사용된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JMS&lt;/code&gt;의 &lt;code&gt;Topic&lt;/code&gt;이 이에 해당한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;routing-패턴&#34;&gt;Routing 패턴&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112854564-f14b7a00-90e8-11eb-8463-8e0152c7a3c6.png&#34; alt=&#34;0_gFwb04MsfqtVB5bY&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;라우팅 패턴은 큐에 저장된 메시지를 조건에 따라서, 특정 비즈니스 컴포넌트로 라우팅 하는 기능이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Pub/Sub&lt;/code&gt; 처럼 큐에 여러 개의 비즈니스 컴포넌트가 붙기는 하지만, 특정 메시지는 조건에 따라서 특정 비즈니스 컴포넌트 한 개에만 전달 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;콜백-패턴&#34;&gt;콜백 패턴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메시지 큐를 이용한 비동기 패턴은 클라이언트가 메시지 처리에 대한 응답을 받을 수 없다고 설명했었는데, 예외적으로 콜백 패턴을 사용하면 메시지 처리에 대한 응답을 받을 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클라이언트가 요청을 보내서, 메시지 큐에 저장한 후에 &lt;code&gt;CallBack&lt;/code&gt; 패턴도 다른 비동기 패턴과 마찬가지로 응답을 기다리지 않고 다음 로직을 진행한다. (그래야지 비동기 패턴이므로)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비즈니스 컴포넌트에서 처리가 끝나면 서버는 다시 클라이언트에 처리가 끝났다는 응답과 함께 처리 결과 (&lt;code&gt;Response&lt;/code&gt;) 메시지를 콜백으로 보낸다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이때 클라이언트가 응답 메시지가 올 때까지 기다리는 것이 아니라 비즈니스 로직을 수행하고 있기 때문에, 서버가 응답 메시지를 보내면 이벤트 핸들러 방식에 의해서 응답 메시지를 처리하는 이벤트 핸들러를 호출하여 응답 메시지를 처리하도록 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;콜백 방식의 호출은 응답 메시지를 받기 위해서, 몇 가지 부가적인 정보가 필요한데, 콜백 주소와 &lt;code&gt;Correlation ID&lt;/code&gt; 라는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;콜백 주소는 서버가 메시지를 다 처리하고 난 후에 클라이언트로 응답을 보낼 때 사용하는 클라이언트의 IP 주소와 포트이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 &lt;code&gt;Correlation ID&lt;/code&gt; 라는 것이 특이한데, 클라이언트에서 10개의 요청을 서버에 보냈다고 가정하면, 서버가 메시지를 처리한 후에 콜백을 이용하여 응답을 보내면 해당 응답 메시지가 10개의 요청중 어느 요청에 대한 응답인지 식별할 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 이를 식별하기 위해서 요청을 할 때, &lt;code&gt;Corrleation ID&lt;/code&gt;를 같이 실어 보낸후 응답에 이 &lt;code&gt;ID&lt;/code&gt;를 다시 실어서 보내게 된다. 따라서 콜백 응답 메시지가 어느 요청에 대한 응답 메시지인지를 식별할 수 있게 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rabbitmq.com/getstarted.html&#34;&gt;MEP 패턴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
