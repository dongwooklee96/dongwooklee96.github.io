<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>펄 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/categories/%ED%8E%84.html</link>
    <description>Recent content in 펄 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Tue, 14 Dec 2021 21:20:40 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/categories/%ED%8E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LEARING PERL - 5번째 학습 (서브 루틴)</title>
      <link>https://dongwooklee96.github.io/post/2021/12/14/learing-perl-5%EB%B2%88%EC%A7%B8-%ED%95%99%EC%8A%B5-%EC%84%9C%EB%B8%8C-%EB%A3%A8%ED%8B%B4.html</link>
      <pubDate>Tue, 14 Dec 2021 21:20:40 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/12/14/learing-perl-5%EB%B2%88%EC%A7%B8-%ED%95%99%EC%8A%B5-%EC%84%9C%EB%B8%8C-%EB%A3%A8%ED%8B%B4.html</guid>
      <description>&lt;h3 id=&#34;서브-루틴&#34;&gt;서브 루틴&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;서브 루틴의 이름은, 펄의 또 다른 식별자이다. 그리고 때때로 앞에 &lt;code&gt;&amp;amp;&lt;/code&gt; 기호가 붙지만, 어떨때는 생략해도 되고 어떨때는 생략하면 안된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;펄에서 서브루틴 이름은 별도의 네임 스페이스에 존재하기 때문에 같은 이름의 스칼라 변수가 같은 프로그램 내에 존재할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;뭐 일반적으로 그럴 일은 별로 없겠지만 말이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;서브-루틴을-선언하는-방법&#34;&gt;서브 루틴을 선언하는 방법&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sub&lt;/code&gt; 라는 키워드를 사용하고 &lt;code&gt;{  }&lt;/code&gt; 사이에 함수의 내용을 넣으면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sub marine {
  $n += 1;
  print &amp;quot;hello, sailor number $n\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;만약 중복되는 이름의 서브루틴이 있을 경우 뒤에오는 서브 루틴이 앞의 것을 대체한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 펄의 서브루틴에서는 전역변수에 접근이 가능하다. 이 점은 많은 버그가 일어날 것 같다. 심지어 책에서는 이러한 점이 펄 사용자로 하여금 성난 군중을 만들어서 펄 개발팀을 도망가게 만들었다고 표현했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;곧 서브루틴안에서만 사용가능한 변수를 배우게 될 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;서브-루틴을-호출하는-방법&#34;&gt;서브 루틴을 호출하는 방법&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;서브 루틴을 호출하는 방법은 &lt;code&gt;&amp;amp;&lt;/code&gt;를 이용해서 호출할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;amp;marine;
&amp;amp;marine;
&amp;amp;marine;
&amp;amp;marnie;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;이는 위에서 선언한 서브루틴인 &lt;code&gt;marine&lt;/code&gt; 서브루틴을 호출한 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;서브루틴의-반환값&#34;&gt;서브루틴의 반환값&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;서브루틴을 호출할 때는 그 자체로 표현식으로 처리된다. 반환된 값을 사용하던지 안하던지는 상관이 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모든 서브 루틴값은 반환 값을 지닌다. 하지만 그 모두가 의미있는 값을 반환하는 것은 아니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;반환 값을 가지는 서브루틴이나 가지지 않는 서브루틴 사이의 차이점은 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;펄에서는 따로, &lt;code&gt;return&lt;/code&gt; 와 같은 키워드를 사용하지 않는다. 마지막에 위치한 값이 자동으로 반환값이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sub sum_of_fred_and_barney {
  print &amp;quot;hey, you called me sum_of_fred_and_barney subroutine!&amp;quot;;
  $fred + $barney;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위의 예제에서는 자동으로 &lt;code&gt;$fred+ $barney&lt;/code&gt;가 리턴값이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 서브루틴의 마지막에 값이 아닌 &lt;code&gt;print&lt;/code&gt;가 오면 그냥 정상적으로 출력되었다는 뜻으로 &lt;code&gt;1&lt;/code&gt; 값이 반환된다. 이러한 동작이 원한것이 아니라면 주의를 해야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sub sum_of_fred_and_barney {
  print &amp;quot;hey, you called me sum_of_fred_and_barney subroutine!&amp;quot;;
  $fred + $barney;
  print &amp;quot;hey, I&#39;m returning a value now\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그렇다면, 위의 예제에서와 같이 중간의 계산 값은 어떻게 되는가? 펄은 이러한 값들은 사용하지 않고 그냥 버려버린다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 펄에서 경고를 표시해주도록 설정했다면, 이러한 연산이 있다고 알려줄 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 마지막 예제는 큰 값을 리턴하는 서브 루틴이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sub larger_of_fred_or_barney {
  if ($fred &amp;gt; $barney) {
    $fred;
  } else {
    $barney;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Learning-Perl-Randal-L-Schwartz/dp/1449303587&#34;&gt;Learning Perl, 7th Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LEARING PERL - 4번째 학습</title>
      <link>https://dongwooklee96.github.io/post/2021/12/08/learing-perl-4%EB%B2%88%EC%A7%B8-%ED%95%99%EC%8A%B5.html</link>
      <pubDate>Wed, 08 Dec 2021 19:20:40 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/12/08/learing-perl-4%EB%B2%88%EC%A7%B8-%ED%95%99%EC%8A%B5.html</guid>
      <description>&lt;h3 id=&#34;for-반복문&#34;&gt;FOR 반복문&lt;/h3&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/perl

foreach $rock (qw/ bedrock slate lava /) {
    print &amp;quot;one rock is $rock.\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;펄에서는 반복문을 위와 같이 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특이한 점은 &lt;code&gt;$rock&lt;/code&gt;에 들어가는 값이 복사본이 아니라, 리스트의 원본이 들어간다는 점이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약에 &lt;code&gt;$rocks&lt;/code&gt;를 변경하면 원본 리스트가 변경된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/perl

@rocks = qw/ bedrock slate lava /;

foreach $rock (@rocks) {
    $rock = &amp;quot;\t$rock&amp;quot;;
    $rock .= &amp;quot;\n&amp;quot;;
}
print &amp;quot;The rocks are:\n&amp;quot;, @rocks;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;따라서 이렇게 작성한다면, 원본 배열과 다른 결과가 나올 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또 한가지 특이한 점은, 어떤 값이 들어있는 변수를 반복문의 컨트롤 변수 (리스트의 값이 들어가는 변수)로 사용한다면 반복문에서는 리스트의 값이 하나씩 대입되고 반복문이 끝나면 반복문이 시작하기 전의 값으로 복원되어 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/perl

$rock = &#39;shale&#39;;

@rocks = qw&amp;quot; bedrock slate lava &amp;quot;;

foreach $rock (@rocks) {
  print &amp;quot;$rock\n&amp;quot;;
}

print &amp;quot;rock is still $rock\n&amp;quot;; # &#39;rocks is still shale&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;따라서, 반복문에서 사용하는 컨트롤 변수를 위에서 사용하고 있는지 걱정할 필요가 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_-변수&#34;&gt;$_ 변수&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;foreach&lt;/code&gt; 문에서, 컨트롤 변수를 생략했다면, 자동으로 &lt;code&gt;$_&lt;/code&gt;라는 공간에 들어가게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/perl

foreach (1..10) {
  print &amp;quot;I can count to $_ !\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;그리고 &lt;code&gt;$_&lt;/code&gt; 변수에 값을 대입하고 나서, &lt;code&gt;print&lt;/code&gt;를 하게 되면 이전에 대입한 값이 들어가게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/perl

foreach (1..10) {
  print &amp;quot;I can count to $_ !\n&amp;quot;;
}

$_ = &amp;quot;Yabba dabba doo\n&amp;quot;;
print; # &#39;Yadda badda doo&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;reverse-연산자&#34;&gt;reverse 연산자&lt;/h3&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/perl

@fred = 6..10;
print &amp;quot;@fred\n&amp;quot;;
@barney = reverse(@fred);
print &amp;quot;@fred\n&amp;quot;;
@wilma = reverse 6..10;
print &amp;quot;@wilma\n&amp;quot;;
@fred = reverse @fred;
print &amp;quot;@fred\n&amp;quot;;

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reverse&lt;/code&gt; 연산자는 리스트의 값을 거꾸로 변환해서 반환한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주의할 점은 그저 거꾸로 뒤집은 값을 반환할 뿐이지, 원본 값을 변경하지는 않는다는 점이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sort-연산자&#34;&gt;sort 연산자&lt;/h3&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/perl

@rocks = qw/ bedrock slate rubble granite /;
print &amp;quot;@rocks\n&amp;quot;; # bedrock slate rubble granite

@sorted = sort(@rocks);
print &amp;quot;@sorted\n&amp;quot;; # bedrock granite rubble slate
@back = reverse sort @rocks;
print &amp;quot;@back\n&amp;quot;; # slate rubble granite bedrock
@rocks = sort @rocks;
print &amp;quot;@rocks\n&amp;quot;; # bedrock granite rubble slate
@numbers = sort 97..102; # 100 101 102 97 98 99
print &amp;quot;@numbers\n&amp;quot;;

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이를 실행해보면 마지막 결과가 예상과 다르게 나오는데 그 이유는 문자열로 취급하기 때문이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 &lt;code&gt;reverse&lt;/code&gt; 연산자와 마찬가지로, 정렬한 리스트를 반환하기 때문에 원본은 변경되지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;each-연산자&#34;&gt;each 연산자&lt;/h3&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/perl

@rocks = qw/ bedrock slate rubble granite /;
while (($index, $value) = each @rocks) {
  print &amp;quot;$index: $value\n&amp;quot;;
}

# 결과
0: bedrock
1: slate
2: rubble
3: granite
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;each&lt;/code&gt; 연산자는 인덱스와 리스트의 값을 동시에 반환한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 파이썬을 알고 있다면, &lt;code&gt;enumerate&lt;/code&gt; 를 사용한 것과 같은 결과를 얻을 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;스칼라-값과-리스트-값은-문맥에-따라서-달라진다&#34;&gt;스칼라 값과 리스트 값은 문맥에 따라서 달라진다&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;펄은 특이하게 문맥에 따라서 값이 다르게 처리 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이것은 마치 자연어와 같은데, 자연어도 문맥에 따라서 같은 단어임에도 불구하고 다르게 사용될 수 있다. 펄도 그렇다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@people = qw (fred barney betty);
@sorted = sort @people; # list context: barney, betty, fred
$number = 42 + @people; # 42 + 3 = 45
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;따라서 리스트를 생산하는 연산의 경우 리스트에서만 사용될 것으로 예상이 되며, 스칼라 값에 사용할 경우에는 예상하기 힘든 값이 나올 수도 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;리스트를 만드는 연산을 스칼라 문맥에서 사용할 경우에는 문서를 참조하는 것이 낫다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/usr/bin/perl

@backwards = reverse qw/ yadda dabba doo/;
print &amp;quot;@backwards\n&amp;quot;;
$backwards = reverse qw/ yabba dabba doo /;
print &amp;quot;$backwards\n&amp;quot;;

== result ==
doo dabba yadda
oodabbadabbay
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;일반적인 경우 아래와 같이 생각하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$fred = something; # 스칼라
@pebbles = something; # 리스트
($wilma, $betty) = something; # 리스트
($dino) = something # 리스트
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;마지막의 경우 스칼라라고 생각 할 수도 있지만, 리스트인 것을 주의해서 봐야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;괄호가 리스트라는 것을 명확하게 나타내고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;리스트에 스칼라를 대입해도 리스트이고, 리스트 값을 대입해도 리스트이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;리스트 값에 스칼라 변수를 대입하면 자동으로 리스트 값으로 변환된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@fred = 6 * 7 # list (42)
@barney = &amp;quot;hello&amp;quot; . &#39; &#39; . &amp;quot;world&amp;quot;;

@wilma = undef # list (undef)
@betty = (  ); # empty array
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;또한, &lt;code&gt;undef&lt;/code&gt; 값은 스칼라 갑이며 빈 리스트를 만들고 싶다면, 빈 괄호를 사용하여 만드는 것이 더 올바른 것을 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 강제로 스칼라 값을 취하고 싶다면 &lt;code&gt;scalar&lt;/code&gt; 라는 함수를 사용하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;!/usr/bin/perl

@rocks = qw( talc quartz jade obsidian );

print &amp;quot;How many rocks do you have?\n&amp;quot;;
print &amp;quot;I have &amp;quot;, @rocks, &amp;quot; rocks!\n&amp;quot;;
print &amp;quot;I hvae &amp;quot;, scalar @rocks, &amp;quot; rocks!\n&amp;quot;;

=== result ===
How many rocks do you have?
I have talcquartzjadeobsidian rocks!
I hvae 4 rocks!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;stdin&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;대표적으로 스칼라 값과 리스트 값에 따라서 동작이 달라지는 연산이 바로 &lt;code&gt;&amp;lt;STDIN&amp;gt;&lt;/code&gt;이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스칼라 값으로 &lt;code&gt;&amp;lt;STDIN&amp;gt;&lt;/code&gt; 을 입력받으면 한 단어만 입력받게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;리스트 값에 &lt;code&gt;&amp;lt;STDIN&amp;gt;&lt;/code&gt; 으로 사용자 입력값을 받으면, 더 이상 남아있는 값이 없을 때까지 입력을 받는다. 모두 입력 받았다는 것을 나타내려면 CTRL + D를 누르면 모두 입력 했다는 것을 나타낸다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;보통 개행 문자 (\n)를 &lt;code&gt;chomp()&lt;/code&gt;를 사용하여 제거한 값을 받는다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@lines = &amp;lt;STDIN&amp;gt;;
chomp(@lines);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Learning-Perl-Randal-L-Schwartz/dp/1449303587&#34;&gt;Learning Perl, 7th Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LEARING PERL - 3 (문자열)</title>
      <link>https://dongwooklee96.github.io/post/2021/11/30/learing-perl-3-%EB%AC%B8%EC%9E%90%EC%97%B4.html</link>
      <pubDate>Tue, 30 Nov 2021 19:20:40 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/30/learing-perl-3-%EB%AC%B8%EC%9E%90%EC%97%B4.html</guid>
      <description>&lt;h3 id=&#34;홑따옴표-문자열&#34;&gt;홑따옴표 문자열&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;홑따옴표 문자열은 다음과 같이 표시할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#39;fred&#39; # four characters: f, r, e, d
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;그리고 특수 홑따음표나 백슬레시를 표현하고 싶다면 앞에 &amp;lsquo;&#39; 백슬레시를 붙여주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#39;Don\&#39;t let an apostrophe end this string prematurely!&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;주의할 점은 백슬레시는 오직 &lt;code&gt;&#39;&lt;/code&gt; 홑따옴표를 나타내거나, 백슬레시를 나타낼 때만 사용할 수 있다는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#39;hello\nthere&#39; # hellonthere
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;쌍따옴표-문자열&#34;&gt;쌍따옴표 문자열&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;쌍따옴표는 기본적으롤 홑따옴표 문자열과 큰 차이는 없지만, 백슬레시를 이용하여 활용할 수 있는 표현이 훨씬 더 많다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;barney&amp;quot; # &#39;barney&#39;와 같다.
&amp;quot;hello world\n&amp;quot; # &#39;hello world&#39; 다음에 개행이 추가된다.
&amp;quot;the last character of this string is a quote mark: \&amp;quot;&amp;quot;
&amp;quot;coke\tsprite&amp;quot; # coke, 다음에 탭문자 그리고 sprite
&amp;quot;\x{2668}&amp;quot; # 유니코드로 &#39;♨&#39; 문자가 표현된다.
&amp;quot;\N{SNOWMAN}&amp;quot; # 유니코드로 &#39;☃&#39; 문자가 표현된다.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;그리고 쌍따옴표 문자열은 변수의 값을 표현할 수 있는 장치가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;문자열-연산자&#34;&gt;문자열 연산자&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;펄에는 스트링을 반복해서 더할 수 있는 문법이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;fref&amp;quot; x 3 # &amp;quot;fredfredfred&amp;quot; 로 나타내진다.
&amp;quot;barney&amp;quot; x (4 + 1) # &amp;quot;barneybarneybarneybarneybarney&amp;quot; 로 나타내진다.
5 x 4.8 # 5555 로 나타내진다.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;마지막 예제는 조금은 특이한데, &lt;code&gt;x&lt;/code&gt; 연산자는 왼쪽에 오는 값을 문자열로 치환해서 생각을 한다. 따라서 &amp;ldquo;5&amp;quot;가 되고 그것을 오른쪽에 있는 4와 곱해서 &amp;ldquo;5555&amp;quot;가 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;뒤의 숫자 4.8은 내림처리되어서 4로 표현된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 반복할 숫자가 0이라면 빈 문자열을 나타낸다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;펄은-자동으로-숫자와-문자-타입을-변경한다&#34;&gt;펄은 자동으로 숫자와 문자 타입을 변경한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;펄은 연산자에 따라서, 앞에 오는 타입을 변환시키는데 앞에 오는 타입이 문자열을 요구하면 문자열로 생각하고 숫자를 요구하면 숫자로 판단하게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 숫자 타입을 원하는 연산자에 문자열을 적게 되면 자동으로 숫자로 타입으로 변경된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 &amp;ldquo;12&amp;rdquo; * &amp;ldquo;3&amp;rdquo; 같은 숫자 타입을 원하는 연산자에 문자열을 적게 된다면 문자열은 자동으로 숫자로 변환되고 36이라는 결과가 반환된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 문자열로 변환될 수 없는 숫자와 문자가 섞여 있는 타입이라면 문자열에서 앞쪽의 숫자만 뽑아서 계산을 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 절대로 숫자로 변환할 수 없다면 숫자 0으로 변경되어서 계산된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;12abcde34&amp;quot; * &amp;quot; 3&amp;quot; # 36 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;경고-표시&#34;&gt;경고 표시&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;펄 스크립트를 작성할 때, 아래 코드를 적으면 프로그램에서 어떻게 동작할지 잘 모르겠는 부분을 워닝으로 표시해줄 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/perl
use warnings;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또는&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/perl -w
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;그 경고는 모듈을 추가하였을 때 내가 작성하지 않은 부분에 대해서도 경로를 표시해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ perl -w my_program
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;그리고 &lt;code&gt;use diagnostics;&lt;/code&gt; pragma를 사용하면 더 상세한 내용을 알 수 있다. 이것은 프로그램을 최적화하는데 많은 도움이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Learning-Perl-Randal-L-Schwartz/dp/1449303587&#34;&gt;Learning Perl, 7th Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LEARING PERL - 2 (데이터 타입)</title>
      <link>https://dongwooklee96.github.io/post/2021/11/26/learing-perl-2-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85.html</link>
      <pubDate>Fri, 26 Nov 2021 19:20:40 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/26/learing-perl-2-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85.html</guid>
      <description>&lt;h3 id=&#34;자료형&#34;&gt;자료형&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;펄의 데이터 타입은 상당히 간단하다, 스칼라 타입으로 불리는 데이터는 단지 하나의 값을 나타낸다고 생각을 하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예를 들어서 숫자와 문자열 같은 데이터들이 바로 스칼라 타입이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다른 프로그래밍 언어에서는 숫자와 문자열 타입은 엄연히 다른 타입으로 취급하는 경우가 많은데 펄에서는 비슷하게 처리된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이는 처음에는 이상하게 느껴질 수도 있지만, 데이터를 다루기에는 더 편할 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;스칼라-값과-스칼라-변수&#34;&gt;스칼라 값과 스칼라 변수&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;숫자와 문자열 같은 스칼라 값이 있고 이 값을 저장할 수 있는 스칼라 변수가 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;당연하게도 스칼라 값은 변경할 수 없지만, 변수에 어떤 스칼라가 들어갈지는 변경할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;펄은 숫자를 처리할 때 모든 숫자를 내부적으로 실수로 처리한다. 이는 정확도와 숫자 크기에 제한이 있다는 뜻이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 파이썬과 같이 지수 연산을 다음과 같이 할 수 있다. 어쩌면 파이썬이 펄을 보고 참고한 것일 수도 있을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2**3 # 8
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;펄에서 가장 짧은 문자열의 길이는 아무것도 없는 것이고, 가장 긴 문자열의 길이는 메모리가 허락하는 한 제한이 없다. 이는 펄이 추구하는 원칙중에 &amp;ldquo;제약 없음&amp;quot;에 기인한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;펄 문자열에는 어떠한 값이라도 들어갈 수 있는데, 예를들어, 그래픽 이미지 값을 변경할 수도 있고, 컴파일된 프로그램을 문자열로 읽어들일 수도 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 펄은 유니코드 문자에 대해서, 완벽한 지원을 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 펄 컴파일러가 자동적으로 유니코드로 해석하지는 않고, 아래 &lt;code&gt;pragma&lt;/code&gt;를 입력해야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;use utf8;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pragma&lt;/code&gt;는 펄 컴파일러가 어떻게 동작해야하는지 알려주는 역할을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Learning-Perl-Randal-L-Schwartz/dp/1449303587&#34;&gt;Learning Perl, 7th Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LEARING PERL을 읽고 느낀점 1</title>
      <link>https://dongwooklee96.github.io/post/2021/11/26/learing-perl%EC%9D%84-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90-1.html</link>
      <pubDate>Fri, 26 Nov 2021 18:20:40 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/26/learing-perl%EC%9D%84-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90-1.html</guid>
      <description>&lt;h3 id=&#34;펄을-공부하게-된-이유&#34;&gt;펄을 공부하게 된 이유&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테스트 코드를 확인하거나, 작성해야할 일이 있는데, 그 코드가 펄로 작성되어 있었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 펄을 어느정도는 배워야지 이해할 수 있을 것 같았다. 따라서 책을 보면서 공부를 하려고 하였는데, 펄이라는 언어 자체가 번역서가 많이 존재하지 않았다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 어쩔 수 없이 영어 원서 그대로 읽고 있다. 다행히 알아듣기 힘든 영어를 사용하지는 않아서 아직까지는 이해하는데 큰 지장은 없는 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;펄을-공부하면서-느끼게-된-점&#34;&gt;펄을 공부하면서 느끼게 된 점&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;펄은 파이썬과 같은 스크립트 언어이지만, 개발자들이 생각하는 철학이 다른 것 같았다. 파이썬 같은 경우에는 유용하다고 생각이 되면 객체에 기능을 많이 추가하여서, 사용할 수 있는 기능이 매우 많다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 반대로 펄은 객체에게 최소한의 기능을 제공하고 가능하면 추가하지 않으려고 한다. 그리고 해당 기능이 어느정도 최적화가 될 때까지 릴리즈를 하지 않고 미룬다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 펄을 이용하여 주로 문자열 처리를 하는 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;펄은 특이하게도 스크립트 언어이지만, 실행하기전에 펄의 내부적인 컴파일러가 모든 코드를 실행한다. 따라서 문법 에러가 있더라도, 바로 잡아준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 방대한 양의 펄 코드로, 아주 작은 양의 코드만 실행한다면 이것은 비효율적일 수 있다. 왜냐하면, 펄은 처음에 컴파일러가 전체 코드를 실행시켜서 최적화를 하기 때문이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;간단한-perl-문법&#34;&gt;간단한 PERL 문법&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/perl
@lines = `perdoc -u -f atan2`;
foreach (@lines) {
    s/\w&amp;lt;([^&amp;gt;]+)/\U$1/g;
    print;
}

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;먼저 백틱(`) 문자로 감싸진 부분은 터미널에서 명령어를 입력하는 것과 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 두 번째 줄에 있는 코드는 터미널 창에서 아래와 같이 코드를 입력한 것과 같은 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ perdoc -u -f atan2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그리고 해당 명령어의 결과는 배열에 저장된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 밑에서 반복문에 의해서 배열의 결과가 처리되게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 마지막 줄에서 출력이 이루어지게 된다. 다음의 과정을 요약하자면 하나의 명령어를 실행해서 출력된 결과를 가공하여 다시 출력하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Learning-Perl-Randal-L-Schwartz/dp/1449303587&#34;&gt;Learning Perl, 7th Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
