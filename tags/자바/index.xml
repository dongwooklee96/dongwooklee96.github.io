<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>자바 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/tags/%EC%9E%90%EB%B0%94.html</link>
    <description>Recent content in 자바 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sat, 13 Mar 2021 11:40:33 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/tags/%EC%9E%90%EB%B0%94/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>사내 세미나 과제 피드백 CH10 - Future, ComputableFuture</title>
      <link>https://dongwooklee96.github.io/post/2021/03/13/%EC%82%AC%EB%82%B4-%EC%84%B8%EB%AF%B8%EB%82%98-%EA%B3%BC%EC%A0%9C-%ED%94%BC%EB%93%9C%EB%B0%B1-ch10-future-computablefuture.html</link>
      <pubDate>Sat, 13 Mar 2021 11:40:33 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/13/%EC%82%AC%EB%82%B4-%EC%84%B8%EB%AF%B8%EB%82%98-%EA%B3%BC%EC%A0%9C-%ED%94%BC%EB%93%9C%EB%B0%B1-ch10-future-computablefuture.html</guid>
      <description>&lt;p&gt;회사에서 자바 비동기 처리 및 &lt;code&gt;Future&lt;/code&gt;, &lt;code&gt;CompletableFuture&lt;/code&gt;에 대해서 세미나를 진행하였다.&lt;/p&gt;
&lt;p&gt;과제를 진행하면서, 비동기 프로그래밍 및 자바에서 비동기 프로그래밍을 어떻게 사용하는지 생각해 볼 수 있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dongwooklee96/java-chap10-assignment&#34;&gt;사내 세미나 과제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/111016625-5a957280-83f2-11eb-847c-b5e8deaf3ac7.png&#34; alt=&#34;Screen Shot 2021-03-13 at 11 50 40 AM&#34;&gt;&lt;/p&gt;
&lt;p&gt;친절하게 피드백을 해주셨기 때문에, 내가 &lt;code&gt;ComputableFuture&lt;/code&gt;를 잘못사용하고 있다는 사실을 알게 되었다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-java8&#34; data-lang=&#34;java8&#34;&gt;repository.retrieveCategories().parallelStream()
                .map(category -&amp;gt; CompletableFuture.supplyAsync(() -&amp;gt; repository.retrieveBooksByCategory(category)))
                .collect(Collectors.toList())
        .parallelStream()
        .map(CompletableFuture::join)     // (1)
        .flatMap(Collection::parallelStream)
        .collect(Collectors.toList())
        .parallelStream()
        .map(book -&amp;gt; CompletableFuture.runAsync(() -&amp;gt; repository.updateAuthor(book, author), executors))
        .collect(Collectors.toList())
        .forEach(CompletableFuture::join); // (2)
        executors.shutdown();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위의 코드는 내가 처음에 제출한 코드이다. 문제점을 보면 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;코드에서 &lt;code&gt;join&lt;/code&gt;을 사용한 곳이 2개정도 존재한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;join&lt;/code&gt;은 현재 &lt;code&gt;Thread&lt;/code&gt;를 블록킹 하여 결과를 기다리는 연산이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 &lt;code&gt;ComputableFuture&lt;/code&gt;는 이러한 &lt;code&gt;join&lt;/code&gt; 없이 &lt;code&gt;CompletionStage&lt;/code&gt;라는 약속을 기반으로 &lt;code&gt;Non blocking&lt;/code&gt; 기반의 비동기 처리를 할 수 있게 도와준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만, 나는 이러한 특징을 이해하지 못하고, &lt;code&gt;join&lt;/code&gt;을 남발하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 &lt;code&gt;join&lt;/code&gt; 연산은 스트림의 수집이 &lt;code&gt;List&lt;/code&gt;와 같이 완료된 후에 개별적으로 루프를 돌면서 수행하는 것이 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 스트림의 중간 연산 단계에서 &lt;code&gt;join&lt;/code&gt;을 호출하면, 게으른 연산을 하는 특성으로 인해서 순차적인 &lt;code&gt;blocking&lt;/code&gt;이 걸릴 수 있다. 따라서 &lt;code&gt;join&lt;/code&gt; 연산은 스트림의 수집이 &lt;code&gt;List&lt;/code&gt;와 같이 완료된 후에 개별적으로 루프를 돌면서 수행하는 것이 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;stream&lt;/code&gt;으로 변환할 때, &lt;code&gt;parallelStream&lt;/code&gt;은 조심해서 사용을 해야한다. &lt;code&gt;parallelStream&lt;/code&gt; 작업을 멀티코어에서 병렬처리 하는 것은 일반적으로 데이터가 많을 때 유리하다. 데이터가 적으면 오히려 분할하는데 시간이 더 걸린다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 이러한 최적화는 여러번 수행해보면서 반드시 측정을 기반으로 선택이 되어야한다. 그러한 경우가 아니라면 &lt;code&gt;stream&lt;/code&gt;도 충분하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;꼭 필요한 곳이 아니라면, &lt;code&gt;join&lt;/code&gt; 연산은 최종적으로 &amp;ldquo;동기&amp;quot;가 필요한 곳에서 사용하는 것이 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;따라서 피드백을 받은 부분을 개선한 결과는 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;final List&amp;lt;CompletableFuture&amp;lt;List&amp;lt;Book&amp;gt;&amp;gt;&amp;gt; futures
            = repository.retrieveCategories().stream()
            .map(category -&amp;gt; supplyAsync(() -&amp;gt; repository.retrieveBooksByCategory(category), executors))
            .collect(toList());

        final List&amp;lt;CompletableFuture&amp;lt;Void&amp;gt;&amp;gt; updateFutures
            = futures.stream()
            .map(future -&amp;gt; future.thenCompose(books -&amp;gt; allOf(
                books.stream()
                    .map(book -&amp;gt; runAsync(() -&amp;gt; repository.updateAuthor(book, author), executors))
                    .toArray(CompletableFuture[]::new)
            )))
            .collect(toList());
        updateFutures.forEach(CompletableFuture::join);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ComputableFuture&lt;/code&gt;로 작업을 처리한 후에, 최종적으로 한꺼번에  &lt;code&gt;join&lt;/code&gt; 을 해주고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=200069290&#34;&gt;모던 자바 인 액션, 책, 한빛미디어&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.inflearn.com/course/the-java-java8/dashboard&#34;&gt;더 자바, Java8, 프로그래밍 강의, 백기선&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>스프링 시큐리티 아키텍처 (미완성)</title>
      <link>https://dongwooklee96.github.io/post/2021/03/11/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%AF%B8%EC%99%84%EC%84%B1.html</link>
      <pubDate>Thu, 11 Mar 2021 07:20:33 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/11/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%AF%B8%EC%99%84%EC%84%B1.html</guid>
      <description>&lt;h2 id=&#34;인증authentication과-인과authorization&#34;&gt;인증(Authentication)과 인과(Authorization)&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110706470-3f343700-823b-11eb-83e4-103013be399a.png&#34; alt=&#34;Screen Shot 2021-03-11 at 7 26 53 AM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어플리케이션 보안은 두가지의 독립적인 문제로 나뉜다.&lt;/li&gt;
&lt;li&gt;바로 인증(&lt;code&gt;authentication&lt;/code&gt;)과 인가(&lt;code&gt;authorization&lt;/code&gt;)이다.&lt;/li&gt;
&lt;li&gt;인증은 (&lt;code&gt;who are you?&lt;/code&gt;) 이고, 인가는 (&lt;code&gt;what are you allowed to do?&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;스프링 시큐리티는 인증과 인과를 분리하도록 설계된 아키텍처를 가지고 있으며, 두 가지 모두에 대한 전략과 확장 할 수 있는 포인트가 존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;인증-authentication&#34;&gt;인증 (Authentication)&lt;/h2&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public interface AuthenticationManager {

  Authentication authenticate(Authentication authentication)
    throws AuthenticationException;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;인증을 위한, &lt;code&gt;AuthenticationManager&lt;/code&gt; 라는 인터페이스를 제공한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AuthenticationManager&lt;/code&gt;는 &lt;code&gt;authenticate&lt;/code&gt; 라는 메서드를 제공하는데, 다음과 같은 3가지 일을 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;입력이 유효한 주체를 나타내는지 확인할 수 있는 경우, &lt;code&gt;Authentication(authentication=true)&lt;/code&gt;를 반환합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;입력이 잘못된 주체를 나타내는 것으로 판단되는 경우에는, 예외를 던집니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약, 결정할 수 없는 경우에는, &lt;code&gt;null&lt;/code&gt;을 반환합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AuthenticationException&lt;/code&gt; 예외는 런타임 예외이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일반적으로 응용 프로그램의 스타일이나 목적에 따라 응용 프로그램에서 일반적인 방식으로 처리됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 프로그래머가 이러한 예외를 처리하지 않습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110708504-1f524280-823e-11eb-86b2-b33bbe5d09d4.png&#34; alt=&#34;Screen Shot 2021-03-11 at 7 48 00 AM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Authentication Manager&lt;/code&gt;의 가장 일반적으로 사용되는 구현은 &lt;code&gt;ProviderManager&lt;/code&gt;로, &lt;code&gt;AuthenticationProvider&lt;/code&gt; 인스턴스 체인을 지정합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AuthenticationProvider&lt;/code&gt;는 &lt;code&gt;AuthenticationManager&lt;/code&gt;와 비슷하지만, 함수를 호출하는 사람에게, &lt;code&gt;Authentication&lt;/code&gt; 타입을 질의할 수 있는 메서드를 추가적으로 지원합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ProviderManager&lt;/code&gt;는 선택적인 부모 요소를 가질 수 있으며, 모든 &lt;code&gt;ProviderManager&lt;/code&gt;가 &lt;code&gt;null&lt;/code&gt;을 반환하는 경우에 이를 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상위의 &lt;code&gt;ProviderManager&lt;/code&gt;를 사용할 수 없는 경우에, &lt;code&gt;AuthenticationException&lt;/code&gt; 예외가 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;경우에 따라서, 애플리케이션은 접근 권한을 그룹으로 만들어야할 때가 있는데, 그룹 별 권한을 &lt;code&gt;AuthenticationManager&lt;/code&gt;에 위임한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;때때로, 각가의 &lt;code&gt;ProviderManager&lt;/code&gt;는, 상위 요소를 공유한다. 상위 요소는 글로벌 리소스의 일종으로 모든 프로바이더의 예외나 상황을 처리한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;authenticationmanager-커스터마이징&#34;&gt;AuthenticationManager 커스터마이징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스프링 시큐리티는 응용 프로그램에 설정된 인증과 관련된 관리자 기능을 빠르게 구성할 수 있도록 몇가지 기능을 제공합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일반적으로 사용되는 헬퍼는 &lt;code&gt;AuthenticationManagerBuilder&lt;/code&gt;를 사용합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Configuration
public class ApplicationSecurity extends WebSecurityConfigurerAdapter {

   ... // web stuff here

  @Autowired
  public void initialize(AuthenticationManagerBuilder builder, DataSource dataSource) {
    builder.jdbcAuthentication().dataSource(dataSource).withUser(&amp;quot;dave&amp;quot;)
      .password(&amp;quot;secret&amp;quot;).roles(&amp;quot;USER&amp;quot;);
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AuthenticationManager&lt;/code&gt;는 &lt;code&gt;@Bean&lt;/code&gt; 메서드로 &lt;code&gt;@Autowired&lt;/code&gt;되므로, &lt;code&gt;AuthenticationManager&lt;/code&gt;를 빌드할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;인가-authorization&#34;&gt;인가 (Authorization)&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/guides/topicals/spring-security-architecture&#34;&gt;스프링 시큐리티 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Deprecated 된 MediaType.APPLICATION_JSON_UTF8</title>
      <link>https://dongwooklee96.github.io/post/2021/03/08/deprecated-%EB%90%9C-mediatype.application_json_utf8.html</link>
      <pubDate>Mon, 08 Mar 2021 07:20:33 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/08/deprecated-%EB%90%9C-mediatype.application_json_utf8.html</guid>
      <description>&lt;h2 id=&#34;mediatypeapplication_json_utf8&#34;&gt;MediaType.APPLICATION_JSON_UTF8&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110257472-75767a00-7fe1-11eb-82e2-0f1db1ca3886.png&#34; alt=&#34;Screen Shot 2021-03-08 at 7 39 39 AM&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110257431-38aa8300-7fe1-11eb-8389-34b865de421b.png&#34; alt=&#34;deprecated&#34;&gt;&lt;/p&gt;
&lt;p&gt;테스트 코드를 작성하다가, &lt;code&gt;MediaType.APPLICATION_JSON_UTF8&lt;/code&gt; 부분이 &lt;code&gt;Deprecated&lt;/code&gt; 된 것을 확인할 수 있었다.&lt;/p&gt;
&lt;p&gt;밑줄로 표시까지 해줬는데, 그냥 대수롭지 않게 생각했던 것 같다. 그리고 개발자로서 이러한 부분을 보고도 지나친게 조금은 부끄러웠다. 다음부터는 이러한 부분을 발견하면 지나치지 말고 왜 &lt;code&gt;Deprecated&lt;/code&gt; 되었는지 알아보고 &lt;code&gt;API&lt;/code&gt; 개발자가 의도한 방향으로 사용을 하도록 노력해야겠다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110257623-11a08100-7fe2-11eb-93fc-771900030db8.png&#34; alt=&#34;Screen Shot 2021-03-08 at 7 44 02 AM&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;API&lt;/code&gt; 주석을 읽어보니 이유는 다음과 같았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;크롬 같은 주요 브라우저가 스펙을 준수하고, 이제 &lt;code&gt;UTF-8&lt;/code&gt; 같은 파라미터 값을 넣어주지 않아도 올바르게 해석 되기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;따라서 이제는 &lt;code&gt;APPLICATION_JSON_UTF8&lt;/code&gt;을 사용하는 것 보다는 그냥 &lt;code&gt;APPLICATION_JSON&lt;/code&gt; 을 사용하면 된다.&lt;/p&gt;
&lt;h2 id=&#34;배경&#34;&gt;배경&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110258251-fe42e500-7fe4-11eb-8fb8-06b332bf7b95.png&#34; alt=&#34;Screen Shot 2021-03-08 at 8 04 51 AM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=438464&#34;&gt;discussion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위의 링크에 나와있듯이, &lt;code&gt;Content-Type&lt;/code&gt;을 &lt;code&gt;application/json&lt;/code&gt;으로 명시를 해도 인코딩이 깨진다고 버그 리포팅을 하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;charset=utf-8&lt;/code&gt;로 명시했을 때는 동작하지만 &lt;code&gt;charset&lt;/code&gt; 은  &lt;code&gt;application/json&lt;/code&gt;에 명시되어있지 않고 무시 되어야 한다고 문제를 제기하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rfc4627&#34;&gt;RFC4627&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110258583-a7d6a600-7fe6-11eb-8654-5aa39d132d55.png&#34; alt=&#34;Screen Shot 2021-03-08 at 8 16 46 AM&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110258530-6b0aaf00-7fe6-11eb-969c-b32776e629cd.png&#34; alt=&#34;Screen Shot 2021-03-08 at 8 15 10 AM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인코딩 부분을 살펴보면, &lt;code&gt;JSON&lt;/code&gt; 타입은 유니코드로 인코딩 되어야 하며 디폴트로 &lt;code&gt;UTF-8&lt;/code&gt;이 적용된다는 부분을 살펴볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;느낀점&#34;&gt;느낀점&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;만약 나였으면 그냥 내가 잘못 한 거구나라고 하면서 &lt;code&gt;charset&lt;/code&gt; 옵션을 주고 스펙까지 확인해볼 생각을 하지 않을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이런 점은 나도 배워야겠다는 생각을 했다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4627&#34;&gt;RFC4627&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=438464&#34;&gt;discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>동시성 프로그래밍 및 자바 (2) - Executor Interfaces</title>
      <link>https://dongwooklee96.github.io/post/2021/03/01/%EB%8F%99%EC%8B%9C%EC%84%B1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%8F-%EC%9E%90%EB%B0%94-2-executor-interfaces.html</link>
      <pubDate>Mon, 01 Mar 2021 14:40:33 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/01/%EB%8F%99%EC%8B%9C%EC%84%B1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%8F-%EC%9E%90%EB%B0%94-2-executor-interfaces.html</guid>
      <description>&lt;h1 id=&#34;executor-interfaces&#34;&gt;Executor Interfaces&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Executor&lt;/code&gt;, 태스크를 관리하는 인터페이스 입니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExecutorService&lt;/code&gt;는 &lt;code&gt;Executor&lt;/code&gt;의 하위 인터페이스이며 태스트와 &lt;code&gt;Exector&lt;/code&gt;의 라이프 사이클을 관리하는 기능을 포함하고 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScheduledExecutorService&lt;/code&gt;는 &lt;code&gt;ExecutorService&lt;/code&gt;의 하위 인터페이스이며 미래의 태스트에 대한 주기적인 실행을 관리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;executor-인터페이스&#34;&gt;Executor 인터페이스&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109464198-a159a300-7aa9-11eb-87f8-85c69935a454.png&#34; alt=&#34;Screen Shot 2021-03-01 at 4 16 49 PM&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109465577-bf280780-7aab-11eb-98d3-3fd65c0177ec.png&#34; alt=&#34;Screen Shot 2021-03-01 at 4 32 36 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Executor&lt;/code&gt; 인터페이스는 저수준의 스레드 생성문을 대체할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Executor&lt;/code&gt;는 저수준의 스레드 생성문과 동일한 작업을 수행할 수 있지만 차이점은 워크 스레드가 사용 가능해질때까지 큐에 배치할 가능성이 더 크다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;executorservice-인터페이스&#34;&gt;ExecutorService 인터페이스&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109465963-542b0080-7aac-11eb-929c-517e84df5f5c.png&#34; alt=&#34;Screen Shot 2021-03-01 at 4 36 24 PM&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Main {
    public static void main(String[] args) throws InterruptedException {
        ExecutorService executorService = Executors.newSingleThreadScheduledExecutor();
        executorService.submit(() -&amp;gt; {
            System.out.println(&amp;quot;Thread &amp;quot; + Thread.currentThread().getName());
        });

        executorService.shutdown();
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;다음작업이 들어올 때가지 계속 대기를 하기 때문에 명시적으로 종료를 시켜줘야 한다.&lt;/li&gt;
&lt;li&gt;따라서 &lt;code&gt;showdown()&lt;/code&gt; 메서드를 사용하여 명시적으로 종료를 시켜줘야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;shutdown-과-shutdownnow의-차이점&#34;&gt;shutdown() 과 shutdownNow()의 차이점&lt;/h4&gt;
&lt;p&gt;메서드 주석을 읽어본 결과 다음과 같은 차이가 있었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109467219-35c60480-7aae-11eb-920c-201a60fb2a75.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shutdown()&lt;/code&gt; 메서드는 이전에 제출된 태스트가 실행이 되고 더 이상 새로운 태스크는 수락하지 않으며 작업을 종료하기 시작한다. 하지만 &lt;code&gt;shutdownNow()&lt;/code&gt; 메서드는 실행 중인 작업이 종료될 때까지 기다리지 않고 실행중인 작업 처리를 중단 하려는 보장을 할 수 없다고 되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;scheduledexecutorservice-인터페이스&#34;&gt;ScheduledExecutorService 인터페이스&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109465999-61e08600-7aac-11eb-892d-ee3b46714715.png&#34; alt=&#34;Screen Shot 2021-03-01 at 4 37 15 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ScheduledExecutorService&lt;/code&gt; 인터페이스는 지정한 지연시간 후에 실행 또는 호출 가능한 태스크를 실행하는 기능을 지원한다.&lt;/li&gt;
&lt;li&gt;지정된 태스크를 정의된 간격으로 반복적으로 실행하는 &lt;code&gt;scheduledWithFixedDelay&lt;/code&gt; 및 &lt;code&gt;ScheduledAtFixedRate&lt;/code&gt;를 정의합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;쓰레드-풀&#34;&gt;쓰레드 풀&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109468299-bcc7ac80-7aaf-11eb-8e93-2e15be786920.png&#34; alt=&#34;Screen Shot 2021-03-01 at 5 01 08 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;java.util.concurrent&lt;/code&gt; 패키지의 Executor 구현은 대부분은 워커 쓰레드로 구성된 쓰레드 풀을 사용한다. 이러한 종류의 스레드는 &lt;code&gt;Runnable&lt;/code&gt; 및 &lt;code&gt;Callable&lt;/code&gt;로 각각 존재하며 여러가지 태스크를 실행하는데 종종 사용된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;워커 쓰레드를 사용하면 스레드 생성으로 인한 오버헤드가 최소화 된다. 스레드 개체는 상당한 양의 메모리를 사용하며, 대규모 애플리케이션에서는 많은 스레드 개체를 할당 및 할당 해제하면 상당한 메모리 관리 오버헤드가 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일반적인 유형의 쓰레드 풀은 쓰레드의 개수가 고정되어 있고 이 유형의 풀에서는 항상 지정된 수의 스레드가 실행되며, 스레드가 동작할 때 갑자기 종료되면 새로운 스레드로 교체되어 실행된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;태스크는 큐를 통해서 풀에 제출되며 풀에 있는 스레드보다 많은 태스크가 있을 때는 잠시 큐에서 대기한다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;runnable-과-callable의-차이&#34;&gt;Runnable 과 Callable의 차이&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109469393-4d52bc80-7ab1-11eb-89d4-24e040a2161c.png&#34; alt=&#34;Screen Shot 2021-03-01 at 5 01 08 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Runnable&lt;/code&gt; 인터페이스는 스레드에 의해서 실행되도록 설계된 모든 클래스에 의해 구현되어야 한다.&lt;/li&gt;
&lt;li&gt;클래스는 &lt;code&gt;Run()&lt;/code&gt; 메서드를 정의해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109469486-6fe4d580-7ab1-11eb-886c-bdddc2d8fa90.png&#34; alt=&#34;Screen Shot 2021-03-01 at 5 01 08 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;결과를 반환하고 예외를 발생시킬 수 있는 작업이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Callable&lt;/code&gt; 인터페이스는 다른 스레드에 의해서 잠재적으로 실행될 수 있다는 점에서 &lt;code&gt;Runnable&lt;/code&gt; 인터페이스와 유사하지만 &lt;code&gt;Runnable&lt;/code&gt; 인터페이스는 결과를 반환하지 않으며 선택한 예외를 발생시킬 수 없습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;forkjoin-프레임워크&#34;&gt;Fork/Join 프레임워크&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109471877-c1429400-7ab4-11eb-91fa-723f310cf9b9.png&#34; alt=&#34;Screen Shot 2021-03-01 at 5 37 04 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;포크/조인 프레임워크는 여러 프로세서를 활용할 수 있도록 지원하는 &lt;code&gt;ExecutorService&lt;/code&gt; 인터페이스의 구현이다.&lt;/li&gt;
&lt;li&gt;반복적으로 작은 조각으로 쪼개 질 수 있는 작업을 위해서 고안이 되었다.&lt;/li&gt;
&lt;li&gt;다른 &lt;code&gt;ExecutorService&lt;/code&gt; 구현과 마찬가지로 포크/조인 프레임워크도 쓰레드 풀에 있는 워커 쓰레드에게 작업을 할당한다.&lt;/li&gt;
&lt;li&gt;포크/조인 프레임워크는 워크 스틸링 알고리즘을 사용하는 점에서 차이가 있고 할 일이 부족한 워커 쓰레드는 작동중인 다른 쓰레드에서 작업을 가져올 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=200069290&#34;&gt;모던 자바 인 액션, 책, 한빛미디어&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.inflearn.com/course/the-java-java8/dashboard&#34;&gt;더 자바, Java8, 프로그래밍 강의, 백기선&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>동시성 프로그래밍 및 자바 (1) - 프로세스와 쓰레드의 차이</title>
      <link>https://dongwooklee96.github.io/post/2021/03/01/%EB%8F%99%EC%8B%9C%EC%84%B1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%8F-%EC%9E%90%EB%B0%94-1-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4.html</link>
      <pubDate>Mon, 01 Mar 2021 12:40:33 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/01/%EB%8F%99%EC%8B%9C%EC%84%B1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%8F-%EC%9E%90%EB%B0%94-1-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4.html</guid>
      <description>&lt;h1 id=&#34;동시성이란-concurrency&#34;&gt;동시성이란? (Concurrency)&lt;/h1&gt;
&lt;hr&gt;
&lt;h3 id=&#34;동시성-프로그래밍이란&#34;&gt;동시성 프로그래밍이란?&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109454793-6438e500-7a98-11eb-9454-cc8af1cbfb76.png&#34; alt=&#34;Screen Shot 2021-03-01 at 2 13 30 PM&#34;&gt;&lt;/p&gt;
&lt;p&gt;동시성에 대해서 자바 문서에서는 이렇게 설명하고 있다.
유저는 컴퓨터를 사용하면서 한 번에 한 가지 이상의 작업을 수행할 수 있다는 사실을 당연하게 여긴다. 그들은 워드 프로세서 작업을 하면서 파일을 다운로드 받거나, 프린트 인쇄 대기열을 관리하거나, 오디오 스트리밍을 할 수 있는다고 생각한다. 심지어 단일 응용 어플리케이션의 경우에도 한 번에 둘 이상의 작업을 해야할 때가 많다. 예를 들어서 스트리밍 오디오 애플리케이션은 네트워크에서 디지털 오디오를 동시에 읽고 압축을 풀고, 재생을 관리하고 디스플레이를 업데이트 해야합니다. 워드 프로세서 조차도 텍스트 서식을 변경하거나 디스플레이를 업데이트 하는 작업이 아무리 바쁘더라도 키보드 및 마우스 이벤트에 항상 응답을 할 준비가 되어있어야 합니다. 이러한 작업을 수행할 수 있는 소프트웨어를 동시성 소프트웨어라고 합니다.
자바 플랫폼은 동시성 프로그래밍을 지원하도록 처음부터 설계되었습니다. 자바 버전 5.0부터 자바는 높은 수준의 동시성 API를 포함하고 있습니다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;프로세스와-쓰레드&#34;&gt;프로세스와 쓰레드&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109455687-7d429580-7a9a-11eb-9d1f-8155d55cbbf2.png&#34; alt=&#34;Screen Shot 2021-03-01 at 2 29 04 PM&#34;&gt;&lt;/p&gt;
&lt;p&gt;동시성 프로그래밍에서는 두가지의 기본 실행 단위가 있다. 자바에서는 동시성 프로그래밍은 주로 쓰레드와 관련이 있지만, 프로세스 역시 중요하다. 컴퓨터 시스템에서 일반적으로 많은 프로세스와 스레드가 있다. 이는 단일 코어 시스템에서도 마찬가지이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109456633-99dfcd00-7a9c-11eb-886e-52f965f26b10.png&#34; alt=&#34;Screen Shot 2021-03-01 at 2 44 12 PM&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;프로세스&#34;&gt;프로세스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로세스는 자체적으로 포함된 실행 환경이 있다. 일반적으로 프로세스에서는 개인적인 리소스 공간이 존재하고 특히 각각의 프로세스에는 자체적인 메모리 공간을 가집니다.&lt;/li&gt;
&lt;li&gt;대부분의 자바 가상 머신 구현은 단일 프로세스로 실행된다. &lt;code&gt;Java&lt;/code&gt;는 &lt;code&gt;ProcessBuilder&lt;/code&gt; 를 이용하여 추가적인 프로세스를 생성할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;쓰레드&#34;&gt;쓰레드&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;쓰레드는 때때로 경량 프로세스라고 불리우며, 프로세스와 쓰레드 모두 실행 환경을 제공하지만 새로운 쓰레드를 만드는데 필요한 리소스가 새 프로세를 만드는 것보다 적은 비용이 든다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;쓰레드는 프로세스 내에 존재하며 모든 프로세스에는 최소한 한 개의 쓰레드가 있다. 쓰레드는 프로세스의 메모리, 열린 파일 및 자원을 공유합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이러한 자원 공유는 쓰레드 간의 소통에 효율적이지만 잠재적으로 문제를 일으킬 수 있습니다. &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;자바에서-쓰레드를-사용하는-방법&#34;&gt;자바에서 쓰레드를 사용하는 방법&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;자바에서 쓰레드를 사용할 수 있는 방법에는 크게 3가지가 있다.&lt;/p&gt;
&lt;h4 id=&#34;1-thread를-상속-받는-방법&#34;&gt;1. Thread를 상속 받는 방법&lt;/h4&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) {
        MyThread myThread = new MyThread();
        myThread.start();

        System.out.println(&amp;quot;Hello&amp;quot;);
    }

    static class MyThread extends Thread {
        @Override
        public void run() {
            System.out.println(&amp;quot;Thread: &amp;quot; + Thread.currentThread().getName());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;2-runnable을-구현하는-방법&#34;&gt;2. Runnable을 구현하는 방법&lt;/h4&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) {
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println(&amp;quot;Thread: &amp;quot; + Thread.currentThread().getName());
            }
        });
        thread.start();
        System.out.println(&amp;quot;Hello: &amp;quot; + Thread.currentThread().getName());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;3-람다를-사용하는-방법&#34;&gt;3. 람다를 사용하는 방법&lt;/h4&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) {
        Thread thread = new Thread(() -&amp;gt; {
            System.out.println(&amp;quot;Thread: &amp;quot; + Thread.currentThread().getName());
        });
        thread.start();
        System.out.println(&amp;quot;Hello: &amp;quot; + Thread.currentThread().getName());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;쓰레드의-주요-기능&#34;&gt;쓰레드의 주요 기능&lt;/h1&gt;
&lt;hr&gt;
&lt;h4 id=&#34;sleep&#34;&gt;&lt;code&gt;sleep&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109460950-d0b9e100-7aa4-11eb-86c8-29276cda855f.png&#34; alt=&#34;Screen Shot 2021-03-01 at 3 42 59 PM&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) {
        Thread thread = new Thread(() -&amp;gt; {
            System.out.println(&amp;quot;Thread: &amp;quot; + Thread.currentThread().getName());
            try {
                Thread.sleep(1000L);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        thread.start();
        System.out.println(&amp;quot;Hello: &amp;quot; + Thread.currentThread().getName());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Thread.sleep&lt;/code&gt; 은 스레드가 지정된 기간 동안 실행을 일시 중단 하도록 한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InterruptedException&lt;/code&gt;은 스레드가 슬립된 상태에서 다른 스레드가 현재 스레드를 인터럽트 시킬 떄 발생된다.&lt;/li&gt;
&lt;li&gt;위의 예제에서는 쓰레드가 1초동안 슬립 되었다가 다시 실행된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;interrupt&#34;&gt;&lt;code&gt;interrupt&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109460917-ba138a00-7aa4-11eb-85d3-0ad70e163bdf.png&#34; alt=&#34;Screen Shot 2021-03-01 at 3 42 22 PM&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) throws InterruptedException {
        Thread thread = new Thread(() -&amp;gt; {
            while (true) {
                System.out.println(&amp;quot;Thread: &amp;quot; + Thread.currentThread().getName());
                try {
                    Thread.sleep(1000L);
                } catch (InterruptedException e) {
                    System.out.println(&amp;quot;interrupt!&amp;quot;);
                    return;
                }
            }
        });
        thread.start();
        System.out.println(&amp;quot;Hello: &amp;quot; + Thread.currentThread().getName());
        Thread.sleep(3000L);
        thread.interrupt();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;interrupt()&lt;/code&gt; 메서드를 호출 했을 때 &lt;code&gt;InterruptedException&lt;/code&gt; 예외가 발생하고 예외 처리 구문이 실행된다.&lt;/li&gt;
&lt;li&gt;스레드가 인터럽트 되었을 때, 처리하는 방식은 프로그래머가 결정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;join&#34;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109460851-a10ad900-7aa4-11eb-8f02-8d5812cd1f80.png&#34; alt=&#34;Screen Shot 2021-03-01 at 3 41 37 PM&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) throws InterruptedException {
        Thread thread = new Thread(() -&amp;gt; {
            System.out.println(&amp;quot;Thread: &amp;quot; + Thread.currentThread().getName());
            try {
                Thread.sleep(3000L);
            } catch (InterruptedException e) {
                throw new IllegalStateException(e);
            }
        });
        thread.start();

        System.out.println(&amp;quot;Hello: &amp;quot; + Thread.currentThread().getName());
        thread.join();
        System.out.println(thread + &amp;quot; is finished&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;을 사용하면 스레드가 다른 스레드가 끝날 때까지 기다려준다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sleep()&lt;/code&gt;과 마찬가지로 &lt;code&gt;join()&lt;/code&gt;은 인터럽트가 되면  &lt;code&gt;InterruptedException&lt;/code&gt;을 호출하면서 종료 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=200069290&#34;&gt;모던 자바 인 액션, 책, 한빛미디어&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.inflearn.com/course/the-java-java8/dashboard&#34;&gt;더 자바, Java8, 프로그래밍 강의, 백기선&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/concurrency/&#34;&gt;https://docs.oracle.com/javase/tutorial/essential/concurrency/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/concurrency/procthread.html&#34;&gt;https://docs.oracle.com/javase/tutorial/essential/concurrency/procthread.html&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>
