<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>스프링 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/tags/%EC%8A%A4%ED%94%84%EB%A7%81.html</link>
    <description>Recent content in 스프링 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Wed, 24 Mar 2021 18:13:23 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/tags/%EC%8A%A4%ED%94%84%EB%A7%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IoC 컨테이너란 무엇일까</title>
      <link>https://dongwooklee96.github.io/post/2021/03/24/ioc-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C.html</link>
      <pubDate>Wed, 24 Mar 2021 18:13:23 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/24/ioc-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C.html</guid>
      <description>&lt;p&gt;스프링 전반적인 기술을 주제로 사내 세미나를 하였다. 따라서 이를 공식 문서를 보면서 복습하면서 다시 정리해보았다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112285137-55c39f00-8ccd-11eb-9416-87ba7f879ce0.png&#34; alt=&#34;Screen Shot 2021-03-24 at 6 18 09 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스프링 코어 문서 가장 첫 부분에 나와있는 문구이다. 전체적인 기술을 다루지만 특히 스프링 프레임워크의 &lt;code&gt;IoC(Inversion of Control)&lt;/code&gt; 컨테이너가 가장 중요하다고 나와있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Spring Framework&lt;/code&gt;의 IoC 컨테이너에 대한 처리는 &lt;code&gt;Spring&lt;/code&gt;의 &lt;code&gt;AOP(Aspect-Oriented Programmin)&lt;/code&gt; 기술을 밀접하게 따르고 있다고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스프링 프레임워크는 개념적으로 이해하기 쉽고 자바 엔터프라이즈 프로그래밍에서 &lt;code&gt;AOP&lt;/code&gt; 요구사항의 80%를 성공적으로 해결하는 &lt;code&gt;AOP&lt;/code&gt; 프레임워크가 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;스프링-ioc-컨테이너-및-빈bean&#34;&gt;스프링 IoC 컨테이너 및 빈(Bean)&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112286205-6c1e2a80-8cce-11eb-9eef-2ca033148bc9.png&#34; alt=&#34;Screen Shot 2021-03-24 at 6 26 06 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 장에서는 제어의 반전(&lt;code&gt;IoC&lt;/code&gt;) 원칙의 스프링 프레임워크 구현에 대해서 다룬다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IoC&lt;/code&gt;는 의존성 주입이라고 알려져 있다. &lt;code&gt;(DI)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DI&lt;/code&gt;는 객체가 생성자 파라미터, 펙토리 메서드에서 반환된 후 객체 인스턴스에 설정된 속성을 통해서만 객체의 종속성을 정의하는 프로세스이다.&lt;/li&gt;
&lt;li&gt;그런 다음에, 컨테이너가 빈을 생성할 때, 이러한 종속성을 주입한다.&lt;/li&gt;
&lt;li&gt;이러한 프로세스는 기본적으로 클래스 직접 구성이나 서비스 로케이터 패턴과 같은 매커니즘을 이용하여, 종속성의 인스턴스 화를 한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.springframework.beans&lt;/code&gt;와 &lt;code&gt;org.springframework.context&lt;/code&gt; 패키지들이 스프링 프레임워크 &lt;code&gt;IoC&lt;/code&gt; 컨테이너의 기본 구성을 이루고 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BeanFactory&lt;/code&gt; 인터페이스는 모든 타입의 객체를 관리할 수 있는 고급 설정 매커니즘을 제공한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;는 &lt;code&gt;BeanFactory&lt;/code&gt;의 서브 인터페이스이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112288026-48f47a80-8cd0-11eb-8efe-6d675e3ae5da.png&#34; alt=&#34;ApplicationContextInterface&#34;&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 그림으로 이해하면 이해하기 편하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;간단히 말해서 &lt;code&gt;BeanFactory&lt;/code&gt;는 구성 프레임워크와 기본 기능을 제공하며 &lt;code&gt;Application Context&lt;/code&gt;는 더 많은 엔터프라이즈별 기능을 추가한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;에서는 애플리케이션의 핵심을 구성하고, &lt;code&gt;Spring IoC&lt;/code&gt; 컨테이너에 의해서 관리되는 개체를 빈(Bean)이라고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;빈은 스프링 &lt;code&gt;IoC&lt;/code&gt; 컨테이너에 의해서 인스턴스화, 조립 및 관리되는 객체이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그렇지 않으면 빈(Bean)은 응용 프로그램의 여러 객체에 불과하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;빈과 빈 사이의 종속성은 컨테이너가 사용하는 설정 메타데이터에 의해서 반영된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;컨테이너-개요&#34;&gt;컨테이너 개요&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112289026-434b6480-8cd1-11eb-9a2c-3a924dee26c7.png&#34; alt=&#34;Screen Shot 2021-03-24 at 6 46 34 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.springframework.context.ApplicationContext&lt;/code&gt;는 &lt;code&gt;Spring Ioc&lt;/code&gt; 컨테이너를 나타내며 빈의 인스턴스화 및 구성 및 조립을 담당한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컨테이너는 메타데이터 설정을 읽어서, 인스턴스화, 구성 및 조립할 객체에 대한 지침을 가져온다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구성 메타데이터는 &lt;code&gt;XML&lt;/code&gt;, &lt;code&gt;Java&lt;/code&gt; 어노테이션 또는 &lt;code&gt;Java&lt;/code&gt; 코드로 표시된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;애플리케이션을 구성하는 객체와 이러한 객체간의 풍부한 상호 종속성을 표현할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112289745-e9976a00-8cd1-11eb-9b9d-8022fe6a673b.png&#34; alt=&#34;container-magic&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위의 그림은, 스프링 &lt;code&gt;IoC&lt;/code&gt; 컨테이너가 빈 설정정보를 읽어서, &lt;code&gt;ApplicationContext&lt;/code&gt; 생성되고 초기화되면 완전히 구성되고 실행 가능한 시스템 또는 응용 프로그램의 생성을 나타낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;빈의-스코프와-라이프-사이클bean-scope-and-lifecycle&#34;&gt;빈의 스코프와 라이프 사이클(Bean Scope and LifeCycle)&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112292568-8f4bd880-8cd4-11eb-95e0-2884097eed6f.png&#34; alt=&#34;Screen Shot 2021-03-24 at 7 10 07 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스프링 &lt;code&gt;IoC&lt;/code&gt; 컨테이너는 하나 이상의 빈을 관리한다. 이러한 빈은 컨테이너에 제공하는 메타데이터 XML &lt;code&gt;&amp;lt;bean/&amp;gt;&lt;/code&gt; 형식으로 제공된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컨테이너 자체 내에서 이러한 빈 정의는 &lt;code&gt;BeanDefinition&lt;/code&gt; 객체로 표시되며, 여기에는 (다른 정보 중에서도) 다음과 같은 메타데이터가 포함된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클래스 이름: 정의되는 빈의 실제 구현 클래스이다.&lt;/li&gt;
&lt;li&gt;빈이 클래스에서 어떻게 동작해야하는지를 나타내는 동작 구성 요소이다. (범위, 라이프 사이클 콜백 등).&lt;/li&gt;
&lt;li&gt;빈이 동작하는데 의존성을 가지는 다른 빈에 대한 참조이다. 이러한 참조를 &lt;code&gt;collaborators&lt;/code&gt; 또는 &lt;code&gt;dependencies&lt;/code&gt; 라고 한다.&lt;/li&gt;
&lt;li&gt;새로 생성된 개체에서 설정할 기타 구성 설정(예: 풀의 크기 제한 또는 연결 풀을 관리하는 빈에서 사용할 연결 수)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112293473-87d8ff00-8cd5-11eb-9250-16ae9694c705.png&#34; alt=&#34;Screen Shot 2021-03-24 at 7 17 00 PM&#34;&gt;&lt;/p&gt;
&lt;p&gt;위의 표는 빈의 정의를 나타내고 속성은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Class&lt;/code&gt;: Bean을 생성하기 위한 클래스를 말한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Name&lt;/code&gt;: Bean의 이름을 말한다. Bean이 누군가에 의해 참조되어야 할 때 사용된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scope&lt;/code&gt;: Bean의 생명주기와 관련하여 어느 Scope에 유일하게 존재할 것이냐에 대한 정의이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Constructor arguements&lt;/code&gt;: 빈의 생성자로 의존성을 명시 하는 방법이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Properties&lt;/code&gt;: &lt;code&gt;Bean&lt;/code&gt;의 생성자로 의존성을 명시하는 방법이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Autowiring&lt;/code&gt;: &lt;code&gt;Autowiring&lt;/code&gt;에 대한 방법을 명시하는 방법이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lazy initializaton&lt;/code&gt;: &lt;code&gt;Lazy&lt;/code&gt; 하게 &lt;code&gt;Bean&lt;/code&gt;을 초기화 시키도록 명시하는 방법이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Initialization method&lt;/code&gt;: &lt;code&gt;Bean&lt;/code&gt; 초기화 시에 호출되는 LifeCycle 메서드를 말한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Destuction method&lt;/code&gt;: &lt;code&gt;Bean&lt;/code&gt; 파괴 시에 호출되는 LifeCycle 메서드를 말한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112295826-9d4f2880-8cd7-11eb-8792-a5ce9d603d7e.png&#34; alt=&#34;Screen Shot 2021-03-24 at 7 31 54 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;singleton&lt;/code&gt;: (Default) SPRING IoC 컨테이너당 하나의 레퍼런스만 존재하는 스코프입니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prototype&lt;/code&gt;: 임의의 수의 객체 인스턴스로 단일 빈의 범위를 지정한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request&lt;/code&gt;: 단일 빈 정의의 범위를 단일 HTTP 요청의 수명 주기로 지정한다, 각, HTTP 요청에는 단일 빈 정의 뒤에 생성된 빈 인스턴스가 있다, 오직 &lt;code&gt;ApplicationContext&lt;/code&gt;에서만 유효하다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session&lt;/code&gt;: 단일 빈 정의의 범위를 HTTP 세션의 생명주기로 지정한다. 오직 웹의 &lt;code&gt;ApplicationContext&lt;/code&gt;에서만 유효하다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application&lt;/code&gt;: 단일 빈의 정의를 서블릿 컨텍스트의 생명주기에 범위를 지정한다. 웹의 &lt;code&gt;ApplicationContext&lt;/code&gt; 에서만 유효하다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;websocket&lt;/code&gt;: 단일 &lt;code&gt;bean&lt;/code&gt;의 정의를 &lt;code&gt;WebSocket&lt;/code&gt;의 생명 주기에 범위를 지정한다. 웹의 &lt;code&gt;ApplicationContext&lt;/code&gt;에서만 유효하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;빈의-생명-주기-콜백lifecycle-callbacks&#34;&gt;빈의 생명 주기 콜백(Lifecycle Callbacks)&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112397674-e8078980-8d45-11eb-8439-6ab8de4ed0b0.png&#34; alt=&#34;Screen Shot 2021-03-25 at 8 41 23 AM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컨테이너의 빈 생명주기와 상호 작용하기 위해서 &lt;code&gt;InitializingBean&lt;/code&gt;, &lt;code&gt;DisposableBean&lt;/code&gt; 인터페이스를 구현할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컨테이너는 빈을 초기화 하기 전에 &lt;code&gt;afterPropertiesSet()&lt;/code&gt;을 호출하고 &lt;code&gt;Bean&lt;/code&gt; 소멸시에 &lt;code&gt;destory()&lt;/code&gt;를 호출하여 특정 작업을 수행하게 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;JSR-250 스펙에서는 &lt;code&gt;@PostConstruct&lt;/code&gt;, &lt;code&gt;@PreDestory&lt;/code&gt; 어노테이션을 사용하는데, 일반적으로 최신 스프링 애플리케이션에서 생명 주기 콜백을 수신하기 위한 좋은 방법이다. 어노테이션을 사용한다는 것은 스프링이 특정 인터페이스에 결합되지 않는다는 것을 의미한다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;내부적으로 &lt;code&gt;SpringFramework&lt;/code&gt;는 &lt;code&gt;BeanPostProcessor&lt;/code&gt; 구현을 사용하여 적절한 메서드를 찾아 호출할 수 있는 모든 콜백 인터페이스를 처리한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;커스텀 기능이 필요하거나, 스프링이 기본적으로 제공하지 않는 다른 라이프 사이클 동작이 필요한 경우 &lt;code&gt;BeanPostProcessor&lt;/code&gt;를 직접 구현할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112398510-b8f21780-8d47-11eb-8584-09600530656c.png&#34; alt=&#34;Screen Shot 2021-03-25 at 8 54 29 AM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;InitializingBean&lt;/code&gt; 인터페이스는 불 필요하게 코드를 스프링에 연결하므로 사용하지 않는 것이 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또는 &lt;code&gt;@PostConstruct&lt;/code&gt; 주석을 사용하거나 &lt;code&gt;POJO&lt;/code&gt; 초기화 방법을 지정하는 것이 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XML 기반 구성 메타 데이터의 경우 &lt;code&gt;init-method&lt;/code&gt; 속성을 사용하여 인수없는 빈 서명이 있는 메서드의 이름을 지정할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt; 설정으로는 &lt;code&gt;@Bean&lt;/code&gt;의 &lt;code&gt;initMethod&lt;/code&gt; 속성을 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class AnotherExampleBean implements InitializingBean {

    @Override
    public void afterPropertiesSet() {
        // do some initialization work
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여러 가지 방법으로 구현할 수 있지만, 인터페이스 방법은 권장하지 않는 방법이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112398918-84cb2680-8d48-11eb-8b2a-29065259f433.png&#34; alt=&#34;Screen Shot 2021-03-25 at 9 00 11 AM&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;org.springframework.beans.factory.DisposableBean&lt;/code&gt; 인터페이스를 구현하면 이를 포함하는 컨테이너가 소멸될 때, &lt;code&gt;Bean&lt;/code&gt;이 콜백을 받을 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DisposableBean&lt;/code&gt; 인터페이스는 단일 메서드를 지정한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;초기화와 같이 인터페이스 구현은 불필요하게 코드를 스프링에 연결하므로 사용하지 않는 것이 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또는 &lt;code&gt;@PreDestory&lt;/code&gt; 주석을 사용하거나 빈 정의에서 지원하는 일반 메서드를 지정하는 것이 좋습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class AnotherExampleBean implements DisposableBean {

    @Override
    public void destroy() {
        // do some destruction work (like releasing pooled connections)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112400248-4d11ae00-8d4b-11eb-9b5c-8de0b739da81.png&#34; alt=&#34;Screen Shot 2021-03-25 at 9 19 57 AM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스프링 고유의 &lt;code&gt;InitializingBean&lt;/code&gt; 또는 &lt;code&gt;DisposableBean&lt;/code&gt; 콜백 인터페이스를 사용하지 않는 초기화 및 폐기 메서드 콜백을 작성할 때는 일반적으로 &lt;code&gt;init()&lt;/code&gt;, &lt;code&gt;initialize()&lt;/code&gt;, &lt;code&gt;dispose()&lt;/code&gt;등과 같은 이름으로 작성한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이상적으로는 이러한 수명주기 콜백 메서드의 이름은, 모든 개발자가 동일한 메서드 이름을 사용하고 일관성을 보장하기 위함이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;그렇다면 InitializingBean과 DisposableBean 인터페이스를 구현하는 것과 @PostConstruct, @PreDestory를 사용하는 것의 차이점은 무엇일까?&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans&#34;&gt;SPRING CORE DOCS 5.3.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>스프링의 세 가지 특징</title>
      <link>https://dongwooklee96.github.io/post/2021/03/10/%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-%EC%84%B8-%EA%B0%80%EC%A7%80-%ED%8A%B9%EC%A7%95.html</link>
      <pubDate>Wed, 10 Mar 2021 08:00:33 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/10/%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-%EC%84%B8-%EA%B0%80%EC%A7%80-%ED%8A%B9%EC%A7%95.html</guid>
      <description>&lt;h1 id=&#34;스프링의-세-가지-특징&#34;&gt;스프링의 세 가지 특징&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;회사에서 하는 세미나에서, 자바 세미나가 끝나고 이어서 스프링 세미나를 시작하였다.&lt;/p&gt;
&lt;p&gt;세미나를 진행하면서, 강조했던 스프링의 세 가지 특징에 대해서 설명한 부분을 정리해보겠다.&lt;/p&gt;
&lt;h2 id=&#34;1-ioc--di-dl&#34;&gt;1. IoC / DI, DL&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;스프링 프레임워크는 DL (Dependency Look-up)과 DI(Dependency Injection)를 통해서 IoC (Inversion of Control)을 구현합니다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트를 진행하면서, 많은 라이브러리를 사용할 것이다.&lt;/li&gt;
&lt;li&gt;특정 라이브러리에서 원하는 기능을 사용하려면 &lt;code&gt;new&lt;/code&gt; 를 통해서 객체를 생성해야하는데, 이 객체를 생성하기 위해서는 다른 객체를 생성해야하는 등 복잡한 의존 관계가 발생하고 사용자는 파악하기 힘들다.&lt;/li&gt;
&lt;li&gt;따라서 스프링 프레임워크는 이러한 객체에 대한 생성과 객체간의 의존관계에 대한 관리를 개발자가 스프링에게 위임하게 된다.&lt;/li&gt;
&lt;li&gt;개발자는 스프링이 요구하는 대로 설정만 하면, 설정에 따라서 &lt;code&gt;Bean&lt;/code&gt;을 생성하여 컨테이너에 담고 &lt;code&gt;Bean&lt;/code&gt;간의 의존관계를 파악(&lt;code&gt;Dependency Look-up&lt;/code&gt;)하여 주입 (&lt;code&gt;Dependency Injection&lt;/code&gt;)해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;POJO (Plain Java Object)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스프링에서 생성되어 관리되는 POJO 기반의 객체를 우리는 &lt;code&gt;Spring Bean&lt;/code&gt;이라고 한다.&lt;/li&gt;
&lt;li&gt;여기서 &lt;code&gt;POJO&lt;/code&gt;는 단순 &lt;code&gt;getter/setter&lt;/code&gt;만으로 구성되어 있으며 단순히 &lt;code&gt;new&lt;/code&gt;를 통해서 생성 가능한 형태를 말한다.&lt;/li&gt;
&lt;li&gt;핵심은 특정 기술에 종속되는 어떤 클래스도 상속하지 않고 있으며 어떠한 인터페이스도 구현하고 있지 않은 자바 클래스이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-aop-aspect-oriented-programming&#34;&gt;2. AOP (Aspect Oriented Programming)&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110551571-16e40400-8179-11eb-87cd-901053f4404b.png&#34; alt=&#34;image2021-3-8_18-35-52&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AOP는 관점지향 프로그래밍을 말한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대부분의 프로젝트는 고유한 핵심 기능 외에 트랜잭션, 보안처리(인증, 인가), 로깅 등의 공통 기능을 반드시 포함할 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;별다른 정책이 없다면, 우리는 매번 프로젝트에서 똑같은 로직을 계속해서 개발할 것이고 버그가 발생하면 여기저기서 수정 작업을 할 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AOP는 어플리케이션의 기능을 핵심 기능과 공통 기능을 각각 종단 관심사와 횡단 관심사로 분리하고 공통 기능을 적절히 끼워넣을 수 있게 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;psa-portable-service-abstraction&#34;&gt;PSA (Portable Service Abstraction)&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;환경의 변화와 관계없이 일관된 방식으로 기술에 접근할 수 있는 환경을 제공하려는 추상화 구조를 말한다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;스프링은 언어가 아닌 기술(구현체의 기술)에 얽메이는 것에 큰 반감을 가짐 (&lt;code&gt;EJB&lt;/code&gt;, &lt;code&gt;Servlet&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;스프링에서 동작할 수 있는 라이브러리들은 &lt;code&gt;POJO&lt;/code&gt; 형태로 되어 있음&lt;/li&gt;
&lt;li&gt;대표적인 추상화의 예
&lt;ul&gt;
&lt;li&gt;JPA의 구현체(&lt;code&gt;Hibernate&lt;/code&gt;, &lt;code&gt;Eclipse Link&lt;/code&gt;)를 추상화하는 &lt;code&gt;Spring Data JPA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mybatis&lt;/code&gt;를 추상화하는 &lt;code&gt;Spring-mybatis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Spring Transaction Manager&lt;/code&gt;, &lt;code&gt;Spring Cache Manager&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;서비스가 구동되는 환경(&lt;code&gt;Web MVC&lt;/code&gt;, &lt;code&gt;Web Flux&lt;/code&gt;)에 대해서도 추상화를 지원한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;버전에 따라서 라이브러리 혹은 프레임워크의 내부 API의 설계나 인터페이스가 달라지더라도, &lt;code&gt;Sping&lt;/code&gt;에서 적절히 감싸 추상화를 하기 때문에 우리의 소스코드는 변경될 일이 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>
