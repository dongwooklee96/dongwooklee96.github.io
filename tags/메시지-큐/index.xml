<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>메시지 큐 on 개발자 이동욱</title>
    <link>/tags/%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%81%90/</link>
    <description>Recent content in 메시지 큐 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Thu, 08 Apr 2021 08:53:24 +0900</lastBuildDate><atom:link href="/tags/%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%81%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>주키퍼란 무엇인가? (draft)</title>
      <link>/post/2021/04/08/%EC%A3%BC%ED%82%A4%ED%8D%BC%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-draft/</link>
      <pubDate>Thu, 08 Apr 2021 08:53:24 +0900</pubDate>
      
      <guid>/post/2021/04/08/%EC%A3%BC%ED%82%A4%ED%8D%BC%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-draft/</guid>
      <description>참고 문헌  What is ZooKeeper  </description>
    </item>
    
    <item>
      <title>카프카란 무엇인가? (draft)</title>
      <link>/post/2021/04/08/%EC%B9%B4%ED%94%84%EC%B9%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-draft/</link>
      <pubDate>Thu, 08 Apr 2021 08:19:24 +0900</pubDate>
      
      <guid>/post/2021/04/08/%EC%B9%B4%ED%94%84%EC%B9%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-draft/</guid>
      <description>참고 문헌  KafkaConsumer Client Internals  </description>
    </item>
    
    <item>
      <title>메시지 큐를 이용한 비동기처리 및 에러 처리</title>
      <link>/post/2021/03/29/%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%81%90%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%B2%98%EB%A6%AC-%EB%B0%8F-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC/</link>
      <pubDate>Mon, 29 Mar 2021 22:19:24 +0900</pubDate>
      
      <guid>/post/2021/03/29/%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%81%90%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%B2%98%EB%A6%AC-%EB%B0%8F-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC/</guid>
      <description>메시지 큐를 이용한 비동기 요청 처리    요청을 처리하는 방법에는 전통적인 동기식 방식도 있지만, 비동기식 방식도 있는데, 동기 방식이 클라이언트가 요청을 보내면 처리한 다음에 응답이 오는 방식이라면 비동기 방식은 요청을 보낸 후 비즈니스 로직이 처리가 완료되지 않은 상태에서 다음 로직을 진행한다.
  서버로 전달된 요청은 나중에 처리되며 나중에 클라이언트로 응답이 전달된다. (응답을 전달하지 않을 때도 있다.)
  동기식 방식과 비동기식 방식의 가장 큰 차이점은 동기식 방식은 응답이 올 때까지 클라이언트가 대기하는 것이고, 비동기식 방식은 요청만 보내놓고 응답이 오는 것과 상관없이 클라이언트 대기 없이 다음 로직을 수행한다.</description>
    </item>
    
  </channel>
</rss>
