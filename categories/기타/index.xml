<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>기타 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/categories/%EA%B8%B0%ED%83%80.html</link>
    <description>Recent content in 기타 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sun, 28 Nov 2021 17:00:39 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/categories/%EA%B8%B0%ED%83%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>간단한 AUTOTOOLS 예제</title>
      <link>https://dongwooklee96.github.io/post/2021/11/28/%EA%B0%84%EB%8B%A8%ED%95%9C-autotools-%EC%98%88%EC%A0%9C.html</link>
      <pubDate>Sun, 28 Nov 2021 17:00:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/28/%EA%B0%84%EB%8B%A8%ED%95%9C-autotools-%EC%98%88%EC%A0%9C.html</guid>
      <description>&lt;h3 id=&#34;autotools-란&#34;&gt;AUTOTOOLS 란&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;여러 파일로 나누어진 C 언어 프로젝트를 빌드하려면 일일히 컴파일 하고 나서, 목적파일을 링크해줘야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서, 손이 많이 가게 된다. &lt;code&gt;AUTOTOOLS&lt;/code&gt;는 이러한 작업을 자동으로 해주는 도구이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;소스-코드-작성&#34;&gt;소스 코드 작성&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/bdsw203xr62vs5a/Screen%20Shot%202021-11-28%20at%205.52.36%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;우선 다음과 같은 명령어로 프로젝트를 생성할 디렉터리를 하나 만들어준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;mkdir multimodule
cd multimodule
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;multimodule&lt;/code&gt; 이라는 이름으로 만들어주었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 나서, &lt;code&gt;src&lt;/code&gt;와 &lt;code&gt;test&lt;/code&gt; 디렉터를 만들어주고, 나서 간단한 코드를 작성한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;두 개의 숫자를 입력받고 나서, 최대 값을 반환하는 간단한 예제이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래 소스코드는 multimodule/src 디렉터리 안에 작성하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;util.c&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int max(int a, int b) {
    if (a &amp;gt; b) {
        return a;
    } else {
        return b;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;util.h&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int max(int a, int b);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;main.c&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;quot;util.h&amp;quot;

int main(int argc, char* argv[]) {
    int a, b, max_num;

    printf(&amp;quot;please input two numbers: &amp;quot;);
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;a, &amp;amp;b);
    max_num = max(a, b);
    printf(&amp;quot;max number is %d\n&amp;quot;, max_num);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;make-파일-작성&#34;&gt;MAKE 파일 작성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트 루트 폴더로 올라가서, &lt;code&gt;Makefile.am&lt;/code&gt; 파일을 작성해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Makefile.am&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AUTOMAKE_OPTIONS = subdir-objects
bin_PROGRAMS = multimodule

multimodule_SOURCES = \
        src/main.c \
        src/util.c
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그리고 나서, 터미널에서 &lt;code&gt;autoscan&lt;/code&gt; 명령어를 입력한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그려면 &lt;code&gt;configure.scan&lt;/code&gt; 이라는 파일이 자동으로 생성되고, 템플릿에 원하는 내용을 채워 넣는다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;AC_PREREQ([2.69])
AC_INIT([multimodule], [0.0.1], [])
AC_CONFIG_SRCDIR([src/main.c])
AC_CONFIG_HEADERS([config.h])
AM_INIT_AUTOMAKE([-Wall -Werror foreign])

# Checks for programs.
AC_PROG_CC

# Checks for libraries.

# Checks for header files.

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그리고 나서, 이 파일 이름을  &lt;code&gt;configure.ac&lt;/code&gt;로 변경한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그런 후에 터미널에 아래 명령어를 입력한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;autoreconf -v -i
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/mfayufu7l04trjz/Screen%20Shot%202021-11-28%20at%206.10.16%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당 명령어가 정상적으로 실행되었으면, &lt;code&gt;configure&lt;/code&gt; 실행파일이 생성되고 이를 실행하고 나서, &lt;code&gt;Makefile.am&lt;/code&gt; 파일이 생성되었다면 마지막으로 &lt;code&gt;make&lt;/code&gt; 명령어를 입력하면 프로그램이 빌드되고 실행 파일이 생성되게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/dcq897lnsrc1l46/2021-11-28%2018.13.58.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=dc1kEJvS248&#34;&gt;Creating a simple Autotools based project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LOCUST를 이용한 부하 테스트</title>
      <link>https://dongwooklee96.github.io/post/2021/10/21/locust%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%80%ED%95%98-%ED%85%8C%EC%8A%A4%ED%8A%B8.html</link>
      <pubDate>Thu, 21 Oct 2021 10:00:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/10/21/locust%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%80%ED%95%98-%ED%85%8C%EC%8A%A4%ED%8A%B8.html</guid>
      <description>&lt;h3 id=&#34;locust를-선택한-이유&#34;&gt;LOCUST를 선택한 이유&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;최근에 부하테스트를 진행할 일이 있었다. 여러가지 부하 테스팅 툴이 있었지만, 나는 &lt;a href=&#34;https://locust.io/&#34;&gt;LOCUST&lt;/a&gt;를 선택 했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LOCUST를 선택한 이유는 설치가 간단해보이고, 파이썬으로 스크립트를 작성해 코드로 관리할 수 있다는 점도 마음에 들었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 또한 웹 기반 UI를 제공하여 결과를 확인하거나, 조작하기도 편리하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;설치-방법&#34;&gt;설치 방법&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/0b5wmn704oz4h7w/Screen%20Shot%202021-10-21%20at%2010.28.26%20AM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;설치 방법은 그냥 터미널에서 다음 명령어를 입력하며 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;pip3 install locust
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;테스트-방법&#34;&gt;테스트 방법&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;원하는 폴더에 가서, &lt;code&gt;locustfile.py&lt;/code&gt; 를 만들고 나서, 아래 코드를 작성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;from locust import HttpUser, task

class HelloWorldUser(HttpUser):
  @task
   def hello_world(self):
     self.client.get(&amp;quot;/hello&amp;quot;)
     self.client.get(&amp;quot;/world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;가장 간단한 예제 코드이며, 해당 코드를 실행하면 &lt;code&gt;HTTP&lt;/code&gt; 요청을 서버에 전송한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LOCUST&lt;/code&gt;를 실행하는 &lt;code&gt;locustfile.py&lt;/code&gt;를 작성한 디렉터리에서 터미널에 아래 명령어를 입력하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;locust --host=&amp;quot;server address&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;실행 하면, 사용자 수와 사용자가 증가하는 기간을 설정할 수 있고, 초당 응답 시간 및 전체적인 지표를 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
from random import randint
from locust import HttpUser, task


class UserBehavior(HttpUser):

    def on_start(self):
        self.login()

    def on_stop(self):
        self.logout()

    def login(self):
        response = self.client.post(&amp;quot;/api/v1/auth/login&amp;quot;, json={&amp;quot;user-id&amp;quot;: &amp;quot;id&amp;quot;,
                                                                &amp;quot;user-pwd&amp;quot;: &amp;quot;pass&amp;quot;})
        access_token = response.json()[&#39;data&#39;][&#39;access_token&#39;]
        self.client.headers.update({&#39;Authorization&#39;: &#39;Bearer &#39; + access_token})

        # # user info
        self.user_company_key = response.json()[&#39;data&#39;][&#39;user_info&#39;][&#39;company_key&#39;]

    def logout(self):
        self.client.delete(&amp;quot;/api/v1/auth/logout_access_token&amp;quot;)

    # 조회
    @task
    def view_dashboard(self):
        &amp;quot;&amp;quot;&amp;quot;
        HOME - DASH BOARD
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(&#39;/api/v1/dashboard/summary-info?role=ADMIN&amp;amp;company_key=26&#39;)
        response = self.client.get(&#39;/api/v1/notice/dashboard-notices?company_key=26&#39;)
        response = self.client.get(&#39;/api/v1/group/groups?show_deleted=0&amp;amp;company_key=26&amp;amp;by_requestor=0&#39;)
        response = self.client.get(&#39;/api/v1/dashboard/compliance-list?offset=0&amp;amp;count=12&amp;amp;group_list=&amp;amp;company_key=26&#39;)

    @task
    def view_home_notice(self):
        &amp;quot;&amp;quot;&amp;quot;
        HOME - NOTICE
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(
            &#39;/api/v1/notice/notices?offset=0&amp;amp;count=20&amp;amp;company_key=26&amp;amp;show_deleted=0&amp;amp;is_cm=1&amp;amp;is_admin=1&amp;amp;is_service_admin=0&#39;)

    @task
    def view_training_my_training_to_do_list(self):
        &amp;quot;&amp;quot;&amp;quot;
        TRAINING - MY TRAINING - TO DO LIST
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(
            &#39;/api/v1/contents/my-lecture/to-do-list?show_deleted=0&amp;amp;offset=0&amp;amp;count=20&amp;amp;category_list=&amp;amp;my_status=NOT+OPEN,+IN+PROGRESS,+OVERDUE&amp;amp;status_list=ACTIVE,+EXPIRED&amp;amp;after_active_date=1&amp;amp;exclude_previous=1&amp;amp;validity=1&amp;amp;company_key=26&#39;)

    @task
    def view_training_my_training_optional_list(self):
        &amp;quot;&amp;quot;&amp;quot;
        TRAINING - MY TRAINING - OPTIONAL
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(
            &#39;/api/v1/contents/lectures?show_deleted=0&amp;amp;offset=0&amp;amp;count=20&amp;amp;status=ACTIVE&amp;amp;training_type=OPTIONAL&amp;amp;category_list=&amp;amp;attended=0&amp;amp;validity=1&amp;amp;my_lecture=0&amp;amp;sorting_mode=due_date_desc&amp;amp;exclude_previous=1&amp;amp;type=LECTURE&amp;amp;company_key=26&#39;)

    @task
    def view_training_my_training_all_lectures(self):
        &amp;quot;&amp;quot;&amp;quot;
        TRAINING - MY TRAINING - ALL
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(
            &#39;/api/v1/contents/my-lecture/to-do-list?show_deleted=0&amp;amp;offset=0&amp;amp;count=20&amp;amp;category_list=238,239,267,268,240,242,489,366,367,368,488,343,369,370,472,473,371,312,382,467,476,483,490,482,495,491,493,496,497&amp;amp;validity=1&amp;amp;company_key=26&#39;)

    @task
    def view_all_training_list(self):
        &amp;quot;&amp;quot;&amp;quot;
        TRAINING - ALL TRAINING
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(&#39;/api/v1/user/all_user_list?company_key=26&amp;amp;user_status_list=ACTIVE&#39;)
        response = self.client.get(&#39;/api/v1/job-title/all-job-titles?company_key=26&#39;)
        response = self.client.get(&#39;/api/v1/contents/categories-from-dic?exclude_previous=1&amp;amp;company_key=26&#39;)
        response = self.client.get(
            &#39;/api/v1/contents/lectures?show_deleted=0&amp;amp;offset=0&amp;amp;count=20&amp;amp;category_list=&amp;amp;exclude_previous=1&amp;amp;company_key=26&#39;)

    @task
    def view_user_management_group(self):
        &amp;quot;&amp;quot;&amp;quot;
        USER_MANAGEMENT - GROUP
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(&#39;/api/v1/group/groups?show_deleted=0&amp;amp;company_key=26&amp;amp;by_requestor=0&#39;)

    @task
    def view_user_management_job_title(self):
        &amp;quot;&amp;quot;&amp;quot;
        USER_MANAGEMENT - JOB TITLE
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(&#39;/api/v1/job-title/job-titles?show_deleted=0&amp;amp;offset=0&amp;amp;count=20&amp;amp;company_key=26&#39;)

    @task
    def view_user_management_user(self):
        &amp;quot;&amp;quot;&amp;quot;
        USER_MANAGEMENT - USER
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(&#39;/api/v1/user/all_user_list?company_key=26&amp;amp;user_status_list=ACTIVE&#39;)
        response = self.client.get(&#39;/api/v1/job-title/all-job-titles?company_key=26&#39;)
        response = self.client.get(&#39;/api/v1/group/groups?show_deleted=0&amp;amp;company_key=26&amp;amp;by_requestor=0&#39;)

        response = self.client.get(
            &#39;/api/v1/user/users?status=ACTIVE,INACTIVE&amp;amp;offset=0&amp;amp;count=20&amp;amp;roles=&amp;amp;group_list=&amp;amp;show_deleted=0&amp;amp;company_key=26&#39;)

    @task
    def view_contents_management_category(self):
        &amp;quot;&amp;quot;&amp;quot;
        CONTENTS MANAGEMENT - CATEGORY
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(&#39;/api/v1/contents/categories?show_deleted=0&amp;amp;exclude_previous=0&amp;amp;company_key=26&#39;)

    @task
    def view_contents_management_lecture(self):
        &amp;quot;&amp;quot;&amp;quot;
        CONTENTS MANAGEMENT - LECTURE
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(&#39;/api/v1/job-title/all-job-titles?company_key=26&#39;)
        response = self.client.get(&#39;/api/v1/user/all_user_list?company_key=26&amp;amp;user_status_list=ACTIVE&#39;)

        response = self.client.get(
            &#39;/api/v1/contents/lectures?show_deleted=0&amp;amp;offset=0&amp;amp;count=20&amp;amp;category_list=&amp;amp;exclude_previous=1&amp;amp;type=LECTURE&amp;amp;company_key=26&#39;)

    @task
    def view_contents_management_quiz(self):
        &amp;quot;&amp;quot;&amp;quot;
        CONTENTS MANAGEMENT - QUIZ
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(
            &#39;/api/v1/contents/quizzes?show_deleted=0&amp;amp;offset=0&amp;amp;count=20&amp;amp;status=ACTIVE,+INACTIVE&amp;amp;company_key=26&#39;)

    @task
    def view_contents_management_course(self):
        &amp;quot;&amp;quot;&amp;quot;
        CONTENTS MANAGEMENT - COURSE
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(&#39;/api/v1/job-title/all-job-titles?company_key=26&#39;)
        response = self.client.get(&#39;/api/v1/user/all_user_list?company_key=26&amp;amp;user_status_list=ACTIVE&#39;)
        response = self.client.get(&#39;/api/v1/contents/categories-from-dic?exclude_previous=1&amp;amp;company_key=26&#39;)
        response = self.client.get(
            &#39;/api/v1/contents/lectures?show_deleted=0&amp;amp;offset=0&amp;amp;count=20&amp;amp;category_list=&amp;amp;exclude_previous=1&amp;amp;type=COURSE&amp;amp;company_key=26&#39;)

    @task
    def view_learning_progress_training(self):
        &amp;quot;&amp;quot;&amp;quot;
        LEARNING PROGRESS - TRAINING
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(&#39;/api/v1/contents/categories-from-dic?company_key=26&#39;)
        response = self.client.get(&#39;/api/v1/progress/lectures?offset=0&amp;amp;count=20&amp;amp;category_list=&amp;amp;company_key=26&#39;)

    @task
    def view_learning_progress_user(self):
        &amp;quot;&amp;quot;&amp;quot;
        LEARNING PROGRESS - USER
        &amp;quot;&amp;quot;&amp;quot;
        # get list
        response = self.client.get(&#39;/api/v1/user/all_user_list_by_requester?company_key=26&amp;amp;user_status_list=ACTIVE&#39;)
        response = self.client.get(&#39;/api/v1/group/groups?show_deleted=0&amp;amp;company_key=26&amp;amp;by_requestor=1&#39;)
        response = self.client.get(&#39;/api/v1/contents/categories-from-dic?company_key=26&#39;)
        response = self.client.get(
            &#39;/api/v1/progress/users?offset=0&amp;amp;count=20&amp;amp;show_deleted=0&amp;amp;category_list=&amp;amp;show_inactive_user=false&amp;amp;company_key=26&#39;)

    @task
    def view_system_management(self):
        &amp;quot;&amp;quot;&amp;quot;
        SYSTEM MANAGEMENT
        &amp;quot;&amp;quot;&amp;quot;
        response = self.client.get(&#39;/api/v1/sys/system?company_key=26&#39;)

    # 생성
    @task
    def add_category(self):
        &amp;quot;&amp;quot;&amp;quot;
        CONTENTS MANAGEMENT - CATEGORY - ADD
        &amp;quot;&amp;quot;&amp;quot;
        num1 = randint(0, 5000)
        num2 = randint(0, 5000)
        response = self.client.post(&#39;/api/v1/contents/categories&#39;, json={
            &amp;quot;parent_category_name&amp;quot;: &amp;quot;NEW COMPANY 1&amp;quot;,
            &amp;quot;parent_category_key&amp;quot;: 0,
            &amp;quot;category_name&amp;quot;: &amp;quot;test_category_&amp;quot; + str(num1) + &amp;quot;_&amp;quot; + str(num2),
            &amp;quot;note&amp;quot;: None,
            &amp;quot;training_type&amp;quot;: &amp;quot;MANDATORY&amp;quot;,
            &amp;quot;due_days&amp;quot;: None,
            &amp;quot;alarm&amp;quot;: 0,
            &amp;quot;alarm_days&amp;quot;: 0,
            &amp;quot;deleted&amp;quot;: 0,
            &amp;quot;status&amp;quot;: &amp;quot;ACTIVE&amp;quot;,
            &amp;quot;trainee_list&amp;quot;: [],
            &amp;quot;mandatory_trainee_list&amp;quot;: [],
            &amp;quot;optional_trainee_list&amp;quot;: [],
            &amp;quot;category_key&amp;quot;: -1,
            &amp;quot;inactive_date&amp;quot;: None,
            &amp;quot;will_inactive&amp;quot;: 0,
            &amp;quot;name&amp;quot;: &amp;quot;test_category_1&amp;quot;,
            &amp;quot;company_key&amp;quot;: 26
        })

    @task
    def add_lecture(self):
        &amp;quot;&amp;quot;&amp;quot;
        CONTENTS MANAGEMENT - LECTURE - ADD
        &amp;quot;&amp;quot;&amp;quot;
        num1 = randint(0, 5000)
        num2 = randint(0, 5000)
        response = self.client.post(&#39;/api/v1/contents/lectures&#39;, json={
            &amp;quot;category_key&amp;quot;: 497,
            &amp;quot;name&amp;quot;: &amp;quot;lecture_&amp;quot; + str(num1) + &amp;quot;_&amp;quot; + str(num2),
            &amp;quot;practitioner_type&amp;quot;: None,
            &amp;quot;training_year&amp;quot;: None,
            &amp;quot;note&amp;quot;: None,
            &amp;quot;training_type&amp;quot;: &amp;quot;MANDATORY&amp;quot;,
            &amp;quot;lecture_length&amp;quot;: 0,
            &amp;quot;active_date&amp;quot;: &amp;quot;2021-10-20&amp;quot;,
            &amp;quot;inactive_date&amp;quot;: &amp;quot;9999-12-31&amp;quot;,
            &amp;quot;due_date&amp;quot;: None,
            &amp;quot;due_days&amp;quot;: 1,
            &amp;quot;alarm&amp;quot;: 0,
            &amp;quot;alarm_days&amp;quot;: 0,
            &amp;quot;certificate&amp;quot;: 0,
            &amp;quot;complete_date_mode&amp;quot;: &amp;quot;AUTO_ASSIGN&amp;quot;,
            &amp;quot;trainee_list&amp;quot;: [
                {&amp;quot;trainee_key&amp;quot;: 1013, &amp;quot;value&amp;quot;: &amp;quot;dwlee&amp;quot;, &amp;quot;trainee_type&amp;quot;: &amp;quot;USER&amp;quot;, &amp;quot;training_type&amp;quot;: &amp;quot;MANDATORY&amp;quot;}],
            &amp;quot;mandatory_trainee_list&amp;quot;: [
                {&amp;quot;trainee_key&amp;quot;: 1013, &amp;quot;value&amp;quot;: &amp;quot;dwlee&amp;quot;, &amp;quot;trainee_type&amp;quot;: &amp;quot;USER&amp;quot;, &amp;quot;training_type&amp;quot;: &amp;quot;MANDATORY&amp;quot;}],
            &amp;quot;optional_trainee_list&amp;quot;: [], &amp;quot;include_contents&amp;quot;: 0, &amp;quot;contents_type&amp;quot;: None, &amp;quot;contents_name&amp;quot;: None,
            &amp;quot;contents_url&amp;quot;: None,
            &amp;quot;contents_link&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;completion_period&amp;quot;: 0, &amp;quot;visibility&amp;quot;: False, &amp;quot;add_on_file_name&amp;quot;: None,
            &amp;quot;add_on_file_url&amp;quot;: None,
            &amp;quot;include_quiz&amp;quot;: 0, &amp;quot;quiz_type&amp;quot;: None, &amp;quot;quiz_key&amp;quot;: None, &amp;quot;number_of_quiz&amp;quot;: 0, &amp;quot;passing_score&amp;quot;: 0,
            &amp;quot;start_date&amp;quot;: None,
            &amp;quot;end_date&amp;quot;: None, &amp;quot;has_quiz_time_limit&amp;quot;: 0, &amp;quot;quiz_time_limit&amp;quot;: 0, &amp;quot;company_key&amp;quot;: 26
        })

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위는 내가 작성한 스크립트이다. 특이한 점으로는 부하 테스트를 실행하고 끝낼 때 &lt;code&gt;on_start()&lt;/code&gt; 메서드와, &lt;code&gt;on_stop()&lt;/code&gt; 메서드를 이용하여 로그인과 로그아웃을 하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 로그인 할 때 반환되는 &lt;code&gt;JWT&lt;/code&gt; 토큰정보를 &lt;code&gt;self.client.headers.update&lt;/code&gt;를 이용하여 저장하는 것을 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이렇게 하면, API 호출을 하기 위해서 토큰이 필요하더라도 문제 없이 호출할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.locust.io/en/stable/&#34;&gt;locust- doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://loadforge.com/directory/getting_auth_token&#34;&gt;locust - Getting Auth Token&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>글또 OT</title>
      <link>https://dongwooklee96.github.io/post/2021/07/18/%EA%B8%80%EB%98%90-ot.html</link>
      <pubDate>Sun, 18 Jul 2021 21:00:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/07/18/%EA%B8%80%EB%98%90-ot.html</guid>
      <description>&lt;p&gt;일요일 저녁, 드디어 기다리던 글또 OT를 진행하였다. 아래 내용은 글또 &lt;code&gt;OT&lt;/code&gt; 글또의 규칙과 주의사항을 정리한 글이다.&lt;/p&gt;
&lt;h3 id=&#34;글을-제출하는-방법&#34;&gt;글을 제출하는 방법&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/126066643-1fd562e8-fa3d-4942-bf24-6c79ff2d64fe.png&#34; alt=&#34;Screen Shot 2021-07-18 at 9 15 10 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;글을 작성하고 나서, 자신이 속한 채널에 블로그 &lt;code&gt;URL&lt;/code&gt;을 제출하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 작성할 때는 꼭 제출이라는 슬랙 이모지를 제출해야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;불가피하게 제출하지 못하는 경우에는, 패쓰권을 사용하겠다는 메세지와 함께 패쓰 이모지를 사용하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;패쓰는 연속해서 2번 이상 사용할 수 없고, 마감 시간전에 패쓰를 사용해야 반영이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;슬랙-봇&#34;&gt;슬랙 봇&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/126068245-3906798c-759b-4dce-b1e8-26abdc53c5ff.png&#34; alt=&#34;슬랙봇&#34;&gt;&lt;/p&gt;
&lt;p&gt;글또 슬랙 채팅방에서는 슬랙봇이 있는데 궁금한 정보를 물어보지 않고 봇에게 물어보면 답변을 해준다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$글또마감일
$글또규칙
$피드백규칙
$글또캘린더
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;위의 명령어를 슬랙에서 입력하면, 편하게 원하는 정보를 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;과거-참여하셨던-분들의-팁&#34;&gt;과거 참여하셨던 분들의 팁!&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;끝까지 완주하기 위해서는 가볍게 시작하는 마음으로 해야 끝까지 갈 수 있다고 하셨다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;글을 목적과 컨셉과 상관없이 글을 읽는 사람이, 읽기 편해야하고, 도움이 되면 좋고, 또한 배울 수 있는 글이면 좋다고 했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;글의 퀄리티는 피드백이 답이다. 물론 혼자도 고민해봐야겠지만, 우선 글쓰는것이 힘들다면 피드백을 동료들에게 맡기는 것도 좋은 방법이 될 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 피드백은 글을 쓰는 데드라인 전에 작성하는 것이 다른 사람들에게 퀄리티 있는 피드백을 줄 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사람들이 왜 이글을 찾는지, &lt;code&gt;Search Console&lt;/code&gt;에 등록하고 검색어를 통해서 확인한다면 어떤 글이 사람들에게 더 반응이 있는지를 찾을 수 있다. -&amp;gt; 이 부분은 고려하지 못했는데 사람들이 어떤 것을 원하고 귀기울이는지를 찾는 좋은 연습이 될 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;검색 엔진에 잘 걸리도록 콘텐츠 구조를 구성하는 것이 1순위이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;보통 처음글은, 글또 다짐글, 마지막글은 중간 회고글 혹은 연말 회고, 연초 다짐글로 작성이 된다. 아래는 글을 목적에 따른 분류이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;1. 내가 알고 있는 부분을 정리한다.
2. 어려운 개념 정리 글이 검색해도 잘 없는데 이를 번역이라도 해서 익혀보자.
3. 작업하다가 삽질해서 내 것이 된 지식을 정리하자.
4. 공부하자! 내 스타일로 메모
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예치금을 받으려고, 남에게 잘 보이려고 하지 말고 나에게 집중하자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;내가 글을 왜 쓰려고 했는가?, 무엇을 위해 글을 쓰기 시작했는가? 이를 되돌아 보자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;큰 문제를 조금씩 잘라서 접근하듯이, 하루에 30분 1시간씩 투자해서 조금씩 작성해보는 것이 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;글 작성이 끝나고 미리미리 피드백을 해두는 것이 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래는 과거부터 참여하셨던 분들의 블로그이다. 글을 작성하면서 어떻게 작성하셨는지 살펴보면 좋을 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://feel5ny.github.io/&#34;&gt;필오의 개발일지&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://lsjsj92.tistory.com/category/IT%20Infra%28Engineer%29&#34;&gt;꿈 많은 사람의 이야기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;취업-컨설팅-및-출판사-연결&#34;&gt;취업 컨설팅 및 출판사 연결&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이건 추가적으로, 요청을 주시면 취업 컨설팅 및 출판사 연결을 해주신다고 하셨다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;취업 컨설팅은 주로 학생들 위주로 진행이 될 것 같다고 하셨다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컨설팅은 아래와 같은 관점으로 긴호흡으로 이루어진다고 하셨다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;1. 나는 어떤 사람인지?
2. 내가 왜 이 일을 하고 싶은지?
3. 내가 이 일을 하기 위해서 이후 어떤 것을 바라고 있는지?
4. 내가 가고 싶은 회사는 어디인지?
5. 다른 사람들은 어떠한 생각과 어떠한 관점으로 회사를 원하는지?
6. 이력서를 어떻게 써야하는지?
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1XqURd94fxVQnhENycBOznUW13cd-1zdFZxAz95jHgRI/edit#slide=id.p1&#34;&gt;글또 6기 오리엔테이션&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
