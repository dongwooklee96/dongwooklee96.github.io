<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>오픈소스 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/categories/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4.html</link>
    <description>Recent content in 오픈소스 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Mon, 19 Dec 2022 20:04:24 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/categories/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PostgreSQL - GROUP BY ALL 명령어 만들기 이슈 분석</title>
      <link>https://dongwooklee96.github.io/post/2022/12/19/postgresql-group-by-all-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EC%9D%B4%EC%8A%88-%EB%B6%84%EC%84%9D.html</link>
      <pubDate>Mon, 19 Dec 2022 20:04:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/12/19/postgresql-group-by-all-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EC%9D%B4%EC%8A%88-%EB%B6%84%EC%84%9D.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;해당 기능은 머지될지는 모르겠으나, 쿼리 명령어를 확장 할 때 좋은 자료가 될 것 같으므로, 살펴보기로 하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;취지는 앞서 나온 컬럼에 대해서 모두 GROUP BY 를 하고 싶으면, 귀찮게 GROUP BY 절에다가 적지 말고, GROUP BY ALL 이라는 쿼리로 한번에 GROUP BY 하자는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/message-id/flat/CAAhFRxjyTO5BHn9y1oOSEp0TtpTDTTTb7HJBNhTG%2Bi3-hXC0XQ%40mail.gmail.com&#34;&gt;GROUP BY ALL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PostgreSQL - Fix gin index cost estimation 이슈 분석</title>
      <link>https://dongwooklee96.github.io/post/2022/12/12/postgresql-fix-gin-index-cost-estimation-%EC%9D%B4%EC%8A%88-%EB%B6%84%EC%84%9D.html</link>
      <pubDate>Mon, 12 Dec 2022 20:04:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/12/12/postgresql-fix-gin-index-cost-estimation-%EC%9D%B4%EC%8A%88-%EB%B6%84%EC%84%9D.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;해당 이슈는 &lt;code&gt;GIN&lt;/code&gt; 인덱스의 비용 측정에서 버그가 있다는 이슈이고, 이를 해결하기 위한 패치를 포함하고 있다. 아래의 글을 잘 읽어보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/3574rb3kzuvqjw1/Screenshot%202022-12-12%20at%2021.14.32.png&#34; alt=&#34;&#34;&gt;
&lt;a href=&#34;https://www.postgresql.org/message-id/3188617.44csPzL39Z%40aivenronan&#34;&gt;Ronan Dunklau -&amp;gt; PG Hackers&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. B+TREE와 비교해서, GIN, GIST, SP-GIST 인덱스들을 CPU 비용을 계산하지 않는다. 엔트리 트리를 내려가는 동안에... -&amp;gt; 이는 낮는 IO 비용을 가지고 있는 연산에서 문제가 될 수 있다.

2. 네스티드 루프에서 많은 반복에 의해서 IO 비용이 줄어들 떄 모든 것이 SHARED BUFFER 에있기 때문에 비용이 무료라고 간주한다.

3. 해당 이슈는 PG14 버전에서 발견되었으며, 해당 버전에서는 PG_TRGM, GIN 인덱스에서 &amp;#39;=&amp;#39; 연산자를 사용할 수 있다.

4. 이전에는 B+TREE에 대해서만, 고려를 하고 있었다. 따라서 BTREE_GIN 익스텐션 역시 위와 같은 문제를 일으킬 것이라고 생각한다.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;우선 패치는 &lt;code&gt;/src/backend/utils/adt/selfuncs.c&lt;/code&gt; 에서 이루어진 것을 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;해당 파일의 앞부분의 주석을 읽어보면, 선택도(SELECTIVITY) 함수와 표준 연산 및 인덱스 접근 메서드를 위한 인덱스 비용 추정 기능이라고 적혀 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; temp &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; t_gin_test_tbl(i int4[], j int4[]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; t_gin_test_tbl &lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; gin (i, j);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;into&lt;/span&gt; t_gin_test_tbl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{1}&amp;#39;&lt;/span&gt;,   &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{1,2}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{10}&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{1,2}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{10}&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{2}&amp;#39;&lt;/span&gt;,   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{10}&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{1,3}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{1,1}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{10}&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; enable_seqscan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;explain&lt;/span&gt; (costs &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; t_gin_test_tbl &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; array[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;@&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; t_gin_test_tbl &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; array[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;@&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; t_gin_test_tbl &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; array[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;@&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;::int4[] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;@&lt;/span&gt; j;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gincostestimate&lt;/code&gt; 함수에 디버거를 걸로 위의 스크립트를 실행시키면, &lt;code&gt;gin&lt;/code&gt; 인덱스를 사용하게 되면서 &lt;code&gt;gincostestimate&lt;/code&gt; 함수가 실행되는 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/nylzhwx1o4ncxy5/Screenshot%202022-12-13%20at%2022.54.37.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;추가된 곳의 코드를 살펴보면 인덱스 정보에 있는 트리의 높이 (&lt;code&gt;tree_height&lt;/code&gt;) 가 &lt;code&gt;0&lt;/code&gt; 보다 작으면 (구조체 주석에 보면, -1 이면 알 수 없는 값을 나타낸다.) 인덱스 트리 높이를 구해준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;numEntries&lt;/code&gt; 와 &lt;code&gt;numEntryPages&lt;/code&gt; 에 대해서 잘모르겠지만, 우선 이전에 &lt;code&gt;VACUUM&lt;/code&gt;이 된적이 있으면 통계정보에서 해당 정보를 얻어오고, 아니라면 직접 계산을 해준다. 해당 정보를 통해서 트리 높이를 계산해준다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/p6dwv2x005y88h3/Screenshot%202022-12-13%20at%2023.10.47.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그리고 나서, &lt;code&gt;descentCost&lt;/code&gt; 를 구해주는데, 튜플의 개수가 &lt;code&gt;1&lt;/code&gt; 보다 크다면, 값을 구해준다. 위의 &lt;code&gt;if&lt;/code&gt; 코드부분이 오류가 아닌가 싶었다. 왜냐하면, 위의 조건문과 상관없이 아래 코드가 실행되면서 위의 값이 덮어 쓰여지기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/vlx73skwy3qj8lc/Screenshot%202022-12-13%20at%2023.15.59.png&#34; alt=&#34;&#34;&gt;
&lt;a href=&#34;https://www.postgresql.org/message-id/flat/4153708.1662675130%40sss.pgh.pa.us#39d5416cdfc7e8a0ef8ebebcc3309c12&#34;&gt;Tom Lane -&amp;gt; Ronan Dunklau&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;톰 레인의 답변을 보면, &lt;code&gt;gin&lt;/code&gt; 인덱스 뿐만 아니라, 모든 인덱스에 대해서 올바르게 계산하고 있는지 확인을 해봐야 한다고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 나서 아래의 스크립트를 돌려봤는데 결과가 이상하게 나왔다고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE EXTENSION btree_gist;
CREATE EXTENSION pg_trgm;
CREATE EXTENSION bloom;

drop table if exists t1,t2;

CREATE TABLE t1 (
          id text
        );

CREATE TABLE t2 (
          id text primary key,
            t1_id text
        );

insert into t1 (id)
select i::text FROM generate_series(1, 1500) as i;

insert into t2 (id, t1_id)
SELECT i::text, (i % 1500 + 1)::text FROM generate_series(1, 20000) i;

ANALYZE t1, t2;

SET random_page_cost = 0.00000001;
-- SET random_page_cost = 1.0;
SET enable_hashjoin = off;
SET enable_mergejoin = off;
SET enable_memoize = off;

CREATE INDEX t1_btree_index ON t1 USING btree (id);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_btree_index;

CREATE INDEX t1_gin_index ON t1 USING gin (id gin_trgm_ops);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_gin_index;

CREATE INDEX t1_gist_index ON t1 USING gist (id);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_gist_index;

CREATE INDEX t1_spgist_index ON t1 USING spgist (id);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_spgist_index;

CREATE INDEX t1_hash_index ON t1 USING hash (id);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_hash_index;

CREATE INDEX t1_brin_index ON t1 USING brin (id);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_brin_index;

CREATE INDEX t1_bloom_index ON t1 USING bloom (id);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_bloom_index;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/a6azc6el4ao8whb/Screenshot%202022-12-13%20at%2023.59.11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;확실히 B+TREE를 기준으로 보았을 때, 예상 비용이 더 적게 나왔음에도 불구하고, 실제 실행시간은 훨씬 오래걸린 것을 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;패치에 대한 리뷰는 아래 이메일에서 이루어지는 것을 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/2h3cha5iv86cuxd/Screenshot%202022-12-15%20at%200.01.16.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;리뷰한 내용을 간략하게 요약하자면, &lt;code&gt;searchEntries&lt;/code&gt; 에 대한 초기 탐색 비용은 계산하지만, 캐시 효과와 비슷하게 &lt;code&gt;arrayScans&lt;/code&gt; 에 대해서도 확장을 해야한다고 말하는 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 트리의 높이를 구하는 계산식을 이해하지 못하겠고 (트리 높이가 1 일 때만 유효하게 보인다.) 주석이 지나치게 간단하다는 리뷰를 했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한, &lt;code&gt;btcostestimate&lt;/code&gt; 에 있는 주석을 중복해서 사용하는 것이 소스코드를 읽는 사람들이 추측하는 것보다는 낫다고 하면서 아래 주석을 달 것을 추천했다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* If there are ScalarArrayOpExprs, charge this once per SA scan.  The
* ones after the first one are not startup cost so far as the overall
* plan is concerned, so add them only to &amp;#34;total&amp;#34; cost.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/41/3796/&#34;&gt;Fix GIN indexes cost estimation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PostgresSQL 기여 프로세스 및 Commitfest</title>
      <link>https://dongwooklee96.github.io/post/2022/06/01/postgressql-%EA%B8%B0%EC%97%AC-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%B0%8F-commitfest.html</link>
      <pubDate>Wed, 01 Jun 2022 21:04:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/06/01/postgressql-%EA%B8%B0%EC%97%AC-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%B0%8F-commitfest.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;우선 여태까지 이것을 몰랐다는 것이 조금은 부끄럽지만 적어보도록 하겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/u42mqoyj3j89ge3/Screen%20Shot%202022-06-01%20at%2021.56.14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기여를 하는 프로세스는 위의 그림과 같이 두 가지가 있다. 첫 번째는 메일링 리스트에 바로 패치를 보내면, 커미터가 그것을 바로 커밋하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;두 번째는 먼저 패치를 메일링 리스트에 올리고 나서, &lt;a href=&#34;https://commitfest.postgresql.org/&#34;&gt;Commitfests&lt;/a&gt; 에다가 올리는 것이다. 그래야지 지속적으로 관리가 된다고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;나는 여태까지 그냥 메일링 리스트에 올라가면 자동으로 커밋 페스트에 올라가거나 아니면 메인테이너가 컨트리뷰터들이 올려주는 줄 알았다. 아마도 사소한 패치 위주로 올려서 그런 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/riipboe76hjiztk/Screen%20Shot%202022-06-01%20at%2021.59.25.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위의 커밋페스트에서 패치를 만드는 폼인데 디스크립션이랑 토픽은 상황에 맞게 알아서 정해주고 맨 아래 &lt;code&gt;Specify thread msgId&lt;/code&gt; 부분만, 아까 메일링 리스트에 할당된 쓰레드 아이디를 넣어주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/b3ljq1pzh1egzm7/Screen%20Shot%202022-06-01%20at%2022.03.31.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그렇게 되면, 패치가 올라가게 되고, 패치가 관리될 수 있는 것이다. 마치 깃 허브 이슈나 지라 티켓처럼 이슈를 관리한다고 보면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여태까지 바보 같이 메일링 리스트만 열심히 보고 있었다. 사실 메일 제목만 보는 날이 더 많지만 물론 커밋 페스트의 존재는 알고 있었지만, 정확히 어떻게 사용하는지 몰라서 안보고 있었는데 적극적으로 보도록 해야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스테판은 나에게 리뷰가 필요한 패치에 대해서 리뷰를 해도 좋고, 테스트 코드를 작성하면 더 좋을 것이라고 했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;빨리 테스트코드를 작성하는 법에 익숙해져서 리뷰를 기다리는 패치들이나 테스트 코드가 없는 패치들에게 왕창 테스트 코드를 날릴 날이 왔으면 좋겠다. :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.postgresql.org/wiki/Submitting_a_Patch&#34;&gt;Postgres Wiki - Submitting_a_Patch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://commitfest.postgresql.org/&#34;&gt;PostgreSQL - Commitfest&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>펄 Test::More 모듈 도큐먼트 </title>
      <link>https://dongwooklee96.github.io/post/2022/06/01/%ED%8E%84-testmore-%EB%AA%A8%EB%93%88-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8.html</link>
      <pubDate>Wed, 01 Jun 2022 21:04:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/06/01/%ED%8E%84-testmore-%EB%AA%A8%EB%93%88-%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/orgrd8l01vekuek/Screen%20Shot%202022-06-01%20at%2022.15.16.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;앞으로 테스트를 작성할 때 많이 읽어야할 API 문서이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/Test::More&#34;&gt;Perl - Test::More&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PostgresSQL 번역으로 기여하는 방법</title>
      <link>https://dongwooklee96.github.io/post/2021/12/09/postgressql-%EB%B2%88%EC%97%AD%EC%9C%BC%EB%A1%9C-%EA%B8%B0%EC%97%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95.html</link>
      <pubDate>Thu, 09 Dec 2021 15:04:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/12/09/postgressql-%EB%B2%88%EC%97%AD%EC%9C%BC%EB%A1%9C-%EA%B8%B0%EC%97%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95.html</guid>
      <description>&lt;h3 id=&#34;postgressql에-번역으로-기여하기&#34;&gt;PostgresSQL에 번역으로 기여하기&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/4pyc184bly5p3qi/Screen%20Shot%202021-12-09%20at%203.38.16%20PM%20copy.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org/developer/coding/&#34;&gt;PostgresSQL - Develoer&lt;/a&gt; 페이지에서 정보를 확인하다가, 번역이라는 섹션을 보았다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;번역이라면, 충분히 기여할 수 있고 또한 개발처럼 부담이 많이 되는 것도 아니라서 개발 프로세스 및 메일링 리스트로 대화를 하는데 많은 도움이 될 것 같다는 생각을 했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 기능을 파악하는데 많은 도움이 될 것이다. 문서화, 번역, 테스트 코드는 처음 관심 있는 오픈 소스에 기여하기 위한 좋은 방법이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 주변 개발자들이나, 오픈 소스에 기여하고 싶은 분들께 처음 시도를 해보면 좋을 것 같은 마음에 정리를 해보았다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;한국어-번역-상황&#34;&gt;한국어 번역 상황&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/oiq1fpw8cu0vdrr/Screen%20Shot%202021-12-09%20at%203.47.30%20PM%20copy.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;해당 사이트 (&lt;a href=&#34;https://babel.postgresql.org/&#34;&gt;https://babel.postgresql.org/&lt;/a&gt;)에 들어가보면 14 버전을 기준으로 번역이 완료된 부분과 아직 완료되지 않은 부분을 테이블 형태로 보여준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;많이 번역된 모듈도 있지만, 거의 번역되지 않은 모듈도 존재하였다. &lt;code&gt;PostgresSQL&lt;/code&gt;은 꾸준하게 개발되므로, 계속 번역할 곳이 생길 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/6f21gls1j1vpbjw/Screen%20Shot%202021-12-09%20at%203.53.49%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;또한 해당 사이트에 접속하면 번역된 파일이 언제 머지되었는지, 시황을 확인할 수 있다. 커밋된 메시지를 확인해보니까 서두에 번역된 언어 로케일을 적고 나서, 그 뒤에 메시지를 적는 것 같았다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/sezodbt8nxsky4m/Screen%20Shot%202021-12-09%20at%204.02.53%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;또한 한국어로 작성된 패치 파일도 확인하였다. 커밋 메시지 중에 번역팀 정보가 있어 만약 번역을 한다면 이 팀에게 연락을 해보는 것도 좋을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;번역 진행 사항은 메일링 리스트로 관리되어지고 있다. 따라서, 번역을 진행하기 전에 진행하고 싶다는 의사를 &lt;a href=&#34;https://www.postgresql.org/list/pgsql-translators/&#34;&gt;pgsql - translators&lt;/a&gt; 로 보내보는 것도 좋을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;번역을-진행하는-법&#34;&gt;번역을 진행하는 법&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/xl2nm4hk09nl6gx/Screen%20Shot%202021-12-09%20at%205.49.45%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.postgresql.org/wiki/NLS&#34;&gt;https://wiki.postgresql.org/wiki/NLS&lt;/a&gt; 에서 번역을 하는 방법에 대해서 알려주고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;번역은 &lt;code&gt;GNU&lt;/code&gt;에서 만든 도구인 &lt;a href=&#34;https://www.gnu.org/software/gettext/manual/gettext.html&#34;&gt;GNU Gettext - 메뉴얼&lt;/a&gt; 을 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;번역-프로세스&#34;&gt;번역 프로세스&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://babel.postgresql.org/&#34;&gt;번역 현황판&lt;/a&gt;에 가서, PO 파일을 다운로드 받아라 그리고 나서, 그 파일에다가 번역을 하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;새로운 번역을 시작하려면 표 맨 왼쪽에 있는 모듈 (카탈로그) 이름 중에 번역하고 싶은 것을 클릭하여서 &lt;code&gt;.POT&lt;/code&gt; 파일을 다운로드 한다. 헤더 부분의 모든 필드를 채우고 나면, 퍼지 플래그를 지워준다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/kkkspu2zehyalcv/Screen%20Shot%202021-12-09%20at%206.22.25%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VIM&lt;/code&gt; 플러그인에서 오류나는 부분을 자동으로 알려준다. 따라서 이러한 부분을 모두 채우면 다음과 같고, 아까 검증하는 명령어를 터미널에 입력하면 아래와 같이 번역된 숫자와 번역되지 않은 숫자를 알려준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/2f62jigczemeem3/Screen%20Shot%202021-12-09%20at%206.30.09%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/3z6triu9si3jqr4/Screen%20Shot%202021-12-09%20at%206.30.23%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;편집을 마치고 나서 파일에 오류가 있는지를 확인한다. 오류를 확인하는 방법은 다음과 같다. 터미널에 &lt;code&gt;msgfmt -o /dev/null -v -c yourfile.po&lt;/code&gt; 명령어를 실행한다. 또는 &lt;code&gt;PostgresSQL&lt;/code&gt; 소스코드에 파일을 복사한 후에, &lt;code&gt;gmake maintainer-check-po&lt;/code&gt; 명령어를 입력한다. 만약 이러한 확인 작업을 하지 않으면 사용자가 프로그램을 사용하는 도중에 버그가 발생할 수 있으므로 꼭 확인을 해야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;확인까지 문제 없이 모두 마쳤다면, 결과물을 &lt;a href=&#34;https://redmine.postgresql.org/projects/pgtranslation&#34;&gt;패치 - 트래커&lt;/a&gt;에 첨부하여 작업을 했다는 것을 알린다. 파일을 첨부할 때 패치파일을 보내는 것이 아니라, 그냥 번역한 파일 그대로 보내면 된다. 오히려 간편하다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;파일은 이름을 변경하지 말고, 다운로드 받은 당시의 파일 이름 그대로 사용하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;마지막으로 메인테이너가 소스코드에 병합 시켜주면, 번역한 파일이 반영된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;유용한-도구&#34;&gt;유용한 도구&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;텍스트 편집기를 사용해도 되지만, 전용 편집기를 사용하면 더욱 편리하게 작성할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://poedit.net/&#34;&gt;poedit&lt;/a&gt; 이라고 하는 편집기다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;이전에-기여한-사람에게-연락하기&#34;&gt;이전에 기여한 사람에게 연락하기&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;해당 파일을 작업하기 전에 파일에 나와있는 마지막으로 수정한 팀이나 번역가에게 연락을 해야한다. 왜냐하면 중복해서 작업을 하는 불상사를 피하기 위해서이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;번역을-진행한-과정&#34;&gt;번역을 진행한 과정&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/zarofofi6zsu23w/Screen%20Shot%202021-12-18%20at%203.50.06%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;번역할 내용이 있는지 찾아보던 중에, &lt;code&gt;pg_amcheck&lt;/code&gt;라는 도구의 번역 완료율이 저조하다는 것을 발견하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/pjf8slputt3gr3k/Screen%20Shot%202021-12-18%20at%203.41.19%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;우선 번역을 진행하기 전에, 한국 번역 팀에게 연락을 해서, 번역을 진행해도 되는지 물어보았다. &lt;a href=&#34;https://www.postgresql.org/message-id/flat/CAAcByaJGRiZS%2B2QSmds0LNHNw7yPs_MkHk5OF18BvBF%2BgrhYYw%40mail.gmail.com#258f2bc63b2736a805702c7ca52040e6&#34;&gt;메일 주고 받은 내용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/w8tpv44twafce1w/Screen%20Shot%202021-12-18%20at%203.44.08%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다행히 번역을 해도 이상없다는 내용을 받을 수 있었고, 번역을 하고 나서 완료했다는 메일과 함께 &lt;a href=&#34;https://redmine.postgresql.org/issues/7067&#34;&gt;패치 트래커&lt;/a&gt;에 번역한 내용을 정리하여 업로드를 하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/osvmrhizjoev3ig/Screen%20Shot%202021-12-18%20at%203.46.20%20PM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;마무리&#34;&gt;마무리&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;명령어를 번역하기 전에 &lt;code&gt;pg_amcheck&lt;/code&gt;라는 도구가 무엇을 하는지 제대로 알지 못하였지만 정확한 번역을 하기 위해서, &lt;code&gt;pg_amcheck&lt;/code&gt;에서 무슨일을 하는지 문서를 읽어 볼 수 밖에 없었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 해당 도구에 대해서 더 이상 낮설지 않게 됨과 동시에 흥미를 느낄 수 있었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이와 비슷하게 만약 잘 모르거나, 알고 싶은 내용이 있을 때 공식 문서를 번역하면서 배우는 것도 재미있을 것이다. 그리고 번역 하는 도중에 추가하거나 수정하고 싶은 내용이 있다면 주저 하지 말고 기여를 해보는 것도 좋을 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://babel.postgresql.org/&#34;&gt;postgres - babel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://git.postgresql.org/gitweb/?p=pgtranslation/messages.git;a=summary&#34;&gt;pgtranslation - gitlog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.postgresql.org/wiki/NLS&#34;&gt;postgres - Wiki (NLS)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>[세미나 발표] 슬기로운 오픈 소스 생활 | 라인 개발 실록</title>
      <link>https://dongwooklee96.github.io/post/2021/09/10/%EC%84%B8%EB%AF%B8%EB%82%98-%EB%B0%9C%ED%91%9C-%EC%8A%AC%EA%B8%B0%EB%A1%9C%EC%9A%B4-%EC%98%A4%ED%94%88-%EC%86%8C%EC%8A%A4-%EC%83%9D%ED%99%9C-%EB%9D%BC%EC%9D%B8-%EA%B0%9C%EB%B0%9C-%EC%8B%A4%EB%A1%9D.html</link>
      <pubDate>Fri, 10 Sep 2021 22:04:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/09/10/%EC%84%B8%EB%AF%B8%EB%82%98-%EB%B0%9C%ED%91%9C-%EC%8A%AC%EA%B8%B0%EB%A1%9C%EC%9A%B4-%EC%98%A4%ED%94%88-%EC%86%8C%EC%8A%A4-%EC%83%9D%ED%99%9C-%EB%9D%BC%EC%9D%B8-%EA%B0%9C%EB%B0%9C-%EC%8B%A4%EB%A1%9D.html</guid>
      <description>&lt;h3 id=&#34;오픈-소스를-통해서-얻을-수-있는-것&#34;&gt;오픈 소스를 통해서 얻을 수 있는 것&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;기술적-혜택&#34;&gt;기술적 혜택&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;협업을 잘하기 위한 스킬&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;질문 잘하기&lt;/li&gt;
&lt;li&gt;기대치를 정하기&lt;/li&gt;
&lt;li&gt;호감가는 의사소통&lt;/li&gt;
&lt;li&gt;효율적인 의사소통 수단을 사용&lt;/li&gt;
&lt;li&gt;최신 기술 및 모범 사례를 배울 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;경력상-혜택&#34;&gt;경력상 혜택&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;이력서와 포트폴리오를 별개로 관리하자.&lt;/li&gt;
&lt;li&gt;토론, 소개, 정보 공유가 중요하다.&lt;/li&gt;
&lt;li&gt;일상에서 만나는 사람보다 더 다양한 - 문화적 배경, 기술, 경험 사람을 만날 수 있다.&lt;/li&gt;
&lt;li&gt;많은 개발자들이 네트워킹을 어려워하지만, 커뮤니티 사람들의 말을 잘 듣고 정중하게 참여하는 것 부터 시작을 해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;오픈-소스-기여를-준비하기&#34;&gt;오픈 소스 기여를 준비하기&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;기여를-준비하기&#34;&gt;기여를 준비하기&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;기여하고 싶다는 것을 깨닫는다.&lt;/li&gt;
&lt;li&gt;프로젝트를 찾는다.&lt;/li&gt;
&lt;li&gt;할 일을 찾는다.&lt;/li&gt;
&lt;li&gt;환경을 구성한다.&lt;/li&gt;
&lt;li&gt;기여 작업을 한다.&lt;/li&gt;
&lt;li&gt;기여를 제출한다.&lt;/li&gt;
&lt;li&gt;피드백을 받고 코드 개선을 반복한다.&lt;/li&gt;
&lt;li&gt;기여가 받아들여진다.&lt;/li&gt;
&lt;li&gt;다시 처음으로 돌아간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;시작하기-전에-확인해야할-파일들&#34;&gt;시작하기 전에 확인해야할 파일들&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;README&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CONTRIBUTING&lt;/code&gt; 이 규칙을 따르면 더 쉽게 기여가 더 쉽게 받아들여진다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CODE OF CONDUCT&lt;/code&gt; 커뮤니티에서 환영하는 행동, 환영받지 못하는 행동, 멤버가 신고할 수 있는 곳, 신고하는 방법 등을 제시하는 문서&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STYLE GUIDE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;효과적으로-의사소통하기&#34;&gt;효과적으로 의사소통하기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;이슈 트래킹을 잘 찾아보면 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;기여할-오픈-소스-프로젝트를-찾기&#34;&gt;기여할 오픈 소스 프로젝트를 찾기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;자신이 이미 사용하고 있는 소프트웨어 중에 오픈 소스인 것을 찾아보고 기여를 해보자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;플러그인 같은 경우도 간단히 접근하기 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;열린 이슈 중에서 내가 하고자 하는 일이 이슈 목록에 있는지 확인하자. 닫힌 이슈도 지나치지 말고, 내가 기여하고 싶은 부분이 이미 닫힌 이슈에 있더라도, 어떤 이유로 그 아이디어를 추친하지 않기로 했는지를 확인하자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이미 닫힌 이슈를 살펴보는 것도 좋을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;우선 사용자가 되어서 이 프로젝트는 어떤 프로젝트인지 그리고 제작자가 어떤 의도로 기능을 만들었는지 생각을 해보기&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2lL2eRQch2o&#34;&gt;슬기로운 오픈소스 생활 | 라인개발실록&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>멤티어 벤치마크로 아커스 성능 측정하기</title>
      <link>https://dongwooklee96.github.io/post/2021/03/29/%EB%A9%A4%ED%8B%B0%EC%96%B4-%EB%B2%A4%EC%B9%98%EB%A7%88%ED%81%AC%EB%A1%9C-%EC%95%84%EC%BB%A4%EC%8A%A4-%EC%84%B1%EB%8A%A5-%EC%B8%A1%EC%A0%95%ED%95%98%EA%B8%B0.html</link>
      <pubDate>Mon, 29 Mar 2021 22:04:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/29/%EB%A9%A4%ED%8B%B0%EC%96%B4-%EB%B2%A4%EC%B9%98%EB%A7%88%ED%81%AC%EB%A1%9C-%EC%95%84%EC%BB%A4%EC%8A%A4-%EC%84%B1%EB%8A%A5-%EC%B8%A1%EC%A0%95%ED%95%98%EA%B8%B0.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112841192-2c46b100-90db-11eb-8c96-0eb41685ebb4.png&#34; alt=&#34;Screen Shot 2021-03-29 at 10 06 19 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;아커스에 내가 작성한 코드를 도입하고 나서, 얼마만큼의 성능 개선이 이루어졌는지 궁금했다. 따라서 오픈 소스 컨트리뷰톤 행사를 참여할 때, 도움을 주셨던 멘토님이 &lt;a href=&#34;https://github.com/RedisLabs/memtier_benchmark&#34;&gt;memtier_benchmark&lt;/a&gt; 라는 툴을 알려주셨다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;물론 멘토님께서는 눈에 띄는 변화는 없을 것이라고 하셨다. 하지만, 내가 작성한 코드가 과연 성능 개선이 있을까 궁금해서 이를 측정해보고 싶었다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/RedisLabs/memtier_benchmark.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112842051-1f768d00-90dc-11eb-942c-9e1b54aed4f9.png&#34; alt=&#34;Screen Shot 2021-03-29 at 10 14 19 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;README&lt;/code&gt; 문서에 나와있는데로, 의존성 패키지들을 다운로드 받고 이를 빌드 하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112843612-b98b0500-90dd-11eb-9d1f-7ea73465e0ec.png&#34; alt=&#34;Screen Shot 2021-03-29 at 10 25 46 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;귀찮은 의존성들을 모두 설치해주고, &lt;code&gt;make&lt;/code&gt;를 해주면, 드디어 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112844625-e2f86080-90de-11eb-93d3-880f0eb66c29.png&#34; alt=&#34;memtier&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다음은, &lt;code&gt;help&lt;/code&gt; 명령어를 실행한 모습이다. 많은 옵션이 있지만 나는 다음과 같이 사용했다. 우선 아커스 서버를 띄운다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112845032-57330400-90df-11eb-9f08-eb62de685aad.png&#34; alt=&#34;arcus&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;나는 쉘 스크립트를 이용해서 아커스 서버를 실행시켰는데, 포트번호 11216 인것 만 확인하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112845376-c4469980-90df-11eb-8871-e5c75b1f26d5.png&#34; alt=&#34;arcus&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서버를 띄우면 다음과 같은 화면이 뜨고, 이제 &lt;code&gt;memtier_benchmark&lt;/code&gt;를 다음의 옵션을 설정해서 실행을 시키면 끝난다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112845383-c6105d00-90df-11eb-81d9-4e9afe5634b7.png&#34; alt=&#34;memtier&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./memtier_benchmark -s 127.0.0.1 -p 11216 -t 4 -c 50 -P memcache_text
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;위에 작성한 명령어는 &lt;code&gt;localhost&lt;/code&gt; 주소의 &lt;code&gt;11216&lt;/code&gt; 포트로 쓰레드 4개와 커넥션 50개를 이용하여 &lt;code&gt;memcached&lt;/code&gt; 프토로콜 테스트를 하겠다는 뜻이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112846408-fc9aa780-90e0-11eb-86e8-ea810284c90a.png&#34; alt=&#34;Screen Shot 2021-03-29 at 10 48 58 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테스트가 모두 끝나면 결과가 나온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RedisLabs/memtier_benchmark&#34;&gt;memtier_benchmark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
