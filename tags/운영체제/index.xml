<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>운영체제 on 개발자 이동욱</title>
    <link>/tags/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/</link>
    <description>Recent content in 운영체제 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sat, 03 Apr 2021 18:57:24 +0900</lastBuildDate>
    
	<atom:link href="/tags/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>좀비 프로세스와 고아 프로세스</title>
      <link>/post/2021/04/03/%EC%A2%80%EB%B9%84-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EA%B3%A0%EC%95%84-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4/</link>
      <pubDate>Sat, 03 Apr 2021 18:57:24 +0900</pubDate>
      
      <guid>/post/2021/04/03/%EC%A2%80%EB%B9%84-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EA%B3%A0%EC%95%84-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4/</guid>
      <description>좀비(zombie) 프로세스란    프로세스가 종료 될 때, 마지막 문장의 실행을 끝내고, exit() 시스템 호출을 사용하여 운영체제에게 자신의 삭제를 요청하면서 종료된다.
  이 시점에서, 프로세스는 자신의 부모가 호출한 wait() 시스템 호출을 통해서, 상태 값을 반환할 수 있고, 물리 메모리와 가상 메모리, 열린 파일, 입출력 버퍼를 포함한 프로세스의 모든 자원이 운영체제로 반납된다.
  부모 프로세는 wait() 시스템 호출을 사용하여 자식 프로세스가 종료할 때를 기다릴 수 있고, 부모가 자식의 종료 상태를 얻어 낼 수 있도록 하나의 인자를 전달 받는다.</description>
    </item>
    
    <item>
      <title>프로그램 실행시 메모리 구조 및 실제로 확인해보는 방법</title>
      <link>/post/2021/04/03/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%8B%A4%ED%96%89%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0-%EB%B0%8F-%EC%8B%A4%EC%A0%9C%EB%A1%9C-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EB%8A%94-%EB%B0%A9%EB%B2%95/</link>
      <pubDate>Sat, 03 Apr 2021 18:09:24 +0900</pubDate>
      
      <guid>/post/2021/04/03/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%8B%A4%ED%96%89%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0-%EB%B0%8F-%EC%8B%A4%EC%A0%9C%EB%A1%9C-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EB%8A%94-%EB%B0%A9%EB%B2%95/</guid>
      <description>컴퓨터 구조 시간때 배웠듯이 프로그램이 메모리에 올라가면 다음과 같은 구조로 메모리가 할당되고 실행이 된다.
 디스크에 저장되어 있는 프로그램이 메모리에 올라가게 된다. 메모리에는 크게 코드, 스택, 힙 영역이 있다.  이를 리눅스에서 확인해보려면 다음과 같은 명령어를 사용하면 된다.
cat /proc/self/maps  이 명령어가 뜻하는 바는 cat이라는 프로그램을 실행했을 때의 메모리 구조를 의미한다. 여기서 self는 자기 자신을 의미한다.   위에서부터 코드 영역, 힙 영역, 스택이 메모리에 할당되어 있는 것을 확인할 수 있다.</description>
    </item>
    
    <item>
      <title>리눅스는 특별한 프로그램인가?</title>
      <link>/post/2021/04/03/%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8A%94-%ED%8A%B9%EB%B3%84%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%B8%EA%B0%80/</link>
      <pubDate>Sat, 03 Apr 2021 01:09:24 +0900</pubDate>
      
      <guid>/post/2021/04/03/%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8A%94-%ED%8A%B9%EB%B3%84%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%B8%EA%B0%80/</guid>
      <description>리눅스는 과연 특별한가?  리눅스 파일이 다른 실행 파일과 다른지 알아보기 위해서 커널을 실제로 빌드 해보고 일반 실행파일과 다른점이 있는지 알아보았다.
다음은 리눅스 커널을 make 명령어를 통해서, 빌드한 모습이다. 빌드를 마치게 되면 vmlinux 라는 실행 파일이 나오게 된다.
이를 file 도구를 통해서 알아보았다. file 도구는 파일이 어떤 타입인지를 알려주는 리눅스 도구이다.
man을 통해서 메뉴얼을 확인해보면 더욱 자세한 사용법을 알 수 있다.
리눅스 실행 파일과 간단한 프로그램을 만들어서 비교한 결과, 거의 같은 파일이라는 것을 확인할 수 있었다.</description>
    </item>
    
    <item>
      <title>운영체제의 역할 및 리눅스를 공부할 때 중요한 핵심 개념</title>
      <link>/post/2021/04/03/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%97%AD%ED%95%A0-%EB%B0%8F-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%A0-%EB%95%8C-%EC%A4%91%EC%9A%94%ED%95%9C-%ED%95%B5%EC%8B%AC-%EA%B0%9C%EB%85%90/</link>
      <pubDate>Sat, 03 Apr 2021 01:09:24 +0900</pubDate>
      
      <guid>/post/2021/04/03/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%97%AD%ED%95%A0-%EB%B0%8F-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%A0-%EB%95%8C-%EC%A4%91%EC%9A%94%ED%95%9C-%ED%95%B5%EC%8B%AC-%EA%B0%9C%EB%85%90/</guid>
      <description>예전에 시스템 프로그래밍을 조금 더 잘 알고 싶어서 리얼 리눅스에서 강의를 들은 적이 있는데, 그 때는 노션에 정리를 하던 시절이라서 블로그에 게시하지 못했다. 따라서 그때 정리한 개념을 블로그에 글로 작성해보고 다시 운영체제에 대해서 복습하였다.
리눅스를 공부할 때 중요한 개념  리눅스를 공부할 때는 다음과 같은 개념이 중요하다고 했다.
  소프트웨어 기본 원리 : 당연한 말이지만, 소프트웨어의 기본 동작 원리를 제대로 아는 것이 중요하다.
  메모리 액세스 원리 : 운영체제에서 메모리를 어떻게 액세스 하고 관리하는지 아는 것이 중요하다.</description>
    </item>
    
  </channel>
</rss>