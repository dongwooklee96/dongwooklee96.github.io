<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>정규표현식 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/categories/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D.html</link>
    <description>Recent content in 정규표현식 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Wed, 14 Jul 2021 21:00:39 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/categories/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>정규표현식</title>
      <link>https://dongwooklee96.github.io/post/2021/07/14/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D.html</link>
      <pubDate>Wed, 14 Jul 2021 21:00:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/07/14/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;기본적인 정규 표현식 문법을 익히고 나서, 나중에 사용하거나 이와 관련된 코드를 볼 일이 있을 때 기억이 나도록 하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;정규-표현-regular-expression&#34;&gt;정규 표현 (Regular Expression)&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;정규 표현식은 일련의 문자열 패턴을 정형화된 방법을 통해서 찾을 수 있도록 도와주는 문법이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다양한 언어의 정규 표현 실행을 위한 함수는 서로 다르지만, 정규 표현 자체는 개발 언어에서 동일하게 적용된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;반복자-repeaters---&#34;&gt;반복자 (Repeaters): `*, +,&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;해당 키워드는 문자열이 얼마나 많이 반복되는지 지정해 줄 때 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정규 표현에 &lt;code&gt;*&lt;/code&gt;를 사용하면 어떤 문자가 0번 혹은 그 이상 나올 수 있다는 것을 표현한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&#39;a * b&#39; 이면 &#39;a&#39; 와 &#39;b&#39; 사이에 0번 혹은 그 이상 출현할 수 있다는 것을 의미한다.
예를 들면, &#39;b&#39;, &#39;ab&#39;, &#39;aab&#39;, &#39;aaab&#39;, &#39;aa......b&#39;가 올 수 있다.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; (더하기)는 &lt;code&gt;*&lt;/code&gt;와 거의 비슷하지만, &lt;code&gt;*&lt;/code&gt;와 다른점은 최소 1번은 나온다는 의미를 가진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&#39;a + b&#39;이면 &#39;ab&#39;, &#39;aaab&#39;, &#39;aa.....b&#39;는 될 수 있지만, &#39;b&#39;는 될 수 없다.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt;(중괄호)는 중괄호에 숫자를 포함하여 문자열 패턴의 반복 횟수를 설정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;`a{3}b` 이면, &#39;aaab&#39;만 된다.
&#39;a{3}b&#39; 이면, &#39;aaab&#39;, &#39;aaaab&#39;, &#39;aaa...b&#39;와 같이 최소 3이상 a가 나올 수 있다는 의미이다.
&#39;a{3, 4}b&#39;이면 &#39;aaab&#39;, &#39;aaaab&#39;가 된다. 3 ~ 4의 &#39;a&#39; 길이를 설정한다.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;와일드-카드-wild-card-&#34;&gt;와일드 카드 (Wild Card): &lt;code&gt;.&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;어떤 패턴에 대해서는 정규 표현식으로 만들기 어려운 경우가 있다. 이때 편리하게 사용하는 것이 와일드 카드인 &lt;code&gt;.&lt;/code&gt; (점) 키워드이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 키워드는 해당 자리에 어떤 문자든 가능하다는 의미이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&#39;.&#39;이면 하나의 어떤 문자로든 매칭될 수 있다.
&#39;.*&#39; 이면, 다양한 (모든) 길이의 문자열을 찾는다.
&#39;a.b&#39;이면, &#39;aab&#39;, &#39;abc&#39;, ..., &#39;a b&#39;, &#39;a/b&#39; 등과 같은 모든 문자가 대응될 수 있다. 즉 a로 시작하여 b로 끝나는 길이 3의 모든 문자열로 정의 된다.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;선택-문자-optional-character-&#34;&gt;선택 문자 (Optional Character) &lt;code&gt;?&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;lsquo;color&amp;rsquo;, &amp;lsquo;colour&#39;과 같이 동일한 의미를 가지는 단어가 다른 스펠링으로 쓰이는 경우가 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이런 경우 &lt;code&gt;?&lt;/code&gt; 키워드를 통해서 &amp;lsquo;u&amp;rsquo; 문자를 0 혹은 1개가 있을 수 있다는 것을 나타낼 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;탈자-부호-caret-&#34;&gt;탈자 부호 (Caret): &lt;code&gt;^&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;시작 문자를 지정할 수 있다. 특정 문자 혹은 특정 문자열을 시작으로 하는 문자열 패턴을 만들기 위해 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&#39;^a.*&#39; 이면 &#39;a&#39;로 시작하는 모든 문자열을 뜻한다.
&#39;a{2}.*2&#39;이면 &#39;aa&#39;로 시작하는 모든 문자열이다.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;달러-문자dollar-&#34;&gt;달러 문자(Dollar): &lt;code&gt;$&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt; 과는 정 반대로 마지막 문자 혹은 문자열을 지정한다. 특정 문자 혹은 문자열이 마지막에 지녀야하는 문자열 패턴을 만들 때 사용한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;.*b$&#39; 이면 마지막 문자 혹은 문자열을 지정한다. 특정 문자 혹은 문자열이 마지막에 지녀야 하는 문자열 패턴을 만들 때 사용한다.
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&#39;.b$&#39;이면, &#39;b&#39;로 끝나는 모든 문자열
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;문자-클래스-charactert-classes-&#34;&gt;문자 클래스 (Charactert classes): &lt;code&gt;[]&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;[cnf]이면 &amp;lsquo;c&amp;rsquo;, &amp;lsquo;d&#39;혹은 f가 될 수 있다,&lt;/li&gt;
&lt;li&gt;[^cdf] 이면 &amp;lsquo;c&amp;rsquo;, &amp;lsquo;d&amp;rsquo;, f를 제외한 나머지 문자열&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;그룹-문자-grouping-character-&#34;&gt;그룹 문자 (Grouping character): &lt;code&gt;()&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;특정 문자의 조합 패턴을 검색하는 경우에 사용된다.&lt;/li&gt;
&lt;li&gt;중괄호를 이용하여, 그룹화를 하고, 이 그룹을 위에 언급한 키워드와 조합하여 사용이 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;`(ab)+` 이면 &#39;ab&#39;, &#39;abab&#39;, &#39;ababab...&#39;가 가능하다.
&#39;^(th).*&#39;이면 &#39;th&#39;로 시작하는 모든 문자와 매칭이 가능하다.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;수직선-vertical-bar-or-opertation-&#34;&gt;수직선 (Vertical Bar, OR Opertation): &lt;code&gt;|&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;수직선은 비트 연산의 OR 연산과 비슷한 역할을 한다.&lt;/li&gt;
&lt;li&gt;함께 사용된 패턴 중 하나를 선택 및 찾기를 가능하게 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&#39;th&#39;(is|e|at) 이면 &#39;this&#39;, &#39;the&#39;, &#39;that&#39;이 매칭이 될 수 있다.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;역슬레시-back-slash-espace-charater-&#34;&gt;역슬레시 (Back-slash, Espace charater): &lt;code&gt;\&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예를 들어, 키워드 중 하나인 &lt;code&gt;*&lt;/code&gt;를 문자로 찾고 싶을 경우가 있을 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;앞서 소개한 모든 키워드 문자가 대상이 될 수 있는데, 해당 키워드를 문자 그대로 찾기 위한 방법으로 역슬래시를 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&#39;[0-9]\*[0-9]\+[0-9]&#39; 이면, &#39;1 * 2 + 3 = 7&#39;과 같은 문자열이 있다면, &#39;1 * 2 + 3&#39;을 추출할 수 있다.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;느낀점&#34;&gt;느낀점&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;평소에 &lt;code&gt;VIM&lt;/code&gt;을 쓴것이 정규 표현식을 외우는데 많은 도움이 되었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=267996120&#34;&gt;쓰면서 익히는 알고리즘과 자료구조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
