<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>프론트엔드 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/tags/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C.html</link>
    <description>Recent content in 프론트엔드 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sat, 16 Apr 2022 13:20:39 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/tags/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>useReducer로 복잡한 상태 처리하기</title>
      <link>https://dongwooklee96.github.io/post/2022/04/16/usereducer%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%83%81%ED%83%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0.html</link>
      <pubDate>Sat, 16 Apr 2022 13:20:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/04/16/usereducer%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%83%81%ED%83%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0.html</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import {useState} from &amp;#34;react&amp;#34;;

const firstUser = {
    id: &amp;#34;0391-3233-3201&amp;#34;,
    firstName: &amp;#34;Bill&amp;#34;,
    lastName: &amp;#34;Wilson&amp;#34;,
    city: &amp;#34;Missoula&amp;#34;,
    state: &amp;#34;Montana&amp;#34;,
    email: &amp;#34;bwilson@mtnwilsons.com&amp;#34;,
    admin: false
}

function User() {
    const [user, setUser] = useState(firstUser);

    return (
        &amp;lt;p&amp;gt;Email: {user.email}&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;Location: {user.city}, {user.state}&amp;lt;/p&amp;gt;
        &amp;lt;button&amp;gt;make admin&amp;lt;/button&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;상태를 관리할 때 일반적으로 저지르는 실수로 상태를 덮어쓰는 경우가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;button
    onClick={() =&amp;gt; {setUser({ admin: true }); }}
&amp;gt;
    Make Admin
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;이렇게 하면 &lt;code&gt;firstUser&lt;/code&gt;의 상태를 덮어써서 방금 &lt;code&gt;setUser&lt;/code&gt; 함수에 전달한 &lt;code&gt;{admin:true}&lt;/code&gt;로 변경한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;button onClick={() =&amp;gt; {setUser({ ...user, admin: true); }}&amp;gt;
  Make Admin
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;이렇게 하면 초기 상태를 받아서 새로운 키 / 값 쌍인 &lt;code&gt;{admin: true}&lt;/code&gt; 를 넣는다. 코드의 모든 &lt;code&gt;onClick&lt;/code&gt; 에 대해서 코드를 이런 식으로 바꿔야 한다. 이 과정에서 실수를 저질르기가 쉬운데 리듀서를 사용하면 이를 쉽게 해결 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function User() {
    const [user, setUser] = useReducer(
        (user, newDetails) =&amp;gt; ({...user, ...newDetails }),
        firstUser
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이제 새로운 상태 값을 리듀서에 보내면 프로퍼티가 객체에 추가되거나 기존 프로퍼티가 갱신된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상태가 여러 하위 값으로 구성되거나 다음 상태가 이전 상태에 의존적일 때 이런 패턴이 유용하다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=273792432&#34;&gt;러닝 리액트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>리액트 훅스 규칙</title>
      <link>https://dongwooklee96.github.io/post/2022/04/16/%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%9B%85%EC%8A%A4-%EA%B7%9C%EC%B9%99.html</link>
      <pubDate>Sat, 16 Apr 2022 13:20:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/04/16/%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%9B%85%EC%8A%A4-%EA%B7%9C%EC%B9%99.html</guid>
      <description>&lt;h3 id=&#34;훅스의-규칙&#34;&gt;훅스의 규칙&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;훅스를 사용할 때는 버그나 예기치 못한 동작을 방지하기 위해서 염두해 둬야 하는 몇 가지 규칙이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;훅스는-컴포넌트의-영역-안에서만-작동한다&#34;&gt;훅스는 컴포넌트의 영역 안에서만 작동한다&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;리액트 컴포넌트 내부에서만 훅스를 호출해야 한다. 그리고 커스텀 훅을 추가할 수도 있지만, 이런 커스텀 훅도 결국에는 컴포넌트에 추가되어야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;훅스는 일반 자바스크립트가 아니라, 리액트 패턴이라는 점을 염두하라, 하지만 다른 라이브러리에서도 훅을 모델링하고 훅과 협력하는 경우가 많아졌다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;기능을-여러-훅으로-나누면-좋다&#34;&gt;기능을 여러 훅으로 나누면 좋다&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;여러 기능이 있을 때 구독과 관련된 모든 기능을 한 효과에, 사운드와 관련한 모든 기능을 다른 효과에 넣었다. 이렇게 하니까 코드가 읽기 쉬워졌는데, 효과를 분리하면 다른 이점도 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;훅스가 순서대로 호출되기 때문에, 각 훅을 작게 유지하면 좋다. 호출되고 나면 리액트는 훅의 값을 배열에 저장하고 추적할 수 있게 해준다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;최상위-수준에서만-훅을-호출해야-한다&#34;&gt;최상위 수준에서만 훅을 호출해야 한다&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;리액트 함수의 최상위 수준에서만 훅을 사용해야 한다. 조건문이나 루프, 내포된 함수 안에서 훅을 사용하면 안된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import {useEffect, useState} from &amp;#34;react&amp;#34;;

function Counter() {
    const [count, setCount] = useState(0);

    if (count &amp;gt; 5) {
        useEffect(() =&amp;gt; {
            ...
        });
    }
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt;를 &lt;code&gt;if&lt;/code&gt; 문 안에서 사용하면 &lt;code&gt;count&lt;/code&gt; 값이 5보다 클때만 호출되므로 이로 인해서 배열 값이 사라진다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;리액트에서는 이 배열안에 있는 효과의 위치가 중요하지, 효과가 어떻게 저장되어있는지는 중요하지 않다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;물론 조건에 따른 로직을 사용할 수 없다는 말은 아니다. 하지만 위와 같은 방식이 아니라, 아래와 같은 방식으로 조정해야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function Counter() {
    const [count, setCount] = useState(0);
    const [checked, toggle] = useState(
        count =&amp;gt; (count &amp;lt; 5) ? undefined : !count, (count &amp;lt; 5) ? undefined : &amp;#34;&amp;#34;
    );

    useEffect(() =&amp;gt; {

    });

}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;훅 안에 &lt;code&gt;if&lt;/code&gt; 문이나 루프나 다른 조건을 내포시키는 방식이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;조건 로직과 마찬가지로 비동기적인 동작도 훅 안에 넣을 필요가 있는데, &lt;code&gt;useEffect&lt;/code&gt; 는 첫 번째 인자로 프로미스가 아니라, 함수로 받는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 &lt;code&gt;useEffect(async () =&amp;gt; {})&lt;/code&gt;와 같이 첫 번째 인자에 &lt;code&gt;async&lt;/code&gt; 함수를 넣을 수 없다. 하지만 아래와 같이 내포된 함수 안에서 &lt;code&gt;async&lt;/code&gt; 함수를 만들 수 는 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;useEffect(() =&amp;gt; {
        (
         async () =&amp;gt; {
         await SomePromise();
         })();
});
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;언제-리펙터링-하면-좋은가&#34;&gt;언제 리펙터링 하면 좋은가?&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;일반적으로 &lt;code&gt;useMemo()&lt;/code&gt;, &lt;code&gt;useCallback()&lt;/code&gt;, &lt;code&gt;memo&lt;/code&gt;가 과용되는 경향이 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;리액트는 빨리 작동되도록 설계되었고 컴포넌트가 많이 렌더링 되도록 되어있다. 따라서 성능 최적화가 필요할 때만 위와같은 훅을 사용하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;useCallback()&lt;/code&gt; 이나 &lt;code&gt;useMemo()&lt;/code&gt;가 좋은 생각인것 같아서 아무데서나 사용하면 오히려 성능이 떨어질 수 있다는 점을 주의하고 코드를 리펙터링할 때는 항상 목표를 설정하는 것이 중요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=273792432&#34;&gt;러닝 리액트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SHADOW DOM 이란 (draft)</title>
      <link>https://dongwooklee96.github.io/post/2021/04/15/shadow-dom-%EC%9D%B4%EB%9E%80-draft.html</link>
      <pubDate>Thu, 15 Apr 2021 22:07:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/04/15/shadow-dom-%EC%9D%B4%EB%9E%80-draft.html</guid>
      <description>&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM&#34;&gt;Using shadow DOM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>디바운스란? (draft)</title>
      <link>https://dongwooklee96.github.io/post/2021/04/14/%EB%94%94%EB%B0%94%EC%9A%B4%EC%8A%A4%EB%9E%80-draft.html</link>
      <pubDate>Wed, 14 Apr 2021 18:54:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/04/14/%EB%94%94%EB%B0%94%EC%9A%B4%EC%8A%A4%EB%9E%80-draft.html</guid>
      <description>&lt;h3 id=&#34;디바운스란&#34;&gt;디바운스란?&lt;/h3&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>리액트에서 구글 번역기가 번역하면서, DOM 트리를 변경해 렌더링이 되지 않는 현상</title>
      <link>https://dongwooklee96.github.io/post/2021/03/30/%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-%EA%B5%AC%EA%B8%80-%EB%B2%88%EC%97%AD%EA%B8%B0%EA%B0%80-%EB%B2%88%EC%97%AD%ED%95%98%EB%A9%B4%EC%84%9C-dom-%ED%8A%B8%EB%A6%AC%EB%A5%BC-%EB%B3%80%EA%B2%BD%ED%95%B4-%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%ED%98%84%EC%83%81.html</link>
      <pubDate>Tue, 30 Mar 2021 13:20:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/30/%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-%EA%B5%AC%EA%B8%80-%EB%B2%88%EC%97%AD%EA%B8%B0%EA%B0%80-%EB%B2%88%EC%97%AD%ED%95%98%EB%A9%B4%EC%84%9C-dom-%ED%8A%B8%EB%A6%AC%EB%A5%BC-%EB%B3%80%EA%B2%BD%ED%95%B4-%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%ED%98%84%EC%83%81.html</guid>
      <description>&lt;h3 id=&#34;문제-상황&#34;&gt;문제 상황&lt;/h3&gt;
&lt;p&gt;개발을 진행하다가,  &lt;code&gt;PM&lt;/code&gt;에서 데이터가 이상하다고, 확인해달라는 요청을 받았다. 확인을 해본 결과, 데이터베이스 및 서버에서 내려오는 데이터는 정상이였다. 하지만 화면에서 업데이트를 시키지 않고, 기존에 데이터가 그대로 남아있어 화면 업데이트가 안되는 상황이였다. 재현을 해봤을 때는 아무런 문제가 없어서 혹시나 하고 구글 번역기를 켜고 재현을 해보았을 때 버그가 발생하였다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112934001-d82fe100-915b-11eb-917b-9405fadc17da.png&#34; alt=&#34;Screen Shot 2021-03-30 at 1 28 22 PM&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;원인&#34;&gt;원인&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112934219-407ec280-915c-11eb-8a90-c8be38c7c471.png&#34; alt=&#34;Screen Shot 2021-03-30 at 1 31 30 PM&#34;&gt;&lt;/p&gt;
&lt;p&gt;검색을 해보니, 비슷한 현상이 이미 보고가 되어있었고, 원인을 파악하기 위해서 살펴보았다.&lt;/p&gt;
&lt;p&gt;구글 번역기를 켰을 때 변경된 텍스트가 업데이트 되지 않는 이유는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;웹 사이트에서 구글 번역기를 켰을 때 번역기가 텍스트를 &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; 태그로 대체한다. 하지만 리액트에서 변경된 것을 감지하지 못해서, 이미 &lt;code&gt;DOM&lt;/code&gt; 트리에서 사라진 객체를 참조한다는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;텍스트는 조건부로 렌더링이 되며, 부모 노드의 유일한 하위 노드가 아니다. 그런 후에 텍스트 노드가 제거되면 &lt;code&gt;React&lt;/code&gt;는 &lt;code&gt;parent.removeChild(textNode)&lt;/code&gt;를 호출하고 텍스트 노드가 더 이상 상위 노드의 하위 노드가 아니기 때문에 삭제한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조건부로 렌더링 된 텍스트 노드가 부모의 유일한 자식일 때는 던지지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;텍스트 노드가 앞의 노드가 조건 부로 렌더링되고, 그런 다음에 노드가 삽입 될 때 &lt;code&gt;parent.insertBefore(someNode, textNode)&lt;/code&gt;를 호출하고 &lt;code&gt;textNode&lt;/code&gt;가 더이상 상위 노드가 아니기 때문에 예외를 던진다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;해결책&#34;&gt;해결책&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112934676-39a47f80-915d-11eb-81b9-2cf4771030db.png&#34; alt=&#34;Screen Shot 2021-03-30 at 1 38 29 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해결책은, 텍스트를 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 태그로 감싸서 내용이 &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; 태그로 대체되더라도 리액트에서 참조하는 노드가 &lt;code&gt;DOM&lt;/code&gt; 트리에서 사라지지 않게 하는 방법이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react/issues/11538&#34;&gt;Make React resilient to DOM mutations from Google Translate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
