<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>책 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/categories/%EC%B1%85.html</link>
    <description>Recent content in 책 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sat, 15 Apr 2023 16:20:39 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/categories/%EC%B1%85/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>선형대수학 공부 - 필드</title>
      <link>https://dongwooklee96.github.io/post/2023/04/15/%EC%84%A0%ED%98%95%EB%8C%80%EC%88%98%ED%95%99-%EA%B3%B5%EB%B6%80-%ED%95%84%EB%93%9C.html</link>
      <pubDate>Sat, 15 Apr 2023 16:20:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2023/04/15/%EC%84%A0%ED%98%95%EB%8C%80%EC%88%98%ED%95%99-%EA%B3%B5%EB%B6%80-%ED%95%84%EB%93%9C.html</guid>
      <description>&lt;h3 id=&#34;필드&#34;&gt;필드&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;선형 대수학에서 말하는 필드는 수학적 체계를 나타내는 용어로 아래와 같은 조건을 만족하는 비어있지 않는 집합 F 와 두가지 연산 즉, 덧셈하고 곱셈으로 구성된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. 덧셈에 대한 결합 법칙: a + (b + c) = (a + b) + c
2. 덧셈에 대한 항등원 : a + 0 = a
3. 덧셈에 대한 역원 : a + (-a) = 0
4. 덧셈에 대한 교환 법칙 : a + b = b + a
5. 곱셈에 대한 결합 법칙 : a * (b * c) = (a * b) * c
6. 곱셈에 대한 항등원 : a * 1 = a
7. 곱셈에 대한 역원 : a * a^(-1) = 1 (단, a ≠ 0)
8. 곱셈에 대한 교환 법칙 : a * b = b * a
9. 분배 법칙 : a * (b + c) = a * b + a * c
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;선형대학에서-필드가-중요한-이유&#34;&gt;선형대학에서 필드가 중요한 이유&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;선형대수학에서 필드가 중요한 이유는 여러가지가 있는데, 필드는 벡터 공간과 선형 변환, 그리고 선형 방정식에 연관된 여러 개념들의 기초를 제공하며, 이러한 개념들은 선형 대수학의 핵심적인 부분이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;백터 공간의 기초 : 백터 공간의 필드 위에 정의된다. 즉, 벡터들의 성분은 해당 필드의 원소로 구성되어있다. 필드가 주어지면 벡터 공간의 구조와 성질이 결정되며, 벡터 공간에서의 연산 (덧셈, 스칼라 곱) 은 체의 연산에 의존한다.&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;선형 방정식과 연립 선형 방정식은은 필드 위에서 정의되며, 연립 선형 방정식의 해를 구하는 과정에서 가우스 소거법, 가우스-조르당 소거법 등의 방법을 사용하며, 이러한 방법들은 필드의 연산을 기반으로 한다.&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;선형 변환은 필드 위의 백터 공간의 사이의 함수로 정의되며, 행렬은 선형 변환을 나타내는 표현이다. 행렬의 연산 (덧셈, 곱셈, 역행렬)은 필드의 연산에 의존하며, 행렬의 성질과 행렬식의 계산도 필드와 관련되어 있다.&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;고유값, 고유벡터 및 대각화 : 필드 위의 백터공간에서 선형 변환의 고유값과 고유 벡터를 찾을 수 있으며, 이를 통해 대각화 가능한 경우 행렬을 대각화 할 수 있다. 이러한 과정에서도 필드의 연산이 사용된다.&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;다양한 수학 및 공학분야의 응용 : 필드는 선형 대수학 뿐만 아니라 다양한 수학 및 공학 분야에서 중요한 역할을 한다. 예를 들어서 &lt;code&gt;finite field&lt;/code&gt;는 암호학, 에러 검출 및 수정 코드, 다항식 보간 등에서 사용되며, 복소수 필드는 공학에서의 신호처리, 제어 이론 등에 활용된다.&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;정수의 집합인 &lt;code&gt;Z = {... , -2, -1, 0, 1, 2, ...}&lt;/code&gt; 는 실수 집합 &lt;code&gt;R&lt;/code&gt;의 부분 집합이며, 이는 두 정수 &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;이 &lt;code&gt;Z&lt;/code&gt;에 속하면 해당 정소의 합 &lt;code&gt;m + n&lt;/code&gt; 과 곱 &lt;code&gt;m * n&lt;/code&gt; 역시 &lt;code&gt;Z&lt;/code&gt;에 속하게 되어, 연산을 통해서 다시 &lt;code&gt;Z&lt;/code&gt;의 원소가 되는 것을 말한다. 이때 합과 곱의 연산은 항상 상위 집합인 &lt;code&gt;R&lt;/code&gt; 에서 정의된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;부분-집합&#34;&gt;부분 집합&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;F&lt;/code&gt;의 부분 집합 &lt;code&gt;F_0&lt;/code&gt; 은 &lt;code&gt;F&lt;/code&gt; 의 연산에 대해서 닫혀있다. 따라서 해당 부분 집합은 &lt;code&gt;F&lt;/code&gt; 필드에서 성립할 수 있는 연산 조건이 모두 만족한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ \text{if} \ a,b \in F_0, \text{then} \ a + b \in F_0 \ and \ ab \in F_0 $$&lt;/p&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>코딩 더 매트릭스 - 챕터 4 (선형공간)</title>
      <link>https://dongwooklee96.github.io/post/2023/04/10/%EC%BD%94%EB%94%A9-%EB%8D%94-%EB%A7%A4%ED%8A%B8%EB%A6%AD%EC%8A%A4-%EC%B1%95%ED%84%B0-4-%EC%84%A0%ED%98%95%EA%B3%B5%EA%B0%84.html</link>
      <pubDate>Mon, 10 Apr 2023 20:20:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2023/04/10/%EC%BD%94%EB%94%A9-%EB%8D%94-%EB%A7%A4%ED%8A%B8%EB%A6%AD%EC%8A%A4-%EC%B1%95%ED%84%B0-4-%EC%84%A0%ED%98%95%EA%B3%B5%EA%B0%84.html</guid>
      <description>&lt;h2 id=&#34;백터-공간&#34;&gt;백터 공간&lt;/h2&gt;
&lt;h3 id=&#34;선형-결합-일차결합&#34;&gt;선형 결합 (일차결합)&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v1, v2 ... vn&lt;/code&gt; 각각을 백터라고 할 때 선형 결합을 아래와 같은 합으로 정의한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
a_1v_1 + &amp;hellip; + a_nv_n
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;여기서, &lt;code&gt;a1, ..., an&lt;/code&gt; 은 스칼라이다. 이 선형결합에서 &lt;code&gt;a1, ..., an&lt;/code&gt; 각각은 계수라고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;a1&lt;/code&gt;은 &lt;code&gt;v1&lt;/code&gt;의 계수이고, &lt;code&gt;a2&lt;/code&gt;는 &lt;code&gt;v2&lt;/code&gt;의 계수이며, &lt;code&gt;an&lt;/code&gt; 은 &lt;code&gt;vn&lt;/code&gt;의 계수이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 선형 결합에서 모든 계수가 영이면, 자명한(&lt;code&gt;trivial&lt;/code&gt;) 선형결합이라고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;선형-결합의-사용&#34;&gt;선형 결합의 사용&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;주식-포트폴리오-예제&#34;&gt;주식 포트폴리오 예제&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;주식 포트폴리오 &lt;code&gt;D&lt;/code&gt;를 주식들의 집합이라고 할 때 &lt;code&gt;R&lt;/code&gt; 상의 &lt;code&gt;D&lt;/code&gt; 벡터는 포트폴리오를 나타낸다. 이를 각 주식을 소유하고 있는 주식의 수에 맵핑한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;뮤츄얼 펀드의 각 소유 주식 수는 어떤 특정 분량에 대한 소유권을 나태내며, 그러므로 &lt;code&gt;D&lt;/code&gt; 벡터에 의해서 표현될 수 있다. 그러면 주식의 소유권은 아래의 선형 결합에 의해서 나타내진다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
a_1v_1 + &amp;hellip; + a_nv_n
$$&lt;/p&gt;
&lt;h4 id=&#34;공장-제품&#34;&gt;공장 제품&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;공장에서 5가지 리소스 금속, 콘크리트, 플라스틱, 물, 그리고 전기를 사용해서 물건을 만든다고 가정할 때 이 공장은 다섯 종류의 다른 제품을 만들 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;금속&lt;/th&gt;
          &lt;th&gt;콘크리트&lt;/th&gt;
          &lt;th&gt;플라스틱&lt;/th&gt;
          &lt;th&gt;물&lt;/th&gt;
          &lt;th&gt;전기&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;garden gnome&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;1.3&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.8&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.4&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;hula hoop&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;1.5&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.4&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.3&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;slinky&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;0.25&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.7&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;silly putty&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.3&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.7&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.5&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;salad shooter&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.15&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.5&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.4&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;.8&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; 번째 제품의 리소스 사용량은 벡터에 저장되면 예를 들어서 &lt;code&gt;gnome&lt;/code&gt; 제품은 다음과 같이 표현된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
v_gnome = Vec(D, {&amp;lsquo;콘크리트&amp;rsquo;: 1.3, &amp;lsquo;플라스틱&amp;rsquo;:.2, &amp;lsquo;물&amp;rsquo;:.8, &amp;lsquo;전기&amp;rsquo;:.4})
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예를 들어서 공장에서 240 개의 &lt;code&gt;gnomes&lt;/code&gt;, 55개의 &lt;code&gt;hoops&lt;/code&gt;, 150 개의 &lt;code&gt;slinkies&lt;/code&gt;, 133개의 &lt;code&gt;putties&lt;/code&gt;, 그리고 90 개의 &lt;code&gt;shooters&lt;/code&gt;를 만들기로 결졍한다고 하면 파이썬 코드로 아래와 같이 나타낼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; D &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;metal&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;concrete&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plastic&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;water&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;electricity&amp;#39;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; v_gnome &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec(D, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;concrete&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1.3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plastic&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;water&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;.8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;electricity&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; v_hoop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec(D, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plastic&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;water&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;electricity&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.3&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; v_slinky &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec(D, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;metal&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.25&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;water&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;electricity&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; v_putty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec(D, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plastic&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;water&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;electricity&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.5&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; v_shooter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec(D, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;metal&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.15&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plastic&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;water&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;electricity&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.8&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v_gnome &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v_hoop &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v_slinky &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v_putty &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v_shooter)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=59668511&#34;&gt;코딩 더 매트릭스&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PROGRAMMING PHOENIX_(1)</title>
      <link>https://dongwooklee96.github.io/post/2022/12/19/programming-phoenix_1.html</link>
      <pubDate>Mon, 19 Dec 2022 19:20:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/12/19/programming-phoenix_1.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;엘릭서를 어느정도 공부하고나니 해당 언어를 이용하는 웹 프레임워크인 피닉스와, 라이브뷰에 대해서 공부를 하고 싶어졌다. 하지만 아쉽게도 이에대한 한글 책은 존재하지 않아서 영어책을 읽을 수 밖에 없었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사실 토이 프로젝트를 만들려고 해도, 요즘 같은 경우에는 프론트엔드와 서버를 같이 만들어줘야하기 때문에, 귀차니즘이 발동하지만, 라이브 뷰 같은 경우에는 서버에 있기 때문에 좀 더 편하지 않을까 하는 헛된 기대를 품으며 공부하고 있기는 하다. 공식 홈페이지 가보니까, &lt;code&gt;TAILWIND CSS&lt;/code&gt; 랑 연동할 수 있는 기능을 베타로 출시 했던 것 같은데 기대가 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;피닉스-소개&#34;&gt;피닉스 소개&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;피닉스의 장점으로는 생산성이 있다. 피닉스는 프로그래머를 생산적으로 만들어주고, 웹 개발자가 기대하는 모든 것을 기본적으로 제공한다. (애플리케이션 기본 아키텍처, 데이터베이스 액세스, 라우팅, HTML 템플릿, JSON 인코딩, 다국어 처리&amp;hellip;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;엘릭서는 운영 체제 수준의 동시성이 아니라, 유저 수준의 동시성을 활용하므로, 새로운 요청을 받으면 모든 코어에 자연스럽게 분배를 할 수 있다. 이와 대조적으로 운영체제 수준의 동시성은 각 코어마다 인스턴스가 실행되기 때문에, 상태 공유를 위한 오버헤드 및 캐시 효율이 낮아진다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;엘릭서는 매크로를 활용하여, 가독성 좋은 코드를 만들 수 있다. 물론 어렵게 만들 수 도 있다. 하지만 이 책에서 말하는 포인터는 다른 프레임워크는 얽히고 설킨 상속 체인을 이용하지만 엘릭서의 기능을 통해서 피닉스는 단순히 이를 치환하는 매크로를 이용한다는 것이다. 이를 통해서 성능을 포기하지 않고도 추상화가 가능하다고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;엘릭서는 수십만개의 경량 프로세스를 생성 및 추적이 용이하다. 다른 언어나 프레임워크에서도 웹 소켓을 이용할 수 있지만, 엘릭서의 경우에는 각 상태를 가지는 경량 프로세스를 통해서 연결을 하기 때문에 해당 코드가 수행되는 프로세스에 버그가 있더라도 다른 프로세스에 전파가 되지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;함수형-mvc-구축하기&#34;&gt;함수형 MVC 구축하기&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;웹 서버는 함수라고 생각할 수 있다. URL 을 브라우저에 입력할 때마다, 원격 서버에 있는 함수를 실행하는 것이다. 이러한 실행은 응답을 생성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def inc(x), do: x + 1
def dec(x), do: x - 1
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;위와 같은 엘릭서 함수가 있다고 가정을 할 때, 아래와 같은 연산을 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;|&amp;gt; inc |&amp;gt; inc |&amp;gt; dec&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;위는 엘릭서의 파이프 연사이며, 반환값을 다음 함수의 파라미터로 전달한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;connection |&amp;gt; phoenix&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;위의 의미는 브라우저가 피닉스 서버로 연결을 했다는 의미이다. 해당 연결은 우리가 사용자 연결에 요청에 대해서 알아야할 모든 것이며, HTTP, HTTPS 인지, URL이 무엇인지, 매개변수가 어떻게 보이는지 등에 대한 정보를 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;피닉스의-계층&#34;&gt;피닉스의 계층&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;connection
|&amp;gt; endpoint()
|&amp;gt; router()
|&amp;gt; pipelines()
|&amp;gt; controller()
|&amp;gt; common_servies()
|&amp;gt; action()
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;많은 프레임워크에서 MVC 라는 패턴을 도입하였으며, 모델은 데이터에 액세스하고, 뷰는 데이터를 제공하며, 컨트롤러는 둘 사이를 조정한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;웹 서버의 목적은 올바른 작업을 수행하는 기능에 대한 요청을 받는 것이며, 위와 같이 추상화를 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컨트롤러를 통해서 공통 서비스를 호출한다. 피닉스에서는 이러한 공통 서비스가 플러그를 통해서 구현된다. 지금은 플러그를 웹 애플리케이션을 구축하기 위한 전략으로 생각하고 전략을 가능하게 하는 라이브러리라고 생각하면 마음이 편할 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;connection
|&amp;gt; find_user()
|&amp;gt; view()
|&amp;gt; template()
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;데이터베이스에서 유저를 찾고나서, 이를 렌더링 한다면 위와 같은 작업을 거칠 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scope &amp;#34;/&amp;#34;, HelloWeb do
    pipe_through :browser

    get &amp;#34;/hello&amp;#34;, HelloController, :world
    get &amp;#34;/&amp;#34;, PageController, :index
  end
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;해당 코드는 &lt;code&gt;router.ex&lt;/code&gt; 파일에 있는 라우터 부분인데, 새롭게 &lt;code&gt;/hello&lt;/code&gt; 라는 엔드포인트를 추가하고, 이는 &lt;code&gt;:world&lt;/code&gt; 함수를 실행시킨다. 이를 추가하고 서버에 해당 엔드포인트를 입력하면 오류가 난다. 이유는 &lt;code&gt;HelloConroller&lt;/code&gt; 라는 모듈을 만들어주지 않음과 동시에 &lt;code&gt;world&lt;/code&gt; 함수도 없기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;defmodule HelloWeb.HelloController do
  use HelloWeb, :controller # 해당 부분에서, 피닉스 컨트롤러 API 를 사용함을 알린다.

  def world(conn, _params) do
    render(conn, &amp;#34;world.html&amp;#34;)
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;또 해당 부분을 실행하면, 이번에는 &lt;code&gt;(module HelloWeb.HelloView is not available)&lt;/code&gt; 를 찾지 못한다고 뜬다. 당연하다 만든적이 없기 때문이다. 따라서 &lt;code&gt;/views/hello_view.ex&lt;/code&gt; 를 만들고 아래와 같은 코드를 입력한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;defmodule HelloWeb.HelloView do
  use HelloWeb, :view
end
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;그리고 나서 최종적으로 템플릭에 &lt;code&gt;hello_view.ex&lt;/code&gt; 파일과 &lt;code&gt;html&lt;/code&gt; 코드를 입력하면 화면에 렌더링 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pragprog.com/titles/phoenix14/programming-phoenix-1-4/&#34;&gt;Programming Phoenix 1.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>러스트로 유닉스 명령 도구를 만들어 보는 책</title>
      <link>https://dongwooklee96.github.io/post/2021/12/08/%EB%9F%AC%EC%8A%A4%ED%8A%B8%EB%A1%9C-%EC%9C%A0%EB%8B%89%EC%8A%A4-%EB%AA%85%EB%A0%B9-%EB%8F%84%EA%B5%AC%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EB%8A%94-%EC%B1%85.html</link>
      <pubDate>Wed, 08 Dec 2021 10:20:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/12/08/%EB%9F%AC%EC%8A%A4%ED%8A%B8%EB%A1%9C-%EC%9C%A0%EB%8B%89%EC%8A%A4-%EB%AA%85%EB%A0%B9-%EB%8F%84%EA%B5%AC%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EB%8A%94-%EC%B1%85.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;러스트로 유닉스 명령 도구를 만들어보는 책이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그냥 문법만 배운다면 새로운 언어를 배우는 속도가 느리겠지만, 무언가를 같이 만들어보는 예제를 통해서 배우면 재미와 학습 둘다 잡을 수 있을 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;전에 러스트를 공부하려고 했으나, 시간 문제로 포기하였는데 이 책으로 다시 도전해보는 것도 좋을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rftgu.rs/&#34;&gt;Rust From the Ground Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>그림으로 공부하는 IT 인프라 구조를 읽고나서 느낀점</title>
      <link>https://dongwooklee96.github.io/post/2021/04/04/%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EA%B3%B5%EB%B6%80%ED%95%98%EB%8A%94-it-%EC%9D%B8%ED%94%84%EB%9D%BC-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%9D%BD%EA%B3%A0%EB%82%98%EC%84%9C-%EB%8A%90%EB%82%80%EC%A0%90.html</link>
      <pubDate>Sun, 04 Apr 2021 20:20:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/04/04/%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EA%B3%B5%EB%B6%80%ED%95%98%EB%8A%94-it-%EC%9D%B8%ED%94%84%EB%9D%BC-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%9D%BD%EA%B3%A0%EB%82%98%EC%84%9C-%EB%8A%90%EB%82%80%EC%A0%90.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/113507344-cd72b300-9584-11eb-9235-ec9bbdfc400a.jpg&#34; alt=&#34;k642736774_1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데브옵스 팀이 따로 있기 때문에, 실무에서 인프라 지식을 접할 기회가 별로 없었다. 따라서 이 책을 읽게 되었다.&lt;/li&gt;
&lt;li&gt;웹 애플리케이션 시스템을 구축하는 기반 지식들을 배울 수 있었다.&lt;/li&gt;
&lt;li&gt;특히 웹 데이터 흐름이라는 파트가 많은 도움이 되었는데, 내가 어떤 웹 사이트에 접속을 하였을 때, 내부적으로 어떻게 동작하는지 알 수 있었다.&lt;/li&gt;
&lt;li&gt;특히 네트워크에 대한 지식이 많이 부족했는데, 네트워크의 흐름에 대해서 알게 되었다.&lt;/li&gt;
&lt;li&gt;다양한 계층에서의 이중화 전략에 대해서 알게 되었다. 현재 나에게도 도움이 많이 되었던 책이지만, 나 말고도 많은 신입 개발자들에게 많은 도움이 될 것 같다.&lt;/li&gt;
&lt;li&gt;나중에 후배들이 들어와서 내게 좋은 책을 추천해줄 수 있냐고 물어볼 때 주저없이 이 책을 추천해줄 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=257114341&#34;&gt;그림으로 공부하는 IT 인프라 구조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
