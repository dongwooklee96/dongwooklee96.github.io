<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>커리어 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/tags/%EC%BB%A4%EB%A6%AC%EC%96%B4.html</link>
    <description>Recent content in 커리어 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Tue, 10 Aug 2021 19:15:14 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/tags/%EC%BB%A4%EB%A6%AC%EC%96%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>동적 프로그래밍 문제 파악</title>
      <link>https://dongwooklee96.github.io/post/2021/08/10/%EB%8F%99%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%AC%B8%EC%A0%9C-%ED%8C%8C%EC%95%85.html</link>
      <pubDate>Tue, 10 Aug 2021 19:15:14 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/08/10/%EB%8F%99%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%AC%B8%EC%A0%9C-%ED%8C%8C%EC%95%85.html</guid>
      <description>&lt;h3 id=&#34;동적-프로그래밍-문제-파악&#34;&gt;동적 프로그래밍 문제 파악&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;동적 프로그래밍으로 해결하는 문제는 모든 경우의 수를 파악하여 진행하면서 지수승의 시간 복잡도를 가지는 경우가 많다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모든 경우의 수를 조합하면서, 확인하는 과정을 가지는 문제는 동적 프로그래밍 접근법이 가능하다고 보면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음과 같은 키워드가 들어가면, 동적 프로그래밍 접근법을 이용하여 풀 수 있는 문제이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;shortest&amp;quot;, &amp;quot;longest&amp;quot;, &amp;quot;minimized&amp;quot;, &amp;quot;maximized&amp;quot;, 
&amp;quot;least&amp;quot;, &amp;quot;most&amp;quot;, &amp;quot;fewest&amp;quot;, &amp;quot;greatest&amp;quot;, &amp;quot;biggest&amp;quot;, &amp;quot;smallest&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;단계별-동적-프로그래밍-문제-해결-방법&#34;&gt;단계별 동적 프로그래밍 문제 해결 방법&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;전체 탐색(&lt;code&gt;Brute Force&lt;/code&gt;) 방법으로 우선 문제를 해결해본다.&lt;/li&gt;
&lt;li&gt;그 다음에 해당 풀이를 분석하여, 반복되는 작업을 정리한다, 즉 전체 탐색에서 하위 문제로 쪼개어보고 반복되는 단계가 있는지를 찾아낸다.&lt;/li&gt;
&lt;li&gt;순조롭게 진행되면 역으로 동적 방식이 용이하다고 판단할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=267996120&#34;&gt;쓰면서 익히는 알고리즘과 자료구조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>네이버 신입 공채 체크 포인트 및 준비해야할 것들</title>
      <link>https://dongwooklee96.github.io/post/2021/03/07/%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%8B%A0%EC%9E%85-%EA%B3%B5%EC%B1%84-%EC%B2%B4%ED%81%AC-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%B0%8F-%EC%A4%80%EB%B9%84%ED%95%B4%EC%95%BC%ED%95%A0-%EA%B2%83%EB%93%A4.html</link>
      <pubDate>Sun, 07 Mar 2021 22:15:14 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/07/%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%8B%A0%EC%9E%85-%EA%B3%B5%EC%B1%84-%EC%B2%B4%ED%81%AC-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%B0%8F-%EC%A4%80%EB%B9%84%ED%95%B4%EC%95%BC%ED%95%A0-%EA%B2%83%EB%93%A4.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110241534-b7c59a00-7f94-11eb-8b8c-3038b005cff4.png&#34; alt=&#34;Screen Shot 2021-03-07 at 10 29 29 PM&#34;&gt;&lt;/p&gt;
&lt;p&gt;네이버에서 신입을 뽑을 때 고려하는 부분을 알 수 있을 것 같아서 읽어보았다. 물론 다른 기업들도 이러한 점을 고려해서 신입을 뽑을 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://campaign.naver.com/recruit2020/checkpoint/&#34;&gt;2020신입개발공채체크포인트!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;네이버가-강조하는-세가지의-키워드&#34;&gt;네이버가 강조하는 세가지의 키워드&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;기본기!&lt;/li&gt;
&lt;li&gt;커뮤니케이션!&lt;/li&gt;
&lt;li&gt;성장가능성!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;기본기&#34;&gt;기본기&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;기술 생태계가 빠르기 때문에, 의욕만 앞서 모두 다 경험해보겠다는 태도는 그다지 효율적인 접근 방법이 아니다.
따라서 이럴 수록 기본기에 충실해야만 새로운 기술 흐름에 압도되지 않고, 스스로의 방향성과 페이스로 앞으로 나갈 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;새로운 기술을 배웠다거나, 사용할 수 있다고 어필을 하는 것 보다는 기본기가 탄탄하다는 인상을 주는 것이 유리할 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 자료구조, &lt;strong&gt;운영체제&lt;/strong&gt;, 알고리즘, &lt;strong&gt;네트워크&lt;/strong&gt;, &lt;strong&gt;데이터베이스&lt;/strong&gt; 관련된 블로그 포스팅을 하고 면접 때 이러한 기본기에 대한 답변을 잘 할 수 있도록 해야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기초를 많이 깊게 공부하는 것이 네이버를 입사하는데 많은 도움이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;또한 다음과 같은 부분도 함께 본다고 했다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 너비보다 깊이.
2. 끝까지 파본 경험 
3. 창업자형 개발
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;면접&#34;&gt;면접&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;틀린답이라도 왜 그러한 답을 냈는지 설명하는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;문제를 해결하기 위한 자신의 노력을 어필하는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;모르면 찾으면 되고, 질문하면 되지만 끝까지 파고들고자 하는 마음가짐이 없으면 확실한 결과물을 만들어내지 못한다!&lt;/li&gt;
&lt;li&gt;공부를 하려는 사람을 많이 뽑으려고 했다.&lt;/li&gt;
&lt;li&gt;문제를 접근하는 방식에 있어서 어떤 식으로 접근하려고 하는지를 많이 보았다.&lt;/li&gt;
&lt;li&gt;1차 면접이 끝났다고, 거기서 안주하지 말고 어떤 점들을 더 보강하면 되는지를 생각을 해라.&lt;/li&gt;
&lt;li&gt;전산 기초 과목에 대한 학습을 충분히 하는 것을 추천한다. &lt;strong&gt;단순히 외우지 말고 이해해야 한다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;왜?&amp;lsquo;라고 스스로에게 질문하고 답을 찾아봐야한다. 왜 이런 개념이 나왔는지, 왜 이 개념이 더 좋은지, 한번 깊이 생각을 해보는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;잘 모르겠으면 솔직히 이야기를 하라! 그러면 면접관들이 힌트를 줄 것이다.&lt;/li&gt;
&lt;li&gt;정답을 맞추는 능력 이상으로 답을 유추해 가는 사고력 또한 굉장히 중요하기 때문이다.&lt;/li&gt;
&lt;li&gt;본인이 해결해왔던 문제를 어떤 식으로 대하고, 접근했고, 치열하게 고민하고, 솔루션을 도출했는지를 중점적으로 물어본다.&lt;/li&gt;
&lt;li&gt;성공했으면 성공한 대로, 실패했으면 실패한대로 의미가 있기 때문이다.&lt;/li&gt;
&lt;li&gt;개발을 정말 좋아하고 기저의 원리를 이해하는데, 많은 노력을 들였는지를 물어본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110243042-14788300-7f9c-11eb-80d1-a4f252ce7cda.png&#34; alt=&#34;Screen Shot 2021-03-07 at 11 22 52 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;최대한 구체적이고&amp;rdquo;, &amp;ldquo;솔직할 것이다.&amp;rdquo; 왜냐하면 개발자의 핵심 역량은 &lt;strong&gt;설계 역량&lt;/strong&gt;, &lt;strong&gt;논리적 사고&lt;/strong&gt;이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;커뮤니케이션&#34;&gt;커뮤니케이션&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;문제를 잘 듣고 이해하며, 자신이 생각한 답을 명확하고 간결하게 커뮤니케이션 할 수 있는지를 본다.&lt;/li&gt;
&lt;li&gt;협업에 대한 것을 강조해서 질문을 한다.&lt;/li&gt;
&lt;li&gt;여러가지 해결책들이 존재하는 질문을 던지게 되고, 아래 항목정도를 살펴본다.
&lt;ul&gt;
&lt;li&gt;문제를 어떤 수준에서 이해하고, 본인의 전문성/인사이트를 보여주는지&lt;/li&gt;
&lt;li&gt;면접관이 면접자의 의견과 방향이 다른 해결책을 제시했을 때, 다른 해결책에 대해서 어떻게 반응하는지, 수렴하여 시너지가 나는 새로운 방향을 제시하는지&lt;/li&gt;
&lt;li&gt;면접관이 면접자의 해결책의 안되는 이유를 여러가지 나열 했을 때, 이것들을 어떻게 정리하고 일이 되게 만드는 방향에 집중하는지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 부분은 어떻게 키워야 할지 조금 막막하다. 지금도 노력하고 있지만 가장 부족한 부분이 커뮤니케이션 부분이라고 생각하기 때문이다.&lt;/p&gt;
&lt;h2 id=&#34;지원서&#34;&gt;지원서&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;화려한 문체나 거창한 커리어보다는, 개발에 대한 나만의 열정과, 노력들을 보여주는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;개발을 정말로 좋아하는지를 많이 본다.&lt;/li&gt;
&lt;li&gt;이수한 컴퓨터공학 관련 과목, 기술적 문제를 해결한 경험, 에너지를 집중해 끝가지 파고 들었던 경험을 적는 것이 좋다.&lt;/li&gt;
&lt;li&gt;개발자로서 개선해보고 싶은 네이버 서비스등도 미리 생각하면 좋다.&lt;/li&gt;
&lt;li&gt;포기하지 않고 끝까지 몰입해본 경험, 세상의 불편을 개발로 풀고자 시도했던 경험 등 개발자로서 성장 의지를 보여줄 수 있는 본인만의 스토리가 있다면 잘 녹여서 적어라&lt;/li&gt;
&lt;li&gt;내가 무엇을 할 수 있는지가 명확히 드러나는 지원서를 선호한다.&lt;/li&gt;
&lt;li&gt;어떤 프로젝트를 했었고, 그 프로젝트에서 어떤 역할을 했고, 내가 만든 산출물이 어떤 것이고, 기술적으로 어떤 고민을 했었는지 등이 나와 있는 지원서의 경우 더 자세히 보게 된다.&lt;/li&gt;
&lt;li&gt;지원서에 개인 &lt;code&gt;GITHUB URL&lt;/code&gt;을 작성한 지원자의 경우, 꼭 들어가서 본다.&lt;/li&gt;
&lt;li&gt;소스코드를 통해서 지원자의 개발 역량을 파악할 수 있을 뿐더라, &lt;code&gt;GITHUB&lt;/code&gt;를 운영하고 공유할 정도라면 어느 정도 수준이 있는 개발자일 것이라는 기대를 하기 때문이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GITHUB&lt;/code&gt;는 생각보다 많은 정보를 준다. 소스 코드를 지속적으로 업로드 하고, 관리하고 공유하는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;지원서에서는 &amp;lsquo;결과&#39;보다는 &amp;lsquo;무엇을 했는지&amp;rsquo; 강조하는 것이 좋다.&lt;/li&gt;
&lt;li&gt;학과 공부에서 배운 것 뿐만 아니라 새로 알게 된 경험에 관한 이야기도 좋다.&lt;/li&gt;
&lt;li&gt;협업에 대해서 이야기 하고 싶다면 갈등, 조정, 협의, 합의 등에 이르게 된 과정을 설명하는게 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;결론&#34;&gt;결론&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;네이버가 왜 이러한 점을 면접때 보는지 생각하면 업무에 도움이 되고 성장할 수 있는 개발자를 뽑으려고 하기 때문이다. 따라서 앞으로 내 업무 능력을 키워가는데도 도움이 될 것이라고 생각한다.&lt;/p&gt;
&lt;p&gt;그리고 일을 하면서 만나는 문제들을 끝까지 파보자라는 자세를 가지고 접근하며 이와 내가 문제를 어떤 식으로 대하고, 접근했고, 치열하게 고민했고, 파봤고, 솔루션을 도출한 과정을 적으려면 실제로 그러한 자세로 일을 해야한다.&lt;/p&gt;
&lt;p&gt;너무 많아서 다 정리하지는 못했다. 하지만 어떤 기업을 지원하더라도, 지원서를 작성하기 전에, 이 사이트에 들려서 내가 작성한 글이 적합한지에 대한 고민을 해봐야 할 것이다.&lt;/p&gt;
&lt;h2 id=&#34;코딩-테스트&#34;&gt;코딩 테스트&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110243118-5d303c00-7f9c-11eb-9bdd-c9aa327aa421.png&#34; alt=&#34;Screen Shot 2021-03-07 at 11 24 31 PM&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://campaign.naver.com/recruit2020/checkpoint/&#34;&gt;naver 2020 신입개발공채 체크포인트!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>우아한 테크 코드 지원 후기 및 회고</title>
      <link>https://dongwooklee96.github.io/post/2021/03/03/%EC%9A%B0%EC%95%84%ED%95%9C-%ED%85%8C%ED%81%AC-%EC%BD%94%EB%93%9C-%EC%A7%80%EC%9B%90-%ED%9B%84%EA%B8%B0-%EB%B0%8F-%ED%9A%8C%EA%B3%A0.html</link>
      <pubDate>Wed, 03 Mar 2021 23:15:14 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/03/%EC%9A%B0%EC%95%84%ED%95%9C-%ED%85%8C%ED%81%AC-%EC%BD%94%EB%93%9C-%EC%A7%80%EC%9B%90-%ED%9B%84%EA%B8%B0-%EB%B0%8F-%ED%9A%8C%EA%B3%A0.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109818546-707a9900-7c76-11eb-857b-2ee77f773bf0.png&#34; alt=&#34;Screen Shot 2021-03-03 at 11 15 58 PM&#34;&gt;&lt;/p&gt;
&lt;p&gt;이전에 우아한 테크코스에 지원을 하여 코딩 테스트를 본 적이 있었다. 비록 탈락했지만 다음에 더 잘할 수 있도록 피드백을 주셨다.&lt;/p&gt;
&lt;h3 id=&#34;코딩-테스트&#34;&gt;코딩 테스트&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;코딩 테스트의 경우 알고리즘 역량이나 풀이 속도도 중요하지만, 문제를 명확하고 꼼꼼히 이해하는 능력이 가장 중요하다고 하셨다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로그래머에게 속도가 빠름도 중요하지만, 그 보다는 요구사항을 명확히 이해해 버그없는 프로그래밍을 구현하는게 더 중요하다고 하셨다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;자기소개서&#34;&gt;자기소개서&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;자기소개서는 구체적으로 쓰는 것이 좋다. 어떤 내용을 학습했다는 결과 위주의 내용이 아니라, 어떤 내용을 학습하는데 어떤 어려움이 있었고, 어떻게 극복했다와 같이 구체적인 사례를 들어서 공감을 얻는 것이 중요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자기소개서에서 얻고 싶은 가장 큰 부분은 여러분이 생각에만 그치지 않고 행동으로 얼마나 실행했는지를 보고 싶은 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;누구나 생각을 할 수는 있지만 이를 실행으로 옮겨 일정 수준의 성취를 만들기란 쉬운 것이 아니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;작은 성취라도 만들어가는 과정에서 깨달음들을 보여준다면, 합격률이 조금은 높아질 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>라인 개발자 입사기를 읽고 느낀점</title>
      <link>https://dongwooklee96.github.io/post/2021/03/03/%EB%9D%BC%EC%9D%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9E%85%EC%82%AC%EA%B8%B0%EB%A5%BC-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90.html</link>
      <pubDate>Wed, 03 Mar 2021 21:49:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/03/%EB%9D%BC%EC%9D%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9E%85%EC%82%AC%EA%B8%B0%EB%A5%BC-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90.html</guid>
      <description>&lt;h1 id=&#34;지원서-작성할-때-참고할-부분&#34;&gt;지원서 작성할 때, 참고할 부분&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109811374-1a095c80-7c6e-11eb-9077-d4d5a18b0768.png&#34; alt=&#34;Screen Shot 2021-03-03 at 10 16 05 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;대외 활동을 했다는 사실 그 자체보다는 그 활동에서 배우고 얼마나 성장했는지를 위주로 적자&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;무엇을 했는지가 중요한 것이 아니다, 무엇을 얻었고, 배웠는지를 위주로 작성하자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;어떤 활동을 하더라도, 자신의 성장을 연결하는 것이 중요하다, 자신의 성장을 감춰두고 혼자만 아는 것 보다는 어떠한 방식으로도 그것을 드러내서 어필하는 것이 중요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;신입-개발자가-아닌-경우&#34;&gt;신입 개발자가 아닌 경우&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109811905-bdf30800-7c6e-11eb-844c-0ec338e53c4f.png&#34; alt=&#34;Screen Shot 2021-03-03 at 10 20 14 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스스로 공부해 왔던 내용과, 더불어 내가 어떤 개발자가 되고 싶은지 목표를 설정&lt;/li&gt;
&lt;li&gt;지금 근무하는 곳에서 책임감을 가지고 근무하는 모습이 중요하다.&lt;/li&gt;
&lt;li&gt;이직을 준비하더라도 현재 다니고 있는 직장에 집중하고 최선을 다하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;코딩-테스트-준비&#34;&gt;코딩 테스트 준비&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;선택한 하나의 알고리즘을 난이도 별로 풀어보았다.&lt;/li&gt;
&lt;li&gt;특히 구현, 자료구조 부분은 다른 문제와 연계되는 경우가 많아서 더욱 집중적으로 풀어보았다.&lt;/li&gt;
&lt;li&gt;채용을 준비할 때는 취업을 준비하기전에 풀었던 문제의 절반정도를 풀면서 연습을 했다.&lt;/li&gt;
&lt;li&gt;코딩 테스트라는 과정은 단기간에 실력을 올릴 수 없기 때문에, 매일 또는 매주 꾸준히 코딩 테스트 문제를 풀어보는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;처음 준비를 할 때는 알고리즘 공부를 위한 영상을 찾고, 해당 영상을 들으면서 그날 배웠던 알고리즘과 관련된 문제를 2~3개 정도 풀면서 준비를 했다.&lt;/li&gt;
&lt;li&gt;꾸준히 흥미를 붙여가면서 하는것이 중요하다.&lt;/li&gt;
&lt;li&gt;단기간에 바짝 공부해서 관련 내용을 익히고 문제 풀이 능력을 성장시키는 것보다는, 꾸준하게 문제의 유형과 풀이의 방식을 익히면서 체득하는 것이 많은 도움이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;서류-제출과-관련된-팁&#34;&gt;서류 제출과 관련된 팁!&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;나 자신을 잘 아는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;&amp;lsquo;나&#39;를 알아야 어필할 수 있는 포인트도 보이고, 나에게 잘 맞는 직무도 찾을 수 있다.&lt;/li&gt;
&lt;li&gt;내가 지금까지 활동했던 것을 정리해보는 것을 추천한다.&lt;/li&gt;
&lt;li&gt;어떤 경험을 했고, 어떤 일이 일어났고, 어떤 것을 배우고 얻었는지를 중점으로 작성해보는 것이다.&lt;/li&gt;
&lt;li&gt;그리고 나서 지원할 직무와 연결지어서 어떤 경험들을 추려낼지 고민하면서 서류를 작성하면 조금 더 쉬워질 것이다.&lt;/li&gt;
&lt;li&gt;내가 흥미를 느끼는 분야와 기술, 그리고 쌓아온 역량을 직무와 연결지어서 생각해보면 좋을 것이다.&lt;/li&gt;
&lt;li&gt;포트폴리오의 경우에는 진행 했던 프로젝트의 전체 구조와 내가 맡았던 역할, 사용한 기술을 중점으로 만들었다. 그리고 각각의 프로젝트에 해당하는 &lt;code&gt;Git Repository&lt;/code&gt;를 추가하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109813328-8d13d280-7c70-11eb-9fc4-5fbb310702a4.png&#34; alt=&#34;Screen Shot 2021-03-03 at 10 33 50 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;포트폴리오를 작성할 때는, &lt;code&gt;문제 발생 - 문제 원인 파악 - 해결책 적용 - 결과&lt;/code&gt; 와 같은 순서로 프로젝트 문제 해결 과정을 서술 하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;이 부분에 공감을 하는데, 포트폴리오에서 내가 보여줘야할 것은 내가 얼마만큼 알고 할 수 있는 능력이 있는지 보다는, 내가 어떤 분야를 얼마만큼 고민했다는 사실을 어필하는 것이 더 효과적일 것이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;포트폴리오에서는 자신의 개발 역량이나 팀으로 활동할 때의 자신의 모습을 보여줄 수 있는 것 등 자기소개서에서 드러내지 못한 부분을 보여주면 좋을 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;면접을-위해서-따로-준비한-것들&#34;&gt;면접을 위해서 따로 준비한 것들&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;CS(Computer Science) 지식과 프로젝트에서 사용한 기술들을 다시 한 번 정리하였다.&lt;/li&gt;
&lt;li&gt;운영체제, 데이터베이스, 자료구조/알고리즘, 네트워크에 대해서 정리를 하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;되도록 공식 개발 문서를 레퍼런스로 하여, CS 지식들을 틈틈히 정리하도록 해야겠다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트에서 사용한 기술은 왜 그 기술을 사용했고, 어떤 장/단점을 가지고 있으며, 어떤한 원리로 동작하는지를 중점으로 준비하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;나의 포트폴리오에서 보완해야할 점이다. 왜 그 기술을 사용했는지, 그리고 어떤 장/단점을 가지고 있는지, 어떠한 원리로 동작하는지 고민을 많이하지 않았다.따라서 이러한 부분을 개선하자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다른 사람들에게 자신의 포트폴리오를 보여주고 피드백을 얻는 것도 좋은 방법이 될 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;면접을 위해서는 자기소개서와 포트폴리오를 다시 확인하면서 예상 질문을 확인하였고, 또한 블로그에 포스팅한 내용들을 공부하며 범위를 넓혔다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;면접을 보기 전에, 친구들과 모의 면접을 보거나 휴대폰으로 답변하는 모습을 촬영하면서 준비하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;답변할 때는 스스로 어필하고 싶거나 강조하고 싶은 점에 대해서는 톤을 달리하고, 시선 처리는 한곳만 바라보거나 허공을 바라보지 않게 면접관들을 번갈아 볼 수 있게 준비하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;답변할 수 있는 것은 자신있게 답변하고, 모르는 것은 모른다고 답하되 보완할 방법이나 알고 있는 비슷한 개념을 엮어 답변을 할 수 있도록 준비해라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자신이 제출한 자기소개서, 이력서, 포트폴리오를 2 ~ 3번 정독하고 면접관들이 어떤 부분에서 궁금할지를 예측하여 자문자답하면서 내용을 정리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;면접은 &amp;lsquo;어떻게&#39;보다 &amp;lsquo;왜&#39;라는 질문을 받았을 때 제대로 답변할 수 있도록 준비를 하면 좋을 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대답을 못한다고 감점은 없다, 따라서 모르면 모른다고 답변을 하고 모든 것을 후회없이 보여줄 수 있도록 준비를 하자.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;결론&#34;&gt;결론&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;코딩 테스트 준비를 꾸준히 하자.&lt;/li&gt;
&lt;li&gt;컴퓨터 공학 관련 지식들을 꾸준히 리마인드 하고, 블로그에 잘 정리를 하자.&lt;/li&gt;
&lt;li&gt;포트폴리오는 왜 이러한 기술을 사용했고, 문제점, 및 문제를 해결한 과정이 잘 녹아들어 있어야 한다.&lt;/li&gt;
&lt;li&gt;면접은 &amp;lsquo;어떻게&#39;보다는 &amp;lsquo;왜&#39;라는 질문에 답을 할 수 있어야 한다.&lt;/li&gt;
&lt;li&gt;면접 질문 기반이 자기소개서 및 포트폴리오에서 나오므로 자기소개서 및 포트폴리오를 처음부터 잘 작성하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.linecorp.com/ko/blog/2020-first-half-new-liners-interview/&#34;&gt;2020 상반기 LINE 신입 개발자 3인의 WOW한 입사기!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
