<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PostgreSQL on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/tags/postgresql.html</link>
    <description>Recent content in PostgreSQL on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Mon, 12 Dec 2022 20:04:24 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/tags/postgresql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PostgreSQL - Fix gin index cost estimation 이슈 분석</title>
      <link>https://dongwooklee96.github.io/post/2022/12/12/postgresql-fix-gin-index-cost-estimation-%EC%9D%B4%EC%8A%88-%EB%B6%84%EC%84%9D.html</link>
      <pubDate>Mon, 12 Dec 2022 20:04:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/12/12/postgresql-fix-gin-index-cost-estimation-%EC%9D%B4%EC%8A%88-%EB%B6%84%EC%84%9D.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;해당 이슈는 &lt;code&gt;GIN&lt;/code&gt; 인덱스의 비용 측정에서 버그가 있다는 이슈이고, 이를 해결하기 위한 패치를 포함하고 있다. 아래의 글을 잘 읽어보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/3574rb3kzuvqjw1/Screenshot%202022-12-12%20at%2021.14.32.png&#34; alt=&#34;&#34;&gt;
&lt;a href=&#34;https://www.postgresql.org/message-id/3188617.44csPzL39Z%40aivenronan&#34;&gt;Ronan Dunklau -&amp;gt; PG Hackers&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. B+TREE와 비교해서, GIN, GIST, SP-GIST 인덱스들을 CPU 비용을 계산하지 않는다. 엔트리 트리를 내려가는 동안에... -&amp;gt; 이는 낮는 IO 비용을 가지고 있는 연산에서 문제가 될 수 있다.

2. 네스티드 루프에서 많은 반복에 의해서 IO 비용이 줄어들 떄 모든 것이 SHARED BUFFER 에있기 때문에 비용이 무료라고 간주한다.

3. 해당 이슈는 PG14 버전에서 발견되었으며, 해당 버전에서는 PG_TRGM, GIN 인덱스에서 &amp;#39;=&amp;#39; 연산자를 사용할 수 있다.

4. 이전에는 B+TREE에 대해서만, 고려를 하고 있었다. 따라서 BTREE_GIN 익스텐션 역시 위와 같은 문제를 일으킬 것이라고 생각한다.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;우선 패치는 &lt;code&gt;/src/backend/utils/adt/selfuncs.c&lt;/code&gt; 에서 이루어진 것을 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;해당 파일의 앞부분의 주석을 읽어보면, 선택도(SELECTIVITY) 함수와 표준 연산 및 인덱스 접근 메서드를 위한 인덱스 비용 추정 기능이라고 적혀 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; temp &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; t_gin_test_tbl(i int4[], j int4[]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; t_gin_test_tbl &lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; gin (i, j);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;into&lt;/span&gt; t_gin_test_tbl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{1}&amp;#39;&lt;/span&gt;,   &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{1,2}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{10}&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{1,2}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{10}&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{2}&amp;#39;&lt;/span&gt;,   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{10}&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{1,3}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{1,1}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{10}&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; enable_seqscan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;explain&lt;/span&gt; (costs &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; t_gin_test_tbl &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; array[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;@&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; t_gin_test_tbl &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; array[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;@&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; t_gin_test_tbl &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; array[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;@&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;::int4[] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;@&lt;/span&gt; j;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gincostestimate&lt;/code&gt; 함수에 디버거를 걸로 위의 스크립트를 실행시키면, &lt;code&gt;gin&lt;/code&gt; 인덱스를 사용하게 되면서 &lt;code&gt;gincostestimate&lt;/code&gt; 함수가 실행되는 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/nylzhwx1o4ncxy5/Screenshot%202022-12-13%20at%2022.54.37.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;추가된 곳의 코드를 살펴보면 인덱스 정보에 있는 트리의 높이 (&lt;code&gt;tree_height&lt;/code&gt;) 가 &lt;code&gt;0&lt;/code&gt; 보다 작으면 (구조체 주석에 보면, -1 이면 알 수 없는 값을 나타낸다.) 인덱스 트리 높이를 구해준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;numEntries&lt;/code&gt; 와 &lt;code&gt;numEntryPages&lt;/code&gt; 에 대해서 잘모르겠지만, 우선 이전에 &lt;code&gt;VACUUM&lt;/code&gt;이 된적이 있으면 통계정보에서 해당 정보를 얻어오고, 아니라면 직접 계산을 해준다. 해당 정보를 통해서 트리 높이를 계산해준다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/p6dwv2x005y88h3/Screenshot%202022-12-13%20at%2023.10.47.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그리고 나서, &lt;code&gt;descentCost&lt;/code&gt; 를 구해주는데, 튜플의 개수가 &lt;code&gt;1&lt;/code&gt; 보다 크다면, 값을 구해준다. 위의 &lt;code&gt;if&lt;/code&gt; 코드부분이 오류가 아닌가 싶었다. 왜냐하면, 위의 조건문과 상관없이 아래 코드가 실행되면서 위의 값이 덮어 쓰여지기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/vlx73skwy3qj8lc/Screenshot%202022-12-13%20at%2023.15.59.png&#34; alt=&#34;&#34;&gt;
&lt;a href=&#34;https://www.postgresql.org/message-id/flat/4153708.1662675130%40sss.pgh.pa.us#39d5416cdfc7e8a0ef8ebebcc3309c12&#34;&gt;Tom Lane -&amp;gt; Ronan Dunklau&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;톰 레인의 답변을 보면, &lt;code&gt;gin&lt;/code&gt; 인덱스 뿐만 아니라, 모든 인덱스에 대해서 올바르게 계산하고 있는지 확인을 해봐야 한다고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 나서 아래의 스크립트를 돌려봤는데 결과가 이상하게 나왔다고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE EXTENSION btree_gist;
CREATE EXTENSION pg_trgm;
CREATE EXTENSION bloom;

drop table if exists t1,t2;

CREATE TABLE t1 (
          id text
        );

CREATE TABLE t2 (
          id text primary key,
            t1_id text
        );

insert into t1 (id)
select i::text FROM generate_series(1, 1500) as i;

insert into t2 (id, t1_id)
SELECT i::text, (i % 1500 + 1)::text FROM generate_series(1, 20000) i;

ANALYZE t1, t2;

SET random_page_cost = 0.00000001;
-- SET random_page_cost = 1.0;
SET enable_hashjoin = off;
SET enable_mergejoin = off;
SET enable_memoize = off;

CREATE INDEX t1_btree_index ON t1 USING btree (id);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_btree_index;

CREATE INDEX t1_gin_index ON t1 USING gin (id gin_trgm_ops);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_gin_index;

CREATE INDEX t1_gist_index ON t1 USING gist (id);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_gist_index;

CREATE INDEX t1_spgist_index ON t1 USING spgist (id);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_spgist_index;

CREATE INDEX t1_hash_index ON t1 USING hash (id);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_hash_index;

CREATE INDEX t1_brin_index ON t1 USING brin (id);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_brin_index;

CREATE INDEX t1_bloom_index ON t1 USING bloom (id);
explain (analyze, buffers) select * from t1 join t2 on t1.id = t2.t1_id ;
DROP INDEX t1_bloom_index;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/a6azc6el4ao8whb/Screenshot%202022-12-13%20at%2023.59.11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;확실히 B+TREE를 기준으로 보았을 때, 예상 비용이 더 적게 나왔음에도 불구하고, 실제 실행시간은 훨씬 오래걸린 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/41/3796/&#34;&gt;Fix GIN indexes cost estimation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GSoC 2022 Final Report - PostgreSQL</title>
      <link>https://dongwooklee96.github.io/post/2022/09/03/gsoc-2022-final-report-postgresql.html</link>
      <pubDate>Sat, 03 Sep 2022 11:04:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2022/09/03/gsoc-2022-final-report-postgresql.html</guid>
      <description>&lt;h3 id=&#34;intro&#34;&gt;Intro&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I worked with PostgreSQL project in Google Summer of Code 2022 this summer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I tried to improve test coverage for various modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;goal&#34;&gt;Goal&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;My Goal is to improve the test coverage of PostgreSQL, as indicated in the &lt;a href=&#34;https://wiki.postgresql.org/wiki/GSoC_2022#Improve_PostgreSQL_Regression_Test_Coverage_(2022)&#34;&gt;postgres wiki - gsoc 2022&lt;/a&gt; document.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here is my Proposal &lt;a href=&#34;https://dl.dropbox.com/s/mgop5q1mycvpl0a/gAAAAABjErgY_7TGz_qtSy2lceFAH09AtKxa_dh0NelFvmxO0a14dV5ExNZgIwYxzW-NCryXgYs4Z5RV1iLsPzSKaCKXg2HKqr6g28fz4E5WERJXjMCE-a0%3D.pdf&#34;&gt;Improve PostgreSQL Regression Test Coverage - DongWook Lee&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My original goal was to increase the test coverage of the modules below.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- pg_dump
- psql
- pg_ctl
- initdb
- pg_stat_statments
- pg_buffercache
- pg_prewarm
- pgrowlocks
- pgstattuple
- pg_waldump
- pg_basebackup
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Except for &lt;code&gt;pg_dump&lt;/code&gt;, &lt;code&gt;pg_ctl&lt;/code&gt;, &lt;code&gt;initdb&lt;/code&gt;, and &lt;code&gt;pg_stat_statments&lt;/code&gt;, I attempted all to improve test coverage, and several succeeded.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;coverage-result&#34;&gt;Coverage Result&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;pgrowlocks&#34;&gt;pgrowlocks&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;
&lt;img src=&#34;https://dl.dropbox.com/s/jg9tpvnnzmm43tu/Screen%20Shot%202022-09-03%20at%2012.15.18%20PM.png&#34; alt=&#34;before&#34;&gt;
&lt;strong&gt;After&lt;/strong&gt;
&lt;img src=&#34;https://dl.dropbox.com/s/kz1j469zxynmfvc/Screen%20Shot%202022-09-03%20at%2012.17.15%20PM.png&#34; alt=&#34;after&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improve coverage &lt;code&gt;0%&lt;/code&gt; to &lt;code&gt;90.7%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pg_prewram&#34;&gt;pg_prewram&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;
&lt;img src=&#34;https://dl.dropbox.com/s/99tslxr4yq9q1ly/Screen%20Shot%202022-09-03%20at%2012.19.13%20PM.png&#34; alt=&#34;before&#34;&gt;
&lt;strong&gt;After&lt;/strong&gt;
&lt;img src=&#34;https://dl.dropbox.com/s/dajhpb9cllffaeh/Screen%20Shot%202022-09-03%20at%2012.19.31%20PM.png&#34; alt=&#34;after&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improve coverage &lt;code&gt;11.6%&lt;/code&gt; to &lt;code&gt;77.3%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pg_buffercache&#34;&gt;pg_buffercache&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;
&lt;img src=&#34;https://dl.dropbox.com/s/1z04900ai33x0nl/Screen%20Shot%202022-09-03%20at%2012.25.48%20PM.png&#34; alt=&#34;before&#34;&gt;
&lt;strong&gt;After&lt;/strong&gt;
&lt;img src=&#34;https://dl.dropbox.com/s/2df9i1vuft59mfo/Screen%20Shot%202022-09-03%20at%2012.26.01%20PM.png&#34; alt=&#34;after&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improve coverage &lt;code&gt;0%&lt;/code&gt; to &lt;code&gt;97.6%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;commitfest&#34;&gt;Commitfest&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/38/3732/&#34;&gt;pg_prewarm add configuration example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/38/3674/&#34;&gt;pg_buffercache: add sql test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/38/3723/&#34;&gt;Add test of pg_prewarm extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/38/3677/&#34;&gt;Add TAP test for auth_delay extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/39/3805/&#34;&gt;old_snapshot: add test for coverage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/39/3834/&#34;&gt;pg_waldump: add test for coverage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/39/3835/&#34;&gt;pg_basebackup: add test about zstd compress option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/39/3793/&#34;&gt;pgstattuple: add test for coverage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/39/3833/&#34;&gt;xml2: add test for coverage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/39/3852/&#34;&gt;pg_checksum: add test for coverage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/39/3724/&#34;&gt;add test: pg_rowlocks extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commitfest.postgresql.org/40/3877/&#34;&gt;vacuumlo: add test to vacuumlo for test coverage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;patch-series&#34;&gt;Patch Series&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/postgres/postgres/commit/90247e742f849794d061a0444071647728054b45&#34;&gt;Add a regression test for contrib/pgrowlocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/postgres/postgres/commit/2865b4060a434855f90fda41f1b8f4bca7c55b0e&#34;&gt;Add a regression test for contrib/pg_prewarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/postgres/postgres/commit/be39d88934331c47c43d8c51500305e928f06240&#34;&gt;Add regression test coverage for contrib/pg_buffercache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/postgres/postgres/commit/aa31b29375b9afbe1330d7726855645ff82a2e51&#34;&gt;doc: add pg_prewarm example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
