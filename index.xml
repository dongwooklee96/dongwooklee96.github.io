<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on 개발자 이동욱</title>
    <link>/</link>
    <description>Recent content in Home on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sun, 28 Mar 2021 17:43:24 +0900</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>리플리케이션이란 (draft)</title>
      <link>/post/2021/03/28/%EB%A6%AC%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%B4%EB%9E%80-draft/</link>
      <pubDate>Sun, 28 Mar 2021 17:43:24 +0900</pubDate>
      
      <guid>/post/2021/03/28/%EB%A6%AC%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%B4%EB%9E%80-draft/</guid>
      <description>참고 문헌 </description>
    </item>
    
    <item>
      <title>쿼리 오프 로딩이란 (draft)</title>
      <link>/post/2021/03/28/%EC%BF%BC%EB%A6%AC-%EC%98%A4%ED%94%84-%EB%A1%9C%EB%94%A9%EC%9D%B4%EB%9E%80-draft/</link>
      <pubDate>Sun, 28 Mar 2021 17:20:24 +0900</pubDate>
      
      <guid>/post/2021/03/28/%EC%BF%BC%EB%A6%AC-%EC%98%A4%ED%94%84-%EB%A1%9C%EB%94%A9%EC%9D%B4%EB%9E%80-draft/</guid>
      <description>참고 문헌 </description>
    </item>
    
    <item>
      <title>네트워크 메시지 암호화 및 방식 (중간자 공격, HMAC, 대칭, 비대칭 키)</title>
      <link>/post/2021/03/28/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%95%94%ED%98%B8%ED%99%94-%EB%B0%8F-%EB%B0%A9%EC%8B%9D-%EC%A4%91%EA%B0%84%EC%9E%90-%EA%B3%B5%EA%B2%A9-hmac-%EB%8C%80%EC%B9%AD-%EB%B9%84%EB%8C%80%EC%B9%AD-%ED%82%A4/</link>
      <pubDate>Sun, 28 Mar 2021 16:17:39 +0900</pubDate>
      
      <guid>/post/2021/03/28/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%95%94%ED%98%B8%ED%99%94-%EB%B0%8F-%EB%B0%A9%EC%8B%9D-%EC%A4%91%EA%B0%84%EC%9E%90-%EA%B3%B5%EA%B2%A9-hmac-%EB%8C%80%EC%B9%AD-%EB%B9%84%EB%8C%80%EC%B9%AD-%ED%82%A4/</guid>
      <description>네트워크(전송) 레벨 암호화    가장 기본적이고 필수적인 REST API 보안 방법은 네트워크 전송 프로토콜에서 HTTPS 보안 프로토콜을 사용하는 방법이다.
  HTTPS 프로토콜을 사용한다 하더라도, 메세지 자체를 암호화해서 전송하기 때문에 해킹으로 말미암은 메시지 누출 위협을 해소할 수 있다.
  그러나 HTTPS를 사용하더라도 메시지를 낚아 채거나 변조하는 방법이 있는데 이러한 해킹 방법을 바로 중간자 공격 (Man-In-The-Middle-Attack)이라고 한다.
  정상적인 HTTPS 통신의 경우 다음과 같이 서버에서 제공하는 인증서를 이용하여 API와 서버 상호간에 암호화된 신뢰할 수 있는 새로운 네트워크 연결을 만든다.</description>
    </item>
    
    <item>
      <title>REST API 보안 및 인가 방식</title>
      <link>/post/2021/03/28/rest-api-%EB%B3%B4%EC%95%88-%EB%B0%8F-%EC%9D%B8%EA%B0%80-%EB%B0%A9%EC%8B%9D/</link>
      <pubDate>Sun, 28 Mar 2021 15:17:39 +0900</pubDate>
      
      <guid>/post/2021/03/28/rest-api-%EB%B3%B4%EC%95%88-%EB%B0%8F-%EC%9D%B8%EA%B0%80-%EB%B0%A9%EC%8B%9D/</guid>
      <description>권한 인가  인증이 끝나면 다음 단계는 권한에 대한 인증, 즉 인가(Authoriation) 과정이 필요하다. 사용자가 인증을 받고 로그인을 했더라도, 해당 API를 호출할 수 있는 권한이 있는가를 확인 해야 한다.
API 인가 방식  권한 인가(Authorization) 방식에는 여러 가지 방식이 있는데, 대표적인 방식 몇 가지만 보면 가장 일반적인 권한 인증 방식으로는 사용자의 역할을 기반으로 하는 RBAC (Role Based Access Control) 이라는 방식이 있다. 이 방식은 정해진 연결에 권한을 연결해놓고, 이 역할을 가진 사용자에게 해당 권한을 부여하는 것이다.</description>
    </item>
    
    <item>
      <title>HTTP란 무엇일까? (draft)</title>
      <link>/post/2021/03/28/http%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-draft/</link>
      <pubDate>Sun, 28 Mar 2021 13:18:39 +0900</pubDate>
      
      <guid>/post/2021/03/28/http%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-draft/</guid>
      <description>참고 문헌  </description>
    </item>
    
    <item>
      <title>HTTP와 HTTPS의 차이점 (draft)</title>
      <link>/post/2021/03/28/http%EC%99%80-https%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90-draft/</link>
      <pubDate>Sun, 28 Mar 2021 13:18:39 +0900</pubDate>
      
      <guid>/post/2021/03/28/http%EC%99%80-https%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90-draft/</guid>
      <description>참고 문헌   RFC - 2818  </description>
    </item>
    
    <item>
      <title>REST API 보안 및 인증 방식</title>
      <link>/post/2021/03/28/rest-api-%EB%B3%B4%EC%95%88-%EB%B0%8F-%EC%9D%B8%EC%A6%9D-%EB%B0%A9%EC%8B%9D/</link>
      <pubDate>Sun, 28 Mar 2021 13:17:39 +0900</pubDate>
      
      <guid>/post/2021/03/28/rest-api-%EB%B3%B4%EC%95%88-%EB%B0%8F-%EC%9D%B8%EC%A6%9D-%EB%B0%A9%EC%8B%9D/</guid>
      <description>REST API 보안   보안에 관해서는 백번, 천번을 강조해도 과함이 없다. 근래의 대부분의 서비스 시스템들은 API를 기반으로 통신한다. 앱과 서버 간의 통신 또는 자바 스크립트 웹 클라이언트와 서버 간 대부분의 통신이 이 API들을 이용해서, 이루어지기 때문에 한번 보안이 뚫리면 개인 정보가 탈취되는 것 뿐만 아니라, 더 많은 문제를 일으킬 수 있다.  REST API 보안 관점 및 개요  인증(Authentication)  인증은 누가 서비스를 사용하는지를 확인하는 절차이다. 쉽게 생각하면 웹 사이트에 사용자 아이디와 비밀번호를 넣어서 사용자를 확인하는 과정이 인증이다.</description>
    </item>
    
    <item>
      <title>데이터베이스 스토리지 티어링이란 (draft)</title>
      <link>/post/2021/03/27/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%ED%8B%B0%EC%96%B4%EB%A7%81%EC%9D%B4%EB%9E%80-draft/</link>
      <pubDate>Sat, 27 Mar 2021 23:20:24 +0900</pubDate>
      
      <guid>/post/2021/03/27/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%ED%8B%B0%EC%96%B4%EB%A7%81%EC%9D%B4%EB%9E%80-draft/</guid>
      <description>스토리지 티어링이란  참고 문헌 </description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/27/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Sat, 27 Mar 2021 20:07:36 +0900</pubDate>
      
      <guid>/post/2021/03/27/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  네이버 기술 블로그를 대략적으로 보면서, 시스템 성능 분석 및 디버깅을 통해서 객관적인 자료를 수집하는 것을 보았다.  Feelings (느낌, 주관)  개발을 잘하기 위해서는 호기심을 가지고 실험을 많이 해보고, 이를 확인할 수 있는 디버깅 툴을 많이 알아두고 적재 적소에 사용할 수 있어야겠다. 나도 네트워크 패킷을 분석하면서 문제점을 빠르게 찾고 개선해나갈 수 있는 개발자가 될 것이다.  Findings (배운 점)  리눅스 도구 및 성능 측정 도구를 많이 사용해봐야겠다.</description>
    </item>
    
    <item>
      <title>인코딩과 캐릭터 셋의 차이(draft)</title>
      <link>/post/2021/03/27/%EC%9D%B8%EC%BD%94%EB%94%A9%EA%B3%BC-%EC%BA%90%EB%A6%AD%ED%84%B0-%EC%85%8B%EC%9D%98-%EC%B0%A8%EC%9D%B4draft/</link>
      <pubDate>Sat, 27 Mar 2021 17:29:39 +0900</pubDate>
      
      <guid>/post/2021/03/27/%EC%9D%B8%EC%BD%94%EB%94%A9%EA%B3%BC-%EC%BA%90%EB%A6%AD%ED%84%B0-%EC%85%8B%EC%9D%98-%EC%B0%A8%EC%9D%B4draft/</guid>
      <description>참고 문헌   테스트 주도 개발 시작하기, (최범균, 가메출판사)  </description>
    </item>
    
    <item>
      <title>REST 및 베스트 프랙티스</title>
      <link>/post/2021/03/27/rest-%EB%B0%8F-%EB%B2%A0%EC%8A%A4%ED%8A%B8-%ED%94%84%EB%9E%99%ED%8B%B0%EC%8A%A4/</link>
      <pubDate>Sat, 27 Mar 2021 17:20:39 +0900</pubDate>
      
      <guid>/post/2021/03/27/rest-%EB%B0%8F-%EB%B2%A0%EC%8A%A4%ED%8A%B8-%ED%94%84%EB%9E%99%ED%8B%B0%EC%8A%A4/</guid>
      <description>REST    REST는 웹의 창시자 중의 한 사람인 로이 필딩이 2000년에 발표한 논문에 의해서 처음 소개되었다.
  현대의 아키텍처가 웹의 장점을 잘 활용하지 못하고 있다고 판단했기 때문에 웹의 장점을 최대한 활용할 수 있는 네트워크 기반의 아키텍처를 소개했는데 그것이바로 Representational Safe Transfer(REST) 이다.
  REST는 근래에 들어 HTTP와 JSON을 함께 사용하여 OPEN API를 구현하는 방법으로 주류를 이루고 있으며, 대부분의 OPEN API는 이 REST 아키텍처를 기반으로 설계 및 구현되고 있다.</description>
    </item>
    
    <item>
      <title>리버스 프록시란 무엇일까? (draft)</title>
      <link>/post/2021/03/27/%EB%A6%AC%EB%B2%84%EC%8A%A4-%ED%94%84%EB%A1%9D%EC%8B%9C%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-draft/</link>
      <pubDate>Sat, 27 Mar 2021 14:47:39 +0900</pubDate>
      
      <guid>/post/2021/03/27/%EB%A6%AC%EB%B2%84%EC%8A%A4-%ED%94%84%EB%A1%9D%EC%8B%9C%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-draft/</guid>
      <description>참고 문헌  </description>
    </item>
    
    <item>
      <title>메시지 교환 패턴이란(MESSAGE EXCHNAGE PATTERN) (draft)</title>
      <link>/post/2021/03/27/%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B5%90%ED%99%98-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80message-exchnage-pattern-draft/</link>
      <pubDate>Sat, 27 Mar 2021 14:47:39 +0900</pubDate>
      
      <guid>/post/2021/03/27/%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B5%90%ED%99%98-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80message-exchnage-pattern-draft/</guid>
      <description>참고 문헌   MEP 패턴  </description>
    </item>
    
    <item>
      <title>아키텍처란 무엇인가?</title>
      <link>/post/2021/03/27/%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</link>
      <pubDate>Sat, 27 Mar 2021 14:23:33 +0900</pubDate>
      
      <guid>/post/2021/03/27/%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/</guid>
      <description>아키텍처란 무엇인가?  아키텍처에 대한 정의는 다음과 같다.
 &amp;ldquo;아키텍처는 비즈니스 요구사항을 만족하는 시스템을 구축하기 위해서 전체 시스템에 대한 구조를 정의한 문서로, 시스템을 구성하는 컴포넌트와 그 컴포넌트 간의 관계, 그리고 컴포넌트가 다루는 정보(데이터)를 정의한다&amp;rdquo;
 아키텍처 설계 프로세스    아키텍처 설계 방법론은 여러 가지가 있으나, 주로 사용되는 프레임워크로는 Zachman, TOGAF, Federal Enterprise Architecture등이 있다.
  그러나 이러한 전통적인 방법론은 학문적이고, 그 깊이가 매우 깊어서 일반적인 개발자들이 실무에 적용하기가 매우 어렵다.</description>
    </item>
    
    <item>
      <title>SOA, 모놀리틱, 그리고 MSA 아키텍처</title>
      <link>/post/2021/03/27/soa-%EB%AA%A8%EB%86%80%EB%A6%AC%ED%8B%B1-%EA%B7%B8%EB%A6%AC%EA%B3%A0-msa-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</link>
      <pubDate>Sat, 27 Mar 2021 13:40:33 +0900</pubDate>
      
      <guid>/post/2021/03/27/soa-%EB%AA%A8%EB%86%80%EB%A6%AC%ED%8B%B1-%EA%B7%B8%EB%A6%AC%EA%B3%A0-msa-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</guid>
      <description>SOA    SOA(Service Oriented Architecture)는 1990년대에 정의되어, 2008년에 유행했던 아키텍처 스타일이다.
  현대의 서버 아키텍처는 SOA 사상에 많은 영향을 받았고 많은 분산 아키텍처가 거의 이 SOA 사상에 기인한다고 해도 될 만큼 중요한 아키텍처이다.
  SOA의 기본 개념    SOA란 기존 애플리케이션들의 기능을 비즈니스적인 의미가 있는 기능 단위로 묶고, 표준화된 호출 인터페이스를 통해 서비스라는 소프트웨어 컴포넌트 단위로 재조합한 후, 이 서비스들을 서로 조합(Orchestration)하여 업무 기능을 구현한 애플리케이션을 만들어내는 소프트웨어 아키텍처이다.</description>
    </item>
    
    <item>
      <title>네이버 페이 배송 모듈 아키텍처 및 사용기술 분석</title>
      <link>/post/2021/03/27/%EB%84%A4%EC%9D%B4%EB%B2%84-%ED%8E%98%EC%9D%B4-%EB%B0%B0%EC%86%A1-%EB%AA%A8%EB%93%88-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EA%B8%B0%EC%88%A0-%EB%B6%84%EC%84%9D/</link>
      <pubDate>Sat, 27 Mar 2021 10:31:33 +0900</pubDate>
      
      <guid>/post/2021/03/27/%EB%84%A4%EC%9D%B4%EB%B2%84-%ED%8E%98%EC%9D%B4-%EB%B0%B0%EC%86%A1-%EB%AA%A8%EB%93%88-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EA%B8%B0%EC%88%A0-%EB%B6%84%EC%84%9D/</guid>
      <description>많은 양의 트래픽을 감당하고 어떻게 고가용성의 시스템을 구축하는지 알아보기 위해서 네이버 기술 블로그 및 세미나를 보면서 사용하는 기술을 분석하고 어떤 고민을 하고 있는지 살펴보았다.
네이버 페이가 고민했던 문제점  
위에 있는 기술 세미나 영상을 보면서, 기존에 네이버 페이에서 발생했던 문제점들과 이를 해결하기 위한 기술들을 살펴볼 수 있었다.
네이버 페이에서 유저와 상호 작용하는 서비스  스마트 스토어에 보이는 주문형 페이 배달의 민족에 연동되어 있는 결제형 페이 송금 네이버 통장  배송 모듈은 주문형 페이에 속하고, 주문형 페이에는 이커머스 삼대장인 주문, 배송, 클레임 을 관리하는 부서이다.</description>
    </item>
    
    <item>
      <title>샤딩이란(draft)</title>
      <link>/post/2021/03/27/%EC%83%A4%EB%94%A9%EC%9D%B4%EB%9E%80draft/</link>
      <pubDate>Sat, 27 Mar 2021 09:20:24 +0900</pubDate>
      
      <guid>/post/2021/03/27/%EC%83%A4%EB%94%A9%EC%9D%B4%EB%9E%80draft/</guid>
      <description>샤딩  참고 문헌  모바일 서버 프로그래밍 입문, 얼랭으로 만들며 배운다  </description>
    </item>
    
    <item>
      <title>클러스터링이란?(draft)</title>
      <link>/post/2021/03/27/%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81%EC%9D%B4%EB%9E%80draft/</link>
      <pubDate>Sat, 27 Mar 2021 09:20:24 +0900</pubDate>
      
      <guid>/post/2021/03/27/%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81%EC%9D%B4%EB%9E%80draft/</guid>
      <description>클러스터링  참고 문헌  모바일 서버 프로그래밍 입문, 얼랭으로 만들며 배운다  </description>
    </item>
    
    <item>
      <title>CONCURRENCY(동시성)와 PARALLELISM(병행성) (draft)</title>
      <link>/post/2021/03/27/concurrency%EB%8F%99%EC%8B%9C%EC%84%B1%EC%99%80-parallelism%EB%B3%91%ED%96%89%EC%84%B1-draft/</link>
      <pubDate>Sat, 27 Mar 2021 01:09:24 +0900</pubDate>
      
      <guid>/post/2021/03/27/concurrency%EB%8F%99%EC%8B%9C%EC%84%B1%EC%99%80-parallelism%EB%B3%91%ED%96%89%EC%84%B1-draft/</guid>
      <description>CONCURRENCY(동시성)와 PARALLELISM(병행성)  병행성  동시성    CONCURRENCY(동시성) 에서 가장 중요한 것은 동시에 수행되는 기능들의 빠른 반응이다.
  이러한 빠른 반응은, 운영체제의 핵심인 커널에서 프로세스 스케줄러가 선점형(Preemption)으로 동작하느냐가 관건이다.
  CPU 자원은 한정되어 있는데 반해서 작업 진행이 필요한 프로세스들은 여러 개가 생길 수 있다. 이때 CPU 자원을 어떻게 분배하느냐가 스케줄링이 필요한 이유이다.
  컴퓨터에서 사용자가 파일을 다운로드 받을 때 파일을 다운로드 받는 프로세스가 CPU 자원을 할당 받아서 작업을 진행하게 된다.</description>
    </item>
    
    <item>
      <title>트랜잭션과 ACID</title>
      <link>/post/2021/03/26/%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EA%B3%BC-acid/</link>
      <pubDate>Fri, 26 Mar 2021 23:20:24 +0900</pubDate>
      
      <guid>/post/2021/03/26/%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EA%B3%BC-acid/</guid>
      <description>누군가 트랜잭션에 대해서 물어보았을 때, 분명히 알고 있다고 생각한 것인데도 제대로 답변하지 못했다. 이건 평소에 생각이 정리되지 않아서 그런 것 같다. 따라서 이참에 이에 대해서 정리를 해보도록 했다.
트랜잭션이란  위키 백과에서는 트랜잭션을 다음과 같이 정의하고 있다.
  데이터베이스 트랜잭션은 데이터베이스에 대해서 DBMS 내에서 수행되고 다른 트랜잭션과 무관하게 일관되고 신뢰할 수 있는 방식으로 처리되는 작업 단위를 말한다.
  트랜잭션은 일반적으로 데이터베이스의 모든 변경 사항이 있다.
  데이터베이스 환경의 트랜잭션에는 두 가지의 주요 목적이 있다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/26/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Fri, 26 Mar 2021 20:07:36 +0900</pubDate>
      
      <guid>/post/2021/03/26/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  오늘 일을 하기전에, 내가 어떤 일을 할 계획이고 그 일이 마감되었다면 내가 구현한 것을 녹화하여 공유하였다. 내가 경험해보지 못한 생소한 업계에는 어떤 기술을 사용하고, 어떤 고민을 할까라는 생각을 해봤다.  Feelings (느낌, 주관)  그렇게 하니까 동료들이 내가 무엇을 했는지 쉽게 이해할 수 있고, 개발자 뿐만 아니라 PM 및 QA 분들도 작업이 어떻게 진행되고 있는지 쉽게 이해하시는 것 같았다. 내가 어떤 일을 하고 있는지 설명하기가 더 쉬워지고 상대방도 더 빠르게 이해하는 것 같았다.</description>
    </item>
    
    <item>
      <title>CAP 이론이란?</title>
      <link>/post/2021/03/26/cap-%EC%9D%B4%EB%A1%A0%EC%9D%B4%EB%9E%80/</link>
      <pubDate>Fri, 26 Mar 2021 09:20:24 +0900</pubDate>
      
      <guid>/post/2021/03/26/cap-%EC%9D%B4%EB%A1%A0%EC%9D%B4%EB%9E%80/</guid>
      <description>CAP 정리    CAP 정리에 의하면 시스템은 일관성(Consistency), 가용성(Availablity), 분단 허용성(Partition torlerance) 세 가지 속성중에서, 두 가지만 가질 수 있다는 것이다.
  위의 그림에서 볼 수 있듯이, Consistency, Availablity를 합치면, CA 또는 Consistency와 Partition tolerance를 조합하면 AP가 된다.
  이 모든 속성을 다 포함한 시스템은 절대로 존재할 수 없다는 것이 CAP 정리이다.
  각 특징의 의미    일관성(Consistency) : 데이터를 저장하는 장비가 1대 든 100대든 모든 장비에서 동일한 데이터가 저장되어 있어야 한다는 것이다.</description>
    </item>
    
    <item>
      <title>MVCC(다중 버전 동시성 제어)란 (draft)</title>
      <link>/post/2021/03/26/mvcc%EB%8B%A4%EC%A4%91-%EB%B2%84%EC%A0%84-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%A0%9C%EC%96%B4%EB%9E%80-draft/</link>
      <pubDate>Fri, 26 Mar 2021 09:20:24 +0900</pubDate>
      
      <guid>/post/2021/03/26/mvcc%EB%8B%A4%EC%A4%91-%EB%B2%84%EC%A0%84-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%A0%9C%EC%96%B4%EB%9E%80-draft/</guid>
      <description>참고 문헌 </description>
    </item>
    
    <item>
      <title>TWO-PHASE COMMIT 이란?(draft)</title>
      <link>/post/2021/03/26/two-phase-commit-%EC%9D%B4%EB%9E%80draft/</link>
      <pubDate>Fri, 26 Mar 2021 09:20:24 +0900</pubDate>
      
      <guid>/post/2021/03/26/two-phase-commit-%EC%9D%B4%EB%9E%80draft/</guid>
      <description>참고 문헌 </description>
    </item>
    
    <item>
      <title>합의(Consensus) 알고리즘이란(draft)</title>
      <link>/post/2021/03/26/%ED%95%A9%EC%9D%98consensus-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80draft/</link>
      <pubDate>Fri, 26 Mar 2021 09:20:24 +0900</pubDate>
      
      <guid>/post/2021/03/26/%ED%95%A9%EC%9D%98consensus-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80draft/</guid>
      <description>참고 문헌   WIKI - Consensus
  ZOOKEEPER DOCS - CONSENSUS ALGORITHMS
  Demystifying Consensus Algorithms and Their Implementations
  RAFT 합의 알고리즘
  D2 - Raft 분산 합의 알고리즘과 Python에서의 활용
  </description>
    </item>
    
    <item>
      <title>IoC의 여러가지 구현 방식(draft)</title>
      <link>/post/2021/03/25/ioc%EC%9D%98-%EC%97%AC%EB%9F%AC%EA%B0%80%EC%A7%80-%EA%B5%AC%ED%98%84-%EB%B0%A9%EC%8B%9Ddraft/</link>
      <pubDate>Thu, 25 Mar 2021 19:03:23 +0900</pubDate>
      
      <guid>/post/2021/03/25/ioc%EC%9D%98-%EC%97%AC%EB%9F%AC%EA%B0%80%EC%A7%80-%EA%B5%AC%ED%98%84-%EB%B0%A9%EC%8B%9Ddraft/</guid>
      <description>스프링 문서를 보면서, IoC에 대해서 공부를 하다가, 서비스 로케이터 패턴을 알게 되었다. 서비스 로케이터 패턴을 조사하다가 자연스럽게 다른 IoC 구현 방식도 알게 되었는데 정리를 해보았다.
참고 문헌  IOC 구현 방식  </description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/25/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Thu, 25 Mar 2021 18:07:36 +0900</pubDate>
      
      <guid>/post/2021/03/25/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  팀 회식을 했다. 회의때 진행한 이야기중에 내가 놓친것들이 있었다.  Feelings (느낌, 주관)  회의때 집중을 해야겠다는 생각을 하게 되었고, 부끄러웠다.  Findings (배운 점)  회의때 내용을 파악하고 이를 기록하자.  Bad (개선할 점)  일을 진행할 때 다시한번 회의때 내가 파악하고 있는것이 맞는지 확인하자.  Affimation (자기 선언)  회의때 집중하고, 내가 놓친부분이 있을 수 있으니 이를 확인하고 일을 시작하자.  회고 작성법  Facts(사실, 객관) 회사에서 실제로 내가 했던 일이나 겪었던 일의 사실을 적는다.</description>
    </item>
    
    <item>
      <title>빈 펙토리와 애플리케이션 컨텍스트의 차이</title>
      <link>/post/2021/03/24/%EB%B9%88-%ED%8E%99%ED%86%A0%EB%A6%AC%EC%99%80-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4/</link>
      <pubDate>Wed, 24 Mar 2021 23:30:23 +0900</pubDate>
      
      <guid>/post/2021/03/24/%EB%B9%88-%ED%8E%99%ED%86%A0%EB%A6%AC%EC%99%80-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4/</guid>
      <description>궁금증을 가지게 된 이유    스프링 문서를 보면서 공부하다가 위와 같은 문구를 보게 되었다. ApplicationContext가 BeanFactory의 서브 타입의 인터페이스라는 것이다.
  그렇다면 무슨 차이가 있을까라는 생각을 하게 되었다.
  BEAN FACOTRY  다행스럽게도 위와 같은 문서가 스프링 공식문서에서 제공되고 있었다. 차이점은 아래와 같다.
 BeanFactory API는 Spring IoC 기능을 위한 기초적인 기반을 제공한다. 이것의 구체적인 계약은, 주로 스프링의 다른 부분과 관련된 써드 파티 프레임워크와의 통합에 사용된다. BeanFactory 및 관련 인터페이스 (예: BeanFactoryAware, Initializing Bean, DispisableBean)는 다른 프레임워크 구성 요소의 중요한 통합지점이다.</description>
    </item>
    
    <item>
      <title>IoC 컨테이너란 무엇일까</title>
      <link>/post/2021/03/24/ioc-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C/</link>
      <pubDate>Wed, 24 Mar 2021 18:13:23 +0900</pubDate>
      
      <guid>/post/2021/03/24/ioc-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C/</guid>
      <description>스프링 전반적인 기술을 주제로 사내 세미나를 하였다. 따라서 이를 공식 문서를 보면서 복습하면서 다시 정리해보았다.
  스프링 코어 문서 가장 첫 부분에 나와있는 문구이다. 전체적인 기술을 다루지만 특히 스프링 프레임워크의 IoC(Inversion of Control) 컨테이너가 가장 중요하다고 나와있다.
  Spring Framework의 IoC 컨테이너에 대한 처리는 Spring의 AOP(Aspect-Oriented Programmin) 기술을 밀접하게 따르고 있다고 한다.
  스프링 프레임워크는 개념적으로 이해하기 쉽고 자바 엔터프라이즈 프로그래밍에서 AOP 요구사항의 80%를 성공적으로 해결하는 AOP 프레임워크가 있다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/24/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Wed, 24 Mar 2021 09:07:36 +0900</pubDate>
      
      <guid>/post/2021/03/24/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  SOP에 대해서 정리해보았다. 스프링 문서를 보면서, 세미나에서 들었던 내용을 다시 한번 보았다. 빈 펙토리와 애플리케이션 컨텍스트의 차이에 대해서 알게 되었다.  Feelings (느낌, 주관)  SOP에 대해서 정리하면서 CORS에 대해서도 알게 되었는데, 퍼즐이 맞춰지는 기분이였다. 이전에는 CORS 에러가 발생했을 때, 왜 발생했는지 원인을 파악하고 해결 방법만 찾고나서 끝이였다. 하지만 중요한 것은 왜 브라우저에서 CORS 에러를 나게 했을까라는 근본적인 물음을 가지고, 해결하는 것이 중요하다는 생각을 했다.</description>
    </item>
    
    <item>
      <title>CSP(Content Security Policy) 란 무엇일까? (draft)</title>
      <link>/post/2021/03/23/cspcontent-security-policy-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-draft/</link>
      <pubDate>Tue, 23 Mar 2021 22:20:39 +0900</pubDate>
      
      <guid>/post/2021/03/23/cspcontent-security-policy-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-draft/</guid>
      <description>참고 문헌   MDN - CSP  </description>
    </item>
    
    <item>
      <title>SOP(Same-origin policy) 란 무엇일까?</title>
      <link>/post/2021/03/23/sopsame-origin-policy-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C/</link>
      <pubDate>Tue, 23 Mar 2021 22:20:39 +0900</pubDate>
      
      <guid>/post/2021/03/23/sopsame-origin-policy-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C/</guid>
      <description>브라우저 보안 정책에 SOP(same-origin-policy) 있다는 것을 알게 되었고, 어떤건지 궁금해서 찾아보았다. 마침 MDN 문서에 잘 나와있어서 이를 참조할 수 있었다.
Same-Origin-Policy(동일 출처 정책)    SOP는 한 Origin에서 로드된 문서 또는 스크립트가 다른 Origin의 리소스와 상호 작용할 수 있는 방법을 제한하는 중요한 보안 메커니즘이다.
  보안을 위협하는 문서를 격리하여, 보안 위협으로부터 보호할 수 있다.
  한마디로 말해서 웹 브라우저에서 동작하는 프로그램은 로딩된 위치에 있는 리소스만 접근 할 수 있다는 정책이다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/23/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Tue, 23 Mar 2021 21:07:36 +0900</pubDate>
      
      <guid>/post/2021/03/23/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  내가 정리했던 블로그 글을 정해서, 남이 궁금해서 물어볼 때, 설명을 할 수 있는지 알아보기 위해, 녹화를 해보았다. 웹 애플리케이션 보안이라는 책을 읽었다.  Feelings (느낌, 주관)  분명히 알고 있다고 생각한 것인데도 불구하고 정리가 되지 않아 버벅거리고 힘들었다.  Findings (배운 점)  블로그에 기술적인 내용을 정리하고, 스스로 제대로 이해하고 있는지 문제를 만들어서 직접 풀어보도록 해야겠다. 그리고, 이를 스스로 녹화해보면서 다른 사람이 내 설명을 어떻게 들었는지 테스트 해본다면 좋을 것이다.</description>
    </item>
    
    <item>
      <title>TCP/IP 및 네트워크 계층 및 RFC 791 (draft)</title>
      <link>/post/2021/03/22/tcp/ip-%EB%B0%8F-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B3%84%EC%B8%B5-%EB%B0%8F-rfc-791-draft/</link>
      <pubDate>Mon, 22 Mar 2021 23:20:39 +0900</pubDate>
      
      <guid>/post/2021/03/22/tcp/ip-%EB%B0%8F-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B3%84%EC%B8%B5-%EB%B0%8F-rfc-791-draft/</guid>
      <description>네트워크 통신   네트워크 통신은 관점에 따라 OSI 7 모델과 TCP/IP 모델 두가지로 설명할 수 있다. OSI 7 모델은 1984년에 ISO (국제 표준화 기술)에 의해 표준화되었고, 통신이 이루어지는 과정을 단계별로, 파악할 수 있도록 7 개의 계층인 물리, 데이터링크, 네트워크, 전송, 세션, 표현, 응용 계층으로 구분되어 있으며 네트워크 구현을 연구하고 배우기에 적합한 구조다. 반면에, TCP/IP 모델은 현장에 많이 사용하는 기술 위주로 4계층으로 단순화한 모델로, 실제 사용하는 프로토콜 규약은 이 모델을 따르고 있다.</description>
    </item>
    
    <item>
      <title>최근에 애플리케이션 보안에 관심을 가지게 된 이유</title>
      <link>/post/2021/03/22/%EC%B5%9C%EA%B7%BC%EC%97%90-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88%EC%97%90-%EA%B4%80%EC%8B%AC%EC%9D%84-%EA%B0%80%EC%A7%80%EA%B2%8C-%EB%90%9C-%EC%9D%B4%EC%9C%A0/</link>
      <pubDate>Mon, 22 Mar 2021 23:20:39 +0900</pubDate>
      
      <guid>/post/2021/03/22/%EC%B5%9C%EA%B7%BC%EC%97%90-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B3%B4%EC%95%88%EC%97%90-%EA%B4%80%EC%8B%AC%EC%9D%84-%EA%B0%80%EC%A7%80%EA%B2%8C-%EB%90%9C-%EC%9D%B4%EC%9C%A0/</guid>
      <description>최근에 내가 웹 애플리케이션 보안에 대해서 굉장히 무관심함을 알게 됨과 동시에 데이터베이트 연결이 끊어지는 네트워크 통신과 관련된 장애가 있었다.
장애의 이유를 알지 못하니까 굉장히 답답함과 동시에 문제를 해결할 수 없었다. 따라서 디버깅을 하듯이 네트워크 패킷을 분석해서 원인을 알아 낼 수 있으면 굉장히 좋을 것 같다는 생각을 함과 동시에 내가 주도하면서 진행하는 토이 프로젝트가 보안에 대해서 굉장히 견고한 애플리케이션이 되었으면 하는 마음이 있다. 따라서, 앞으로 웹 애플리케이션 보안에 대해서 공부하고 견고한 시스템을 구축해나갈 생각이다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/22/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Mon, 22 Mar 2021 20:07:36 +0900</pubDate>
      
      <guid>/post/2021/03/22/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  아커스 이슈 구현을 하는데, 전체적인 흐름 및 구현 위치는 파악을 하였으나, 자료구조를 정확히 파악하지 못해서, 어디서부터 손대야할지 감이오지 않고, 깊은 이해를 하기 힘들었다. 대학교 동기들과 토이프로젝트를 시작했다. 회사에서 일하면서 소프트웨어 스펙을 정하고 어떤 것을 만들지 구체화 하는 과정이 중요하다는 것을 깨달았기 때문에, 지루하기는 하지만 작성하고 있다.  Feelings (느낌, 주관)  프로젝트를 주관해서 이끌어 가는 일이 힘들것이라고 예상했지만 생각보다 많은 공수가 들었다. 그래도 처음이 가장 힘들것이라고 생각하고 프로세스가 정립되면 쉬워질 것이다.</description>
    </item>
    
    <item>
      <title>주간 회고</title>
      <link>/post/2021/03/21/%EC%A3%BC%EA%B0%84-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Sun, 21 Mar 2021 17:15:39 +0900</pubDate>
      
      <guid>/post/2021/03/21/%EC%A3%BC%EA%B0%84-%ED%9A%8C%EA%B3%A0/</guid>
      <description>주간 회고 이번주에 있던 일들을 종합해서 회고를 해보고 정리를 해보았습니다.
Facts (사실, 객관)  코딩을 하면서, 사소한 실수가 발견되었고 재배포를 해야하는 상황이 되었다. 내가 아는 것을 다른사람에게 설명하는데 생각보다 말이 잘 나오지 않았고, 더듬더듬 말하고 있었다. 오랜만에 코딩 테스트 문제를 풀어보았다.  Feelings (느낌, 주관)  다른 사람들에게 미안하기도 했고, 시간이 많이 소모되었다. 다른 사람에게 쉽게 설명할 수 없으면 제대로 아는 것이 아니라는 생각이 들었다. 남들이 꺼려하는 일을 먼저 나서서 하려고 하는 자세가 동료들에게 신뢰를 줄 수 있을 것같다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/20/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Sat, 20 Mar 2021 07:07:36 +0900</pubDate>
      
      <guid>/post/2021/03/20/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  오랜만에 코딩 테스트 문제를 풀어봤다.  Feelings (느낌, 주관)  직장을 구하기 전에는 코딩 테스트가 그저 스트레스였는데, 오랜만에 풀어보니까 매우 재미있었다.  Findings (배운 점)  재귀를 활용해서 푸는 문제가 있었는데 재귀를 이용하니까 너무 시간이 오래 걸렸다. 따라서 메모이제이션을 공부하고 이를 이용해서 풀 수 있는지 생각을 해봐야할 것 같다. 추가로 다이나믹 프로그래밍을 이용해서 문제를 푸는 방법 및 DFS BFS 문제를 공부해야겠다.  Bad (개선할 점)  알고리즘 문제를 평소에 풀어보자.</description>
    </item>
    
    <item>
      <title>SQLAlchemy 세션(draft)</title>
      <link>/post/2021/03/19/sqlalchemy-%EC%84%B8%EC%85%98draft/</link>
      <pubDate>Fri, 19 Mar 2021 16:40:24 +0900</pubDate>
      
      <guid>/post/2021/03/19/sqlalchemy-%EC%84%B8%EC%85%98draft/</guid>
      <description>참고 문헌  Transactions and Connection Management  </description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/19/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Fri, 19 Mar 2021 07:07:36 +0900</pubDate>
      
      <guid>/post/2021/03/19/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)   테스트 코드를 REST DOCS를 이용해서 문서화하는 법에 대해서 배울 수 있었다.
  웹 애플리케이션 보안에 대해서 더 많이 배우기 위해서 다음과 같은 책을 구매했다.웹 애플리케이션 보안
  이번에 GC 및 JVM에 대해서 더 자세히 알고 싶어서 책을 구매 하였다. 자바 성능 튜닝이야기
  서버와 브라우저에 대해서 앞으로 더 깊게 공부를 해야겠다는 마음을 먹었다.
  Feelings (느낌, 주관)  나의 부족한 점을 채우기 위해서 더 열심히 공부를 해야겠다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/18/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Thu, 18 Mar 2021 22:11:39 +0900</pubDate>
      
      <guid>/post/2021/03/18/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  오늘은 회사에서 배포를 기다리고 문제가 생겼을 때, 대응하기 위해서 대기하는 시간이 많았고, 이때 평소에 궁금했던 것과 현재 프로젝트에 적용하면 좋을 기술들을 찾아보고 정리하였다. 같은 솔루션을 진행하는 선배에게 프로젝트에 트랜잭션 처리를 위해서 조사를 하고 있다고 솔직하게 말하고 공부를 하였다.  Feelings (느낌, 주관)  트랜잭션에 대해서 공부하게 되었는데, SQLAlchemy 에서 트랙잭션을 사용하느 법과 세션마다 고립 레벨을 설정하는 법에 대해서 배우게 되었다. 하지만, 현재 프로젝트에 어떻게 적용하면 좋을지 조금 막막했다.</description>
    </item>
    
    <item>
      <title>SQLAlchemy에서 트랜잭션 사용법</title>
      <link>/post/2021/03/18/sqlalchemy%EC%97%90%EC%84%9C-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%82%AC%EC%9A%A9%EB%B2%95/</link>
      <pubDate>Thu, 18 Mar 2021 13:20:24 +0900</pubDate>
      
      <guid>/post/2021/03/18/sqlalchemy%EC%97%90%EC%84%9C-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid>
      <description>회사에서 이슈 진행을 하다가, 트랜잭션를 이용하여 처리해야하는 부분을 발견하였다. 따라서 SQLAlchemy에서는 트랜잭션을 어떻게 사용하는지 정리해보도록 하겟다.
트랜잭션 관리하기  새롭게 생성된 세션은 begin() 상태이다. begin() 상태에서 Session은 아직 어떠한 Connection 및 Transactional과 연관되지 않았다. 그러한 다음에, Session 은 데이터베이스 커넥션 요청을 수신한다. 일반적으로, 이것은 Engine을 이용하여, 특정 SQL 문을 수행해야하는 것을 의미한다. 특정 SQL문의 수행은 Session.query(), Session.execute() 통해 이루어지고 Session.commit(), Session.flush()를 할 때 보류된 변경 사항을 비우고 커밋하면서 발생합니다. 이러한 요청이 수신되면, 새로운 엔진 각각이 세션에서 유지되고 관리하는 트랜잭션 상태와 연결이 된다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/17/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Wed, 17 Mar 2021 22:37:39 +0900</pubDate>
      
      <guid>/post/2021/03/17/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  오늘 자투리 시간이 굉장히 많았음에도 불구하고, 시간을 가치있게 사용하지 못했다. 신규 개발을 거의 하지 않고, 유지보수만 하였더니 API 설계에 대한 감이 완전히 죽었다.  Feelings (느낌, 주관)  평소에는 시간이 없다고 불평하였는데, 예상하지 못하게 시간이 비어있을 경우에는 내가 시간을 제대로 활용하지 못했다. 업무상 많이 다루지 않는 기술을 조금 놔버렸던 것 같다.  Findings (배운 점)  예상하지 못하게 자투리 시간을 활용할 수 있도록 항상 고민을 해야겠다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/16/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Tue, 16 Mar 2021 12:37:39 +0900</pubDate>
      
      <guid>/post/2021/03/16/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  오늘 내가 정말 아는 것이 없구나라는 것을 깨닫게 되었다. 내가 아는 것도 없고 설명도 잘 못한다는 것을 알게 되었다. 코드 리뷰를 통해서, 개인의 역량에 모든 것을 맡기지 않는 방법도 알게 되었다.  Feelings (느낌, 주관)  어렴풋이 들어봤던 것 같은데, 설명하려고 애를 쓰니까 굉장히 힘들었다. 내가 어떤 것을 안다고 생각하는 기준이 다른 사람에 비해서 터무니 없이 낮고, 얕았다. 코드 리뷰를 한다고 해서, 대충짜도 된다고 생각하지 말고, 다른 사람에게 내가 작성한 의도와 왜 이렇게 작성했냐고 물어보았을 때 항상 대답할 수 있게 알고 작성하자.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/15/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Mon, 15 Mar 2021 07:37:39 +0900</pubDate>
      
      <guid>/post/2021/03/15/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  Javadoc을 영어로 작성할 때에는, 3인칭 단수로 작성한다. 자바독을 많이 읽어보면서 어떻게 작성했는지 알아보는 것이 좋다. 코딩을 하면서, 부주의한 실수를 하였다.  Feelings (느낌, 주관)  어떻게 보면 별것 아니라고 생각을 할지 모르겠지만, 다른 사람들의 시간을 많이 낭비하였다.  Findings (배운 점)  나의 사소한 실수로 인해서, 다른 사람들의 시간을 낭비시키지 말자.  Bad (개선할 점)  코드를 작성하고 나서, 실수를 한 것이 없는지 꼼꼼히 살펴보자.</description>
    </item>
    
    <item>
      <title>주간 회고</title>
      <link>/post/2021/03/14/%EC%A3%BC%EA%B0%84-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Sun, 14 Mar 2021 20:20:39 +0900</pubDate>
      
      <guid>/post/2021/03/14/%EC%A3%BC%EA%B0%84-%ED%9A%8C%EA%B3%A0/</guid>
      <description>주간 회고 이번주에 있던 일들을 종합해서 회고를 해보고 정리를 해보았습니다.
커뮤니케이션 및 협업 능력  업무를 할 때, 상황 설명 및 커뮤니케이션을 조리있게 하지 못하고 이로 인해서 협업에 여려움을 느끼고 있었다. 어떻게 하면 내가 말을 좀 더 조리있게 잘하고 다른 사람들이 이해할 수 있을까라는 고민을 하던 중에, 다음과 같은 프레임워크를 알게 되었다.
 Situation, task, action, result  쉽게 말하면서 어떤 상황 및 이야기를 할 때, 다음과 같은 순서에 따라서 말을 하는 것이다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/13/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Sat, 13 Mar 2021 23:40:39 +0900</pubDate>
      
      <guid>/post/2021/03/13/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  어제 회사에서 일한 모습을 곰곰히 생각을 해보았다. 운동을 배우면 좋다는 이야기를 들었다.  Feelings (느낌, 주관)  업무중에 사소한 거짓말을 하거나 오해의 소지를 가질 수 있는 말을 하는 것 같다. 도메인 지식을 완전히 이해하지 못하다보니까, 업무를 할당 받아도 목적을 잘 이해하지 못하는 것 같다. 나도 요즘에 체력이 많이 줄어든 것 같은데 운동을 배워야겠다는 생각이 들었다.  Findings (배운 점)  사소한 것이라도 동료들에게 명확하게 말하며, 순간의 실수를 만회하려고 거짓말을 해서는 안된다.</description>
    </item>
    
    <item>
      <title>객체지향 5원칙 (SOLID)</title>
      <link>/post/2021/03/13/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-5%EC%9B%90%EC%B9%99-solid/</link>
      <pubDate>Sat, 13 Mar 2021 13:40:33 +0900</pubDate>
      
      <guid>/post/2021/03/13/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-5%EC%9B%90%EC%B9%99-solid/</guid>
      <description>회사에서 객체지향 및 SOLID 원칙에 대해서 설명하는 세미나를 진행하였다.
 사내 세미나 과제  객체지향 5원칙 (SOLID) 원칙  SRP (Single Responsiblity Principle) - 단일 책임 원칙  하나의 클래스는 하나의 책임만 가져야 한다. 어떤 변화 (요구 사항등의 변화)에 의해서 클래스를 변경해야하는 이유는 오직 하나여야 한다. 나머지 4원칙의 기초가 되는 원칙으로 SRP만 잘 지키면 다른 책임의 변경으로 인한 연쇄 작용을 방지할 수 있다.  OCP (Open-Closed Principle) - 개방, 폐쇄 원칙   SW의 구성 요소 (모듈, 컴포넌트, 클래스, 메서드)는 확장에는 열려있고 변경에는 닫쳐있어야 한다.</description>
    </item>
    
    <item>
      <title>사내 세미나 과제 피드백 CH10 - Future, ComputableFuture</title>
      <link>/post/2021/03/13/%EC%82%AC%EB%82%B4-%EC%84%B8%EB%AF%B8%EB%82%98-%EA%B3%BC%EC%A0%9C-%ED%94%BC%EB%93%9C%EB%B0%B1-ch10-future-computablefuture/</link>
      <pubDate>Sat, 13 Mar 2021 11:40:33 +0900</pubDate>
      
      <guid>/post/2021/03/13/%EC%82%AC%EB%82%B4-%EC%84%B8%EB%AF%B8%EB%82%98-%EA%B3%BC%EC%A0%9C-%ED%94%BC%EB%93%9C%EB%B0%B1-ch10-future-computablefuture/</guid>
      <description>회사에서 자바 비동기 처리 및 Future, CompletableFuture에 대해서 세미나를 진행하였다.
과제를 진행하면서, 비동기 프로그래밍 및 자바에서 비동기 프로그래밍을 어떻게 사용하는지 생각해 볼 수 있었다.
 사내 세미나 과제  친절하게 피드백을 해주셨기 때문에, 내가 ComputableFuture를 잘못사용하고 있다는 사실을 알게 되었다.
repository.retrieveCategories().parallelStream() .map(category -&amp;gt; CompletableFuture.supplyAsync(() -&amp;gt; repository.retrieveBooksByCategory(category))) .collect(Collectors.toList()) .parallelStream() .map(CompletableFuture::join) // (1) .flatMap(Collection::parallelStream) .collect(Collectors.toList()) .parallelStream() .map(book -&amp;gt; CompletableFuture.runAsync(() -&amp;gt; repository.updateAuthor(book, author), executors)) .collect(Collectors.toList()) .forEach(CompletableFuture::join); // (2) executors.shutdown(); 위의 코드는 내가 처음에 제출한 코드이다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/12/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Fri, 12 Mar 2021 23:20:39 +0900</pubDate>
      
      <guid>/post/2021/03/12/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  현상보다는 원인을 분석할 수 있어야 할 것 같다.  Feelings (느낌, 주관)  오늘 성급하게 기존 소스코드에 문제가 있다고 생각 했는데, 사실 그게 아니였고 URS 스펙 문서를 보면서, 도메인 로직을 모르고 있어서 발생한 문제인 것을 알게 되었다. 도메인 지식을 무시하지 말고, 코딩 실력보다 사실 업무를 하는데 있어서는 도메인 로직이 중요하다는 것을 알게 되었다.  Findings (배운 점)  도메인 로직을 코드 상에서 드러낼 수 있도록 하는 것이 중요함과 동시에, 그렇지 못하다면 직접 검증하는 자세가 필요하다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/11/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Thu, 11 Mar 2021 23:20:39 +0900</pubDate>
      
      <guid>/post/2021/03/11/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  오늘 다른 사람의 소스 코드를 내 마음대로 수정했다가, 조심해달라는 이야기를 들었다. 기존의 소스 코드가 잘못되어 있더라도, 최소한의 영향을 주는 방향으로 코딩하는 것이 좋을 수도 있다는 생각을 했다.  Feelings (느낌, 주관)  상대방의 입장에서는 기분이 나쁠 수도 있는데, 화내지 않고 말해줘서 고마웠다.  Findings (배운 점)   다른 사람의 소스코드를 고칠 때는, 의견을 물어보고 고치도록하고, 어떠한 부탁을 할 때는 최대한 감정을 들어내지 않고 말하도록 해야겠다.</description>
    </item>
    
    <item>
      <title>스프링 시큐리티 아키텍처 (미완성)</title>
      <link>/post/2021/03/11/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%AF%B8%EC%99%84%EC%84%B1/</link>
      <pubDate>Thu, 11 Mar 2021 07:20:33 +0900</pubDate>
      
      <guid>/post/2021/03/11/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%AF%B8%EC%99%84%EC%84%B1/</guid>
      <description>인증(Authentication)과 인과(Authorization)   어플리케이션 보안은 두가지의 독립적인 문제로 나뉜다. 바로 인증(authentication)과 인가(authorization)이다. 인증은 (who are you?) 이고, 인가는 (what are you allowed to do?) 스프링 시큐리티는 인증과 인과를 분리하도록 설계된 아키텍처를 가지고 있으며, 두 가지 모두에 대한 전략과 확장 할 수 있는 포인트가 존재한다.  인증 (Authentication)  public interface AuthenticationManager { Authentication authenticate(Authentication authentication) throws AuthenticationException; }   인증을 위한, AuthenticationManager 라는 인터페이스를 제공한다.
  AuthenticationManager는 authenticate 라는 메서드를 제공하는데, 다음과 같은 3가지 일을 한다.</description>
    </item>
    
    <item>
      <title>CSRF 란 무엇일까?</title>
      <link>/post/2021/03/10/csrf-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C/</link>
      <pubDate>Wed, 10 Mar 2021 22:20:39 +0900</pubDate>
      
      <guid>/post/2021/03/10/csrf-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C/</guid>
      <description>CSRF    CSRF(Cross-Site Request Forgery)는 신뢰할 수 있는 사용자를 가장하여 웹 사이트에 원치않는 명령을 보내는 공격입니다.
  예를 들어, 다른 곳으로 이동하기 위해 사용하는 링크 뒤에 있는 URL에 악의적인 매겨변수를 포함시킴으로써 다음을 수행할 수 있다.
  &amp;lt;img src=&amp;quot;https://www.example.com/index.php?action=delete&amp;amp;id=123&amp;quot;&amp;gt;   해당 도메인에 수정 권한이 있는 사용자의 경우 &amp;lt;img&amp;gt; 요소가, 사용자 모르게 동작을 수행한다.
  심지어, 요소가 https://www.example.com에 없는 경우에도 실행된다.
  CSRF를 방지하는 방법은 RestfulAPI 구현 및 시큐어 토큰을 추가하는 등 많은 방법이 있다.</description>
    </item>
    
    <item>
      <title>스프링의 세 가지 특징</title>
      <link>/post/2021/03/10/%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-%EC%84%B8-%EA%B0%80%EC%A7%80-%ED%8A%B9%EC%A7%95/</link>
      <pubDate>Wed, 10 Mar 2021 08:00:33 +0900</pubDate>
      
      <guid>/post/2021/03/10/%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-%EC%84%B8-%EA%B0%80%EC%A7%80-%ED%8A%B9%EC%A7%95/</guid>
      <description>스프링의 세 가지 특징  회사에서 하는 세미나에서, 자바 세미나가 끝나고 이어서 스프링 세미나를 시작하였다.
세미나를 진행하면서, 강조했던 스프링의 세 가지 특징에 대해서 설명한 부분을 정리해보겠다.
1. IoC / DI, DL   스프링 프레임워크는 DL (Dependency Look-up)과 DI(Dependency Injection)를 통해서 IoC (Inversion of Control)을 구현합니다.
  프로젝트를 진행하면서, 많은 라이브러리를 사용할 것이다. 특정 라이브러리에서 원하는 기능을 사용하려면 new 를 통해서 객체를 생성해야하는데, 이 객체를 생성하기 위해서는 다른 객체를 생성해야하는 등 복잡한 의존 관계가 발생하고 사용자는 파악하기 힘들다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/10/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Wed, 10 Mar 2021 07:07:39 +0900</pubDate>
      
      <guid>/post/2021/03/10/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  코드숨 강의를 들었다. 회사에서 조금 동료와 트러블이 있었다.  Feelings (느낌, 주관)  강의를 들으면서, 내가 바꿀 부분에 주석으로 표시하고 진행을 하는 것을 보고 나도 배워야겠다는 생각을 했다. 왜냐하면, 내가 어떤 것을 하고 있는지 까먹을 때가 많이 때문이다. 설명도 들어보지 않고, 감정부터 앞세워서 굉장히 당황스럽고 나도 화가 났다. 이럴 때는 어떻게 대응 해야하는지 모르겠다. 그냥 좋은게 좋은거라고 넘어가야할까? 아니면 같이 화를 내는것이 맞을까?  Findings (배운 점)   기능 개선이나, 유지보수를 할 때, 주석으로 변경되어야하는 범위를 먼저 체크하고 나서 실제 기능 개발을 시작한다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/09/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Tue, 09 Mar 2021 15:22:39 +0900</pubDate>
      
      <guid>/post/2021/03/09/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  오늘 회사에서 동료가 나에게 한 말 조금 화가났다. 코드숨 시큐리티 강의를 들었다. 회사 세미나에서 스프링에 대한 주제로 세미나를 했다.  Feelings (느낌, 주관)  그 순간에는 뭐라고 한 소리 할까라고 생각을 했지만, 집에와서 다시 생각해보니까 안하길 잘한 것 같다. 그리고 퇴근 하기전에 오해가 풀려서 다행이다.  Findings (배운 점)  내가 되고 싶은 개발자는 같이 일하고 싶은 개발자라는 것을 명심해야겠다. 감정에 휩쓸리지 말자.   중요한 결정을 나중으로 미룰 수 있는 것이 바로 실력이다.</description>
    </item>
    
    <item>
      <title>mariadb 유니크 인덱스</title>
      <link>/post/2021/03/09/mariadb-%EC%9C%A0%EB%8B%88%ED%81%AC-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</link>
      <pubDate>Tue, 09 Mar 2021 09:20:24 +0900</pubDate>
      
      <guid>/post/2021/03/09/mariadb-%EC%9C%A0%EB%8B%88%ED%81%AC-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</guid>
      <description>유니크 인덱스   유니크 키는 유일해야하지만, 널을 허용할 수 있다. 테이블을 생성한 후 CREATE INDEX 명령 또는 ALTER TABLE 명령을 사용하여, 고유 키를 추가할 수 있다.  ALTER TABLE Employees ADD UNIQUE `EmpCode`(`Employee_Code`); CREATE UNIQUE INDEX HomePhone ON Employees(Home_Phone); 참고 문헌  mariadb-unique-index  </description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/08/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Mon, 08 Mar 2021 15:20:39 +0900</pubDate>
      
      <guid>/post/2021/03/08/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)   오늘 회사에서 구현하다가 설계가 잘못되었다는 사실을 발견하고, 이를 고치기 위해서 다시 설계를 하고 여태까지 작업한 내용을 거의 다 버리게 되었다.
  오늘 회사에서 새로운 테이블 설계를 하였다.
  내가 오늘 생각하고 배운 것들을 코드숨에서 의견을 나누어 보았다.
  Feelings (느낌, 주관)   다시 설계를 할 때, 뭔가 시간을 많이 사용하지 못하는 것 같다. 어색하기도 하고 막상 동료랑 같이 이야기를 하다보니까 뽀죡한 수가 떠오르지 않았다.</description>
    </item>
    
    <item>
      <title>Deprecated 된 MediaType.APPLICATION_JSON_UTF8</title>
      <link>/post/2021/03/08/deprecated-%EB%90%9C-mediatype.application_json_utf8/</link>
      <pubDate>Mon, 08 Mar 2021 07:20:33 +0900</pubDate>
      
      <guid>/post/2021/03/08/deprecated-%EB%90%9C-mediatype.application_json_utf8/</guid>
      <description>MediaType.APPLICATION_JSON_UTF8  테스트 코드를 작성하다가, MediaType.APPLICATION_JSON_UTF8 부분이 Deprecated 된 것을 확인할 수 있었다.
밑줄로 표시까지 해줬는데, 그냥 대수롭지 않게 생각했던 것 같다. 그리고 개발자로서 이러한 부분을 보고도 지나친게 조금은 부끄러웠다. 다음부터는 이러한 부분을 발견하면 지나치지 말고 왜 Deprecated 되었는지 알아보고 API 개발자가 의도한 방향으로 사용을 하도록 노력해야겠다.
API 주석을 읽어보니 이유는 다음과 같았다.
 크롬 같은 주요 브라우저가 스펙을 준수하고, 이제 UTF-8 같은 파라미터 값을 넣어주지 않아도 올바르게 해석 되기 때문이다.</description>
    </item>
    
    <item>
      <title>네이버 신입 공채 체크 포인트 및 준비해야할 것들</title>
      <link>/post/2021/03/07/%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%8B%A0%EC%9E%85-%EA%B3%B5%EC%B1%84-%EC%B2%B4%ED%81%AC-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%B0%8F-%EC%A4%80%EB%B9%84%ED%95%B4%EC%95%BC%ED%95%A0-%EA%B2%83%EB%93%A4/</link>
      <pubDate>Sun, 07 Mar 2021 22:15:14 +0900</pubDate>
      
      <guid>/post/2021/03/07/%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%8B%A0%EC%9E%85-%EA%B3%B5%EC%B1%84-%EC%B2%B4%ED%81%AC-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%B0%8F-%EC%A4%80%EB%B9%84%ED%95%B4%EC%95%BC%ED%95%A0-%EA%B2%83%EB%93%A4/</guid>
      <description>네이버에서 신입을 뽑을 때 고려하는 부분을 알 수 있을 것 같아서 읽어보았다. 물론 다른 기업들도 이러한 점을 고려해서 신입을 뽑을 것이다.
 2020신입개발공채체크포인트!  네이버가 강조하는 세가지의 키워드  기본기! 커뮤니케이션! 성장가능성!  기본기   기술 생태계가 빠르기 때문에, 의욕만 앞서 모두 다 경험해보겠다는 태도는 그다지 효율적인 접근 방법이 아니다. 따라서 이럴 수록 기본기에 충실해야만 새로운 기술 흐름에 압도되지 않고, 스스로의 방향성과 페이스로 앞으로 나갈 수 있다.
   새로운 기술을 배웠다거나, 사용할 수 있다고 어필을 하는 것 보다는 기본기가 탄탄하다는 인상을 주는 것이 유리할 것이다.</description>
    </item>
    
    <item>
      <title>동시성 프로그래밍 및 자바 (4) - ComputableFuture</title>
      <link>/post/2021/03/07/%EB%8F%99%EC%8B%9C%EC%84%B1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%8F-%EC%9E%90%EB%B0%94-4-computablefuture/</link>
      <pubDate>Sun, 07 Mar 2021 15:50:23 +0900</pubDate>
      
      <guid>/post/2021/03/07/%EB%8F%99%EC%8B%9C%EC%84%B1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%8F-%EC%9E%90%EB%B0%94-4-computablefuture/</guid>
      <description>ComputableFuture란   자바에서 비동기(Asynchronous)를 가능케 하는 인터페이스이다.  자바에서는 Future를 통해서 어느정도의 비동기 프로그래밍이 가능하기는 했지만, 하기 힘든 일들이 많았다.
 Future를 외부에서 완료시킬 수 없다. 작업을 취소하거나, get()에 타임아웃을 설정할 수 없다. 블럭킹 코드를 사용하지 않고서는 작업이 끝났을 때 콜백을 실행할 수 없다. 예외처리용 API를 제공하지 않았다.  비동기로 작업 실행하기  비동기로 작업을 실행하는 방법은 두가지가 있다.
 runAsync(): 리턴값이 없는 경우 사용한다. supplyAsync(): 리턴 값이 있는 경우 사용한다.</description>
    </item>
    
    <item>
      <title>주간 회고</title>
      <link>/post/2021/03/07/%EC%A3%BC%EA%B0%84-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Sun, 07 Mar 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/03/07/%EC%A3%BC%EA%B0%84-%ED%9A%8C%EA%B3%A0/</guid>
      <description>주간 회고  한 주간에 있었던 일과 생각을 정리해보았습니다.
JWT 토큰에 대해서 알게 되었다.   코드숨 과제를 하면서 JWT 토큰에 대해서 조사를 해보았다. JWT 토큰에 대해서 들어본적은 기억은 있었지만, 로그인을 할 때 사용한다 정도로만 알고 있었다.   과제를 제출하기 전에, 내가 사용하는 라이브러리에 대해서 최소한의 조사를 하고 PR을 하자는 목표를 가지고 조사를 하게 되었다. RFC 문서까지 읽고 공부를 했으면 더 좋았을 것 같다. 따라서 투두 리스트에 넣어두고 시간이 되는대로 읽고 정리하도록 해야겠다.</description>
    </item>
    
    <item>
      <title>동시성 프로그래밍 및 자바 (3) - Callable과 Future</title>
      <link>/post/2021/03/06/%EB%8F%99%EC%8B%9C%EC%84%B1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%8F-%EC%9E%90%EB%B0%94-3-callable%EA%B3%BC-future/</link>
      <pubDate>Sat, 06 Mar 2021 15:50:23 +0900</pubDate>
      
      <guid>/post/2021/03/06/%EB%8F%99%EC%8B%9C%EC%84%B1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%8F-%EC%9E%90%EB%B0%94-3-callable%EA%B3%BC-future/</guid>
      <description>Callable과 Future   Callable과 Runnable의 차이점은 작업의 결과를 받을 수 있다는 사실이다. Future는 비동기적인 작업의 현재 상태를 조회하거나 결과를 가져올 수 있다.  다음은 Future에 대해 설명한 API 주석이다.
 Future는 비동기식 계산의 결과를 나타냅니다. 계산이 완료되었는지 확인하고, 완료되기를 기다리며, 결과를 확인할 수 있는 방법이 제공됩니다. 결과는 계산이 완료된 경우에만 메서드 get을 사용하여 검색할 수 있으며, 작업이 완료될 때까지 블록킹 됩니다. 또한 작업이 정상적으로 완료되었는지 또는 취소되었는지 확인할 수 있는 추가적인 방법이 제공된다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/06/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Sat, 06 Mar 2021 15:14:39 +0900</pubDate>
      
      <guid>/post/2021/03/06/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  파이썬 AOP라는 글을 읽어보았다. 1   오늘 회사 세미나 과제를 했다. (자바 동시성 및 ComputableFuture) 인터셉터에 대해서 배우게 되었다.  Feelings (느낌, 주관)  아직 스트림 연산에 대해서 완전히 이해를 하지 못한 것 같다. 객체의 본질적인 역할과 관심사의 분리를 해주는 것이 중요하다.  Findings (배운 점)   어떤한 기능을 도입할 때, 프로젝트에 정말로 필요한 기능인가를 생각해보고 프로젝트에 필요한 부분만 선택하는 능력이 필요하다는 것을 느꼈다.</description>
    </item>
    
    <item>
      <title>파이썬에 AOP 적용하기라는 글을 읽고 느낀점</title>
      <link>/post/2021/03/06/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90-aop-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0%EB%9D%BC%EB%8A%94-%EA%B8%80%EC%9D%84-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90/</link>
      <pubDate>Sat, 06 Mar 2021 14:50:40 +0900</pubDate>
      
      <guid>/post/2021/03/06/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90-aop-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0%EB%9D%BC%EB%8A%94-%EA%B8%80%EC%9D%84-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90/</guid>
      <description>배경  내가 현재 맡고 있는 솔루션에는 일일이 데이터베이스를 열어주고 쿼리를 실행하고 데이터베이스를 닫아주는 과정을 거치고 있었다. 매우 비효율적이고 중복된 코드가 많아져 이를 수정하고자 하였다. 따라서, 어떻게 수정할까 고민하는 과정에서 스프링에 있는 AOP 개념이 파이썬에도 있을 것이라고 확신하고 검색을 했다. 그러던 중에, 브랜디 개발 블로그에서 좋은 글을 발견하여 이를 읽고 느낀점을 적어보았다.
본문   다양한 관점에서 고려해보는 모습이 인상 깊었다. 나도 물론 최선의 방법을 생각해보려고 고민을 해보지만, 이렇게까지 다양한 과점을 고려해보지는 않은 것 같다.</description>
    </item>
    
    <item>
      <title>파이썬 itertools 모듈의 group by 함수</title>
      <link>/post/2021/03/06/%ED%8C%8C%EC%9D%B4%EC%8D%AC-itertools-%EB%AA%A8%EB%93%88%EC%9D%98-group-by-%ED%95%A8%EC%88%98/</link>
      <pubDate>Sat, 06 Mar 2021 13:15:35 +0900</pubDate>
      
      <guid>/post/2021/03/06/%ED%8C%8C%EC%9D%B4%EC%8D%AC-itertools-%EB%AA%A8%EB%93%88%EC%9D%98-group-by-%ED%95%A8%EC%88%98/</guid>
      <description>배경  회사에서 이슈를 처리 하다가, 키 값을 기준으로 하위 리스트를 처리할 일이 있었다. 자바였으면 groupingBy()를 이용하여 쉽게 처리를 할 수 있다는 생각을 하고 있었던 참에 파이썬도 이와같은 함수를 지원하지 않을까라는 생각이 들어서 검색을 해보니 비슷한 함수가 있었다.
 연속된 키와 그룹을 반환하는 이터레이터를 만든다. 인자중에, 키는 각 요소의 키 값을 계산하는 함수이다. 일반적으로 해당 항목은 동일한 키 함수에 대해서 이미 정렬되어야 한다. 키 함수의 값이 변경될 때마다 중단하거나 새 그룹을 생성하기 때문에 동일한 키 함수를 이용하여 데이터를 정렬해줘야한다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/05/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Fri, 05 Mar 2021 07:29:39 +0900</pubDate>
      
      <guid>/post/2021/03/05/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  기계인간님의 DRY 원칙에 대해서 쓴 글을 읽었다. 1   기계인간님의 디미터 법칙에 관한 글을 읽었다. 2  Feelings (느낌, 주관)   DRY 원칙은 모든 곳에 적용할 수 있을 것이다. (코드, 테스트, 문서화) 그리고 내가 DRY 원칙을 잘 지키고 있는지 생각하면 그렇지 못한 것 같다.
   Findings (배운 점)   실용주의 프로그래머에서는 중복을 4가지로 분리한다.
 강요된 중복 : 개발자들은 다른 선택이 없어 보인다.</description>
    </item>
    
    <item>
      <title>테크니컬 라이팅 4대 원칙이라는 글을 읽고 느낀점</title>
      <link>/post/2021/03/04/%ED%85%8C%ED%81%AC%EB%8B%88%EC%BB%AC-%EB%9D%BC%EC%9D%B4%ED%8C%85-4%EB%8C%80-%EC%9B%90%EC%B9%99%EC%9D%B4%EB%9D%BC%EB%8A%94-%EA%B8%80%EC%9D%84-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90/</link>
      <pubDate>Thu, 04 Mar 2021 18:29:39 +0900</pubDate>
      
      <guid>/post/2021/03/04/%ED%85%8C%ED%81%AC%EB%8B%88%EC%BB%AC-%EB%9D%BC%EC%9D%B4%ED%8C%85-4%EB%8C%80-%EC%9B%90%EC%B9%99%EC%9D%B4%EB%9D%BC%EB%8A%94-%EA%B8%80%EC%9D%84-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90/</guid>
      <description>테스트 코드 및 메서드 주석에 대한 고민 코드를 작성하면서 테스트 코드에 어떤 테스트라는 것을 어떻게 명확하게 표현할까, 그리고 모듈 및 클래스, 메서드 주석을 달면서 어떻게 작성해야 좋은 문서가 될까? 라는 고민을 하고 작성하였지만 여전히 어렵기만 했다. 그런던 중에서 카카오 기술 블로그에서 도움이 될 만한 글을 발견하였다.
테크닐컬 라이팅의 4대 원칙 명확성  테크니컬 라이팅의 첫 번째 원칙은 명확성이다.   명확성이란 핵심어나 핵심 문장이 모호하게 사용되지 않고, 대상 독자가 기술 문서를 읽을 때, 내용의 모호함이나 혼란 없이 한번에 이해하도록 하는 글이다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/04/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Thu, 04 Mar 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/03/04/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  오늘 PM 분이 맡은 일을 언제까지 끝낼 수 있는지 공유를 해주면 일정 조율을 하기 편할 것 같다는 말씀을 하셨다. 오늘 이슈를 진행하면서, 전체적인 기능을 보고 코드를 보면서 어떻게 구현할지 생각하지 않고, 코드부터 보면서 어떻게 구현할지 생각을 했다. 오늘 이슈를 진행하면서 메서드 주석 및 클래스 주석을 작성하려고 하였다.  Feelings (느낌, 주관)  여태까지 팀 안에서 개발자들과의 소통만 생각했었는데, PM 분과의 소통 하는 방법에 대해서도 생각을 해봐야겠다.</description>
    </item>
    
    <item>
      <title>DBMS를 분석하는 방법</title>
      <link>/post/2021/03/03/dbms%EB%A5%BC-%EB%B6%84%EC%84%9D%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/</link>
      <pubDate>Wed, 03 Mar 2021 23:32:24 +0900</pubDate>
      
      <guid>/post/2021/03/03/dbms%EB%A5%BC-%EB%B6%84%EC%84%9D%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/</guid>
      <description>KCD 2020    막 오픈소스 컨트리뷰톤을 끝마치고, 오픈소스 개발에 재미를 붙였을 때, KDC 2020이라는 세미나가 열렸다. 오픈소스 데이터베이스 큐브리드에 기여하기라는 제목의 세션을 보았을 때, 오픈소스 DBMS를 개발한다는 부분이 신기했고, 궁금한 점이 있어서 메일을 보내게 되었는데, 친절하게도 아주 장문의 답장을 해주셨다.
메일  내가 보낸 메일을 다시 보니까, 많이 부끄럽다;;
매우 유용한 조언을 해주셨고, 실제로 많은 도움이 되었다. 이를 요약하자면 다음과 같다.
  코드 레벨에서부터 접근하면 분석하기 쉽지 않다.</description>
    </item>
    
    <item>
      <title>우아한 테크 코드 지원 후기 및 회고</title>
      <link>/post/2021/03/03/%EC%9A%B0%EC%95%84%ED%95%9C-%ED%85%8C%ED%81%AC-%EC%BD%94%EB%93%9C-%EC%A7%80%EC%9B%90-%ED%9B%84%EA%B8%B0-%EB%B0%8F-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Wed, 03 Mar 2021 23:15:14 +0900</pubDate>
      
      <guid>/post/2021/03/03/%EC%9A%B0%EC%95%84%ED%95%9C-%ED%85%8C%ED%81%AC-%EC%BD%94%EB%93%9C-%EC%A7%80%EC%9B%90-%ED%9B%84%EA%B8%B0-%EB%B0%8F-%ED%9A%8C%EA%B3%A0/</guid>
      <description>이전에 우아한 테크코스에 지원을 하여 코딩 테스트를 본 적이 있었다. 비록 탈락했지만 다음에 더 잘할 수 있도록 피드백을 주셨다.
코딩 테스트   코딩 테스트의 경우 알고리즘 역량이나 풀이 속도도 중요하지만, 문제를 명확하고 꼼꼼히 이해하는 능력이 가장 중요하다고 하셨다.
  프로그래머에게 속도가 빠름도 중요하지만, 그 보다는 요구사항을 명확히 이해해 버그없는 프로그래밍을 구현하는게 더 중요하다고 하셨다.
  자기소개서   자기소개서는 구체적으로 쓰는 것이 좋다. 어떤 내용을 학습했다는 결과 위주의 내용이 아니라, 어떤 내용을 학습하는데 어떤 어려움이 있었고, 어떻게 극복했다와 같이 구체적인 사례를 들어서 공감을 얻는 것이 중요하다.</description>
    </item>
    
    <item>
      <title>라인 개발자 입사기를 읽고 느낀점</title>
      <link>/post/2021/03/03/%EB%9D%BC%EC%9D%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9E%85%EC%82%AC%EA%B8%B0%EB%A5%BC-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90/</link>
      <pubDate>Wed, 03 Mar 2021 21:49:39 +0900</pubDate>
      
      <guid>/post/2021/03/03/%EB%9D%BC%EC%9D%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9E%85%EC%82%AC%EA%B8%B0%EB%A5%BC-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90/</guid>
      <description>지원서 작성할 때, 참고할 부분    대외 활동을 했다는 사실 그 자체보다는 그 활동에서 배우고 얼마나 성장했는지를 위주로 적자
  무엇을 했는지가 중요한 것이 아니다, 무엇을 얻었고, 배웠는지를 위주로 작성하자.
  어떤 활동을 하더라도, 자신의 성장을 연결하는 것이 중요하다, 자신의 성장을 감춰두고 혼자만 아는 것 보다는 어떠한 방식으로도 그것을 드러내서 어필하는 것이 중요하다.
  신입 개발자가 아닌 경우  스스로 공부해 왔던 내용과, 더불어 내가 어떤 개발자가 되고 싶은지 목표를 설정 지금 근무하는 곳에서 책임감을 가지고 근무하는 모습이 중요하다.</description>
    </item>
    
    <item>
      <title>데이터베이스 스키마를 관리하는 도구, Flyway</title>
      <link>/post/2021/03/03/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%8A%A4%ED%82%A4%EB%A7%88%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EB%8F%84%EA%B5%AC-flyway/</link>
      <pubDate>Wed, 03 Mar 2021 20:09:39 +0900</pubDate>
      
      <guid>/post/2021/03/03/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%8A%A4%ED%82%A4%EB%A7%88%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EB%8F%84%EA%B5%AC-flyway/</guid>
      <description>데이터베이스 스키마 관리의 필요성  최근에 회사에서 기존에 AWS에서 서비스하던 서비스를 ALI 클라우드에서 제공해야하는 일이 있었다. 따라서 데이터베이스 스키마와 마스터 데이터를 새로운 클라우드 환경으로 이전을 시켜줘야 했다.
비교적 규모가 큰 서비스는 아니여서, 덤프를 이용해서 간단하게 이전하였고, 데이터베이스 스키마 및 마스터 데이터를 쿼리문 형태로 만들어서 GIT으로 형상관리를 하였다.
이 정도로 모든 일이 마무리 되기는 하였지만, 어딘가 부족한 느낌이 들었다. 왜냐하면 개발을 하면서 DB 스키마가 변경할 일이 있는데 그럴 때마다 쿼리문으로 테이블 스키마를 변경하고, 스키마 파일을 업데이트 해야했기 때문이다.</description>
    </item>
    
    <item>
      <title>파이썬 @classmethod와 @staticmethod 차이</title>
      <link>/post/2021/03/03/%ED%8C%8C%EC%9D%B4%EC%8D%AC-classmethod%EC%99%80-staticmethod-%EC%B0%A8%EC%9D%B4/</link>
      <pubDate>Wed, 03 Mar 2021 08:45:13 +0900</pubDate>
      
      <guid>/post/2021/03/03/%ED%8C%8C%EC%9D%B4%EC%8D%AC-classmethod%EC%99%80-staticmethod-%EC%B0%A8%EC%9D%B4/</guid>
      <description>파이썬을 코딩을 하다가 @classmethod 데코레이터가 붙어 있는 메서드를 볼 수 있었다. 정확히 어떤 역할을 하는지 몰라서 문서에서 찾아보았다.
@classmethod  메서드를 클래스 메서드로 변환합니다. 클래스 메서드는 인스턴스 메서드가 인스턴스를 받는 것 처럼 클래스를 암시적인 첫 번째 인수로 수신한다.1  클래스 메서드는 다음과 같이 사용한다.
class C: @classmethod def f(cls, arg1, arg2, ...): ...  클래스 메서드는 다음과 같이 호출 될 수 있다.  C.f(), C().f()   앞의 경우에는 클래스에서 호출 된 것이고, 뒤의 경우에는 인스턴스에서 호출 된 것이다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/03/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Wed, 03 Mar 2021 08:00:39 +0900</pubDate>
      
      <guid>/post/2021/03/03/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  오늘 WSGI에 대해서 정리를 해보았다. 오늘 @staticmethod, @classmethod에 대해서 조사 및 정리를 하였다. 이슈를 진행하던 도중에 @classmethod를 사용하는 코드를 보았고, 무슨 역할을 하는지 몰라서 찾아보았다.  Feelings (느낌, 주관)  그냥 모르고 관성적으로 쓰는 것보다 이게 왜 사용되었는지 알고 생각하면서 사용하니까 훨씬 많이 배우는 느낌이고 자신감이 생긴것 같다. 오늘 이슈를 진행하다가 비슷한 예외가 많이 발생하여, 이러한 예외가 발생하고 있다고 말했는데 실제로는 그러한 예외가 호출되지 않고 다른 예외가 호출되었다.</description>
    </item>
    
    <item>
      <title>WSGI</title>
      <link>/post/2021/03/02/wsgi/</link>
      <pubDate>Tue, 02 Mar 2021 14:39:13 +0900</pubDate>
      
      <guid>/post/2021/03/02/wsgi/</guid>
      <description>플라스크와 WSGI 플라스크 문서를 살펴보다가 다음과 같은 문장을 보았다.
 플라스크는 Jinja 템플릿 엔진과 Werkzeug WSGI 툴킷에 의존하고 있다. 1  Werkzeug가 무엇을 하는 툴인지 몰라서 검색을 해본 결과 다음과 같았다.
 Werkzeug는 포괄적인 WSGI 웹 애플리케이션 라이브러리이다. WSGI 응용 프로그램을 위한 단순한 유틸리티에서 시작하였지만, 현재는 가장 진보한 WSGI 유틸리티 라이브러가 되었다. 플라스크는 Werkzeug를 감싸 WSGI의 세부사항을 처리하는 동시에 강력한 애플리케이션을 위한 더 많은 구조와 패턴을 제공한다. 2  Werkzeug는 다음을 포함하고 있다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/02/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Tue, 02 Mar 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/03/02/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  코드숨 강의를 들엇다. (JWT 토큰에 대해서 알게 되었다.) 오늘 회사에서 일을 할 때, 적극적으로 의사소통을 하려고 노력하였다. 플라스크 관련된 문서를 정리해보았다. 퇴근하는 길에, 라인 개발자 채용 관련 QnA 영상을 보았다.  Feelings (느낌, 주관)  적극적으로 의사소통을 하니, 동료들과 소통이 더 잘되는 느낌이였다. 라인 채용 유튜브 영상을 보니, 컴퓨터공학 기반 지식과 알고리즘 그리고 코딩테스트를 중요하게 여기는 것 같았다.  Findings (배운 점)  소통하려는 의지만 있어도 동료들이 알아차리고 좋게 봐주는 것 같다.</description>
    </item>
    
    <item>
      <title>동시성 프로그래밍 및 자바 (2) - Executor Interfaces</title>
      <link>/post/2021/03/01/%EB%8F%99%EC%8B%9C%EC%84%B1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%8F-%EC%9E%90%EB%B0%94-2-executor-interfaces/</link>
      <pubDate>Mon, 01 Mar 2021 14:40:33 +0900</pubDate>
      
      <guid>/post/2021/03/01/%EB%8F%99%EC%8B%9C%EC%84%B1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%8F-%EC%9E%90%EB%B0%94-2-executor-interfaces/</guid>
      <description>Executor Interfaces  Executor, 태스크를 관리하는 인터페이스 입니다. ExecutorService는 Executor의 하위 인터페이스이며 태스트와 Exector의 라이프 사이클을 관리하는 기능을 포함하고 있다. ScheduledExecutorService는 ExecutorService의 하위 인터페이스이며 미래의 태스트에 대한 주기적인 실행을 관리한다.  Executor 인터페이스  Executor 인터페이스는 저수준의 스레드 생성문을 대체할 수 있다. Executor는 저수준의 스레드 생성문과 동일한 작업을 수행할 수 있지만 차이점은 워크 스레드가 사용 가능해질때까지 큐에 배치할 가능성이 더 크다.  ExecutorService 인터페이스 import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; public class Main { public static void main(String[] args) throws InterruptedException { ExecutorService executorService = Executors.</description>
    </item>
    
    <item>
      <title>동시성 프로그래밍 및 자바 (1) - 프로세스와 쓰레드의 차이</title>
      <link>/post/2021/03/01/%EB%8F%99%EC%8B%9C%EC%84%B1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%8F-%EC%9E%90%EB%B0%94-1-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4/</link>
      <pubDate>Mon, 01 Mar 2021 12:40:33 +0900</pubDate>
      
      <guid>/post/2021/03/01/%EB%8F%99%EC%8B%9C%EC%84%B1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%8F-%EC%9E%90%EB%B0%94-1-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4/</guid>
      <description>동시성이란? (Concurrency)  동시성 프로그래밍이란? 동시성에 대해서 자바 문서에서는 이렇게 설명하고 있다. 유저는 컴퓨터를 사용하면서 한 번에 한 가지 이상의 작업을 수행할 수 있다는 사실을 당연하게 여긴다. 그들은 워드 프로세서 작업을 하면서 파일을 다운로드 받거나, 프린트 인쇄 대기열을 관리하거나, 오디오 스트리밍을 할 수 있는다고 생각한다. 심지어 단일 응용 어플리케이션의 경우에도 한 번에 둘 이상의 작업을 해야할 때가 많다. 예를 들어서 스트리밍 오디오 애플리케이션은 네트워크에서 디지털 오디오를 동시에 읽고 압축을 풀고, 재생을 관리하고 디스플레이를 업데이트 해야합니다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/03/01/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Mon, 01 Mar 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/03/01/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>TIL 양식 Facts (사실, 객관)  코딩 테스트 공부를 했다.  Feelings (느낌, 주관)  정답을 맞추는 것 뿐만 아니라, 더 좋은 방법은 없는지 생각을 해보는 것이 중요하다는 것을 느꼈다. 더 좋은 방법이 없는지 생각해보는 것은 실제로 코딩을 할 때, 지금보다 나은 방법이 없는지 꾸준히 고민하게 해주는 습관을 기를 수 있게 될 것이다.  Findings (배운 점)  코딩 테스트 문제를 풀 때, 입력 값을 받는 코드를 넣으면 테스트 하기 불편해진다.</description>
    </item>
    
    <item>
      <title>그리디 알고리즘</title>
      <link>/post/2021/02/28/%EA%B7%B8%EB%A6%AC%EB%94%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</link>
      <pubDate>Sun, 28 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/28/%EA%B7%B8%EB%A6%AC%EB%94%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</guid>
      <description>그리디 알고리즘  현재 상황에서 좋아 보이는 것만을 선택하는 알고리즘
 어떤 문제가 있을 때 단순 무식하게 탐욕적으로 푸는 알고리즘이다. 여기서 탐욕적이라는 말은 &amp;lsquo;현재 상황에서 지금 당장 좋은 것을 고르는 방법&amp;rsquo;을 의미한다. &amp;lsquo;사전에 외우고 있지 않아도 풀 수 있을 가능성이 높은 유형&amp;rsquo; 이라는 특징이 있다. 그리디 알고리즘 유형의 문제는 매우 다양하기 때문에, 암기한다고 해서 항상 잘 풀수 있는 것은 아니다. 많은 유형을 접해보고 문제를 풀어보며 훈련을 해야한다. 코딩 테스트에서 출제되는 그리디 알고리즘 유형의 문제는 창의력, 즉 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력을 요구한다.</description>
    </item>
    
    <item>
      <title>주간 회고</title>
      <link>/post/2021/02/28/%EC%A3%BC%EA%B0%84-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Sun, 28 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/28/%EC%A3%BC%EA%B0%84-%ED%9A%8C%EA%B3%A0/</guid>
      <description>주간 회고 이번주에 있던 일들을 종합해서 회고를 해보고 정리를 해보았습니다.
출근 방식의 변화  이번주에는 새벽까지 할 일을 하고 아침에 늦게 출근하느 방식에서 벗어나 차라리 일찍 일어나서 일찍 출근하고 일찍 취침하는 방식을 택했다. 무엇보다 마음에 드는 것은 활용할 수 있는 시간이 훨씬 많아진 것이다. 새벽에 출근을 하니까 교통이 막히자 않아서 전에는 버스를 타고 1시간 20분 걸리던 거리가 40분 만에 도착할 수 있었다. 그리고 남는 시간에 개인적인 공부를 하니 시간 확보를 하는데 많은 도움이 되었다.</description>
    </item>
    
    <item>
      <title>개발자 채용 프로세스</title>
      <link>/post/2021/02/27/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%B1%84%EC%9A%A9-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4/</link>
      <pubDate>Sat, 27 Feb 2021 22:56:33 +0900</pubDate>
      
      <guid>/post/2021/02/27/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%B1%84%EC%9A%A9-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4/</guid>
      <description>개발자 채용 프로세스  개발자 채용 프로세스는 다음과 같다.
  서류 검토 코딩 테스트 기술 면접 인성 면접    코딩 테스트는 주로 알고리즘 문제를 출제하므로, 알고리즘을 열심히 공부하고 연습했다면 합격할 수 있다. 하지만 기술 면접에서는 알고리즘 외에도 컴퓨터구조, 운영체제 등 컴퓨터공학 전반에 대한 다양한 지식에 관해서 질문하므로 공부해야할 범위가 상당히 넓다. 또한 아무리 실력이 좋더라도 성실성과 팀원으로서 잘 어울릴 수 있는지 그리고 커뮤니케이션 능력 또한 무시할 수 없다.</description>
    </item>
    
    <item>
      <title>코딩 테스트 출제 경향 및 준비 방향</title>
      <link>/post/2021/02/27/%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%B6%9C%EC%A0%9C-%EA%B2%BD%ED%96%A5-%EB%B0%8F-%EC%A4%80%EB%B9%84-%EB%B0%A9%ED%96%A5/</link>
      <pubDate>Sat, 27 Feb 2021 22:28:35 +0900</pubDate>
      
      <guid>/post/2021/02/27/%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%B6%9C%EC%A0%9C-%EA%B2%BD%ED%96%A5-%EB%B0%8F-%EC%A4%80%EB%B9%84-%EB%B0%A9%ED%96%A5/</guid>
      <description>최신 출제 경향과 준비 방향  정확한 알고리즘을 사용하여 얼마나 빠르게 많은 문제를 풀었는지를 토대로 순위를 매긴다. 기업은 코딩 테스트를 통해서 취업 준비생들에게 뛰어난 프로그래밍 실력을 원하는 것이 아니라, 기초 알고리즘에 기반하는 문제들이 출제된다. 가장 출제 빈도가 높은 문제는 그리디, 구현(implementation), DFS/BFS를 활용한 탐색 문제이다. 또한 상대적으로 높은 사고력을 요구하는 다이나믹 프로그래밍이나, 그래프 이론 문제도 출제된다.  다음은 카카오 기술 블로그에 언급된 코딩 테스트 문제 난이도에 대한 내용이다.
 ACM-ICPC 같은 어려운 알고리즘 설계 능력을 겨루는 문제가 아닌, 업무에서 있을만한 상황을 가정하여 독창적이고 다양한 분야의 문제를 출제했고 난이도 또한 비교적 쉬운 수준으로 조정하였습니다.</description>
    </item>
    
    <item>
      <title>이것이 코딩 테스트다</title>
      <link>/post/2021/02/27/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%A4/</link>
      <pubDate>Sat, 27 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/27/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%A4/</guid>
      <description>내가 코딩 테스트를 준비하는 이유  당장 구직하지 않더라도, 이러한 준비를 미리 해두어야 좋은 기회를 잡을 수 있다. 대기업이나, 누구나 가고 싶은 기업에는 코딩 테스트가 존재한다. 항상 서류에서 통과가 되더라도, 코딩 테스트에서 떨어지곤 했는데 이번에는 떨어지지 않고 면접까지 가는 것이 목표이다. 대기업 면접을 통해서 합격하지 못하더라도 내가 미쳐 생각하지 못했던 부분과, 부족한 부분을 배울 수 있는 기회로 삼고 싶은데 코딩 테스트때문에 면접까지 갈 수가 없기 때문에 배울 기회가 없다. 물론 코딩 테스트를 통해서 테스트 코드를 작성하는 법과 사고력을 키울 수 있을 것 같다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/02/27/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Sat, 27 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/27/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>facts (사실, 객관)  오늘 개발 블로그를 만들었다. 오늘 회사에 일찍 일어나서, 출근을 하였다. 테스트 주도 개발 시작하기라는 책을 3장까지 읽었다.  feelings (느낌, 주관)  블로그 서비스를 이용하는 것보다는 많은 시간이 들었다. 아직 많은 기능이 필요하지만, 실제로 그 기능이 필요할 때 까지는 최대한 늦추도록 해야겠다. 일찍자고, 일찍 일어나는 것이 늦게까지 개발을 하다가 늦게 일어나는 것 보다 효율이 좋은 것 같다. 하지만, 회사에 출근을 했을 때, 무엇을 해야할지 계획을 세우지 않아서 조금 헤메였다.</description>
    </item>
    
    <item>
      <title>테스트 코드를 작성하는 순서</title>
      <link>/post/2021/02/27/%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EC%88%9C%EC%84%9C/</link>
      <pubDate>Sat, 27 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/27/%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EC%88%9C%EC%84%9C/</guid>
      <description>테스트 코드를 작성하는 순서 테스트 코드를 작성하는 것도 무작성 작성하는 것보다는 순서를 지켜가면서 작성하는 것이 훨씬 좋다.
테스트는 다음과 같은 순서를 따르면서 작성 해야한다.   쉬운 경우에서, 어려운 경우로 진행 예외적인 경우에서, 정상적인 경우로 진행   한번에 완벽한 코드를 만들면 좋겠지만, 모두가 슈퍼 개발자인 것은 아니다. 보통의 개발자는 한 번에 많은 코드를 만들다 보면 나도 모르게 버그를 만들고 나중에 버그를 잡기 위해 많은 시간을 허비하게 된다. 당연히 테스트 통과 시간도 길어진다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/02/26/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Fri, 26 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/26/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>Facts (사실, 객관)  다른 사람들의 PR을 참고해보았다. (https://github.com/CodeSoom/spring-week5-assignment-1/pull/10)  Feelings (느낌, 주관)  다른 사람들의 PR에서 내가 경험해보지 못한 많은 것을 배울 수 있었다.  Findings (배운 점)  예외처리에 어떤 정보를 추가하는 것은, 디버깅하는 사람과 모니터링을 하는 사람들을 위한 서비스 정보라는 것을 알게 되었고, 이러한 사람들을 위해서 적절한 예외와 정보를 알려줘야겠다고 생각을 했다. 예외를 반드시 컨트롤러에서 처리를 하지 않아도 된다는 것을 배울 수 있었다. 어떤 예외는 레이어를 넘나들고, 어떤 예외는 다른 레이어에 공개되지 않도록 조용이 처리해야한다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/02/25/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Thu, 25 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/25/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>Facts (사실, 객관)  오늘도 일찍 출근하였다. 버스로 출퇴근하면서 경제 유튜브를 시청하였다. 어제 퇴근하면서 버클리에서 하는 데이터베이스 강의를 들었다. 기계인간님이 코드숨 과정을 진행할 때, 자신의 PR에 dozer-mapper를 소개하고, 자신이 생각하는 장점을 같이 기입하면 좋을 것 같다고 하셨다. 오늘 목표를 정했다. 1. LMS에서 함수 하나를 정해서 작게라도 테스트 코드를 작성하기 슬랙에 요청만 하고 확인하지 않았다. 최근에 스트레스 관리를 못해서 회사에서 감정 컨트롤을 하지 못해 회사에서 하루종 일 우울한 모습을 보였다. 무언가를 물어볼 때, 말을 조리있게 못한다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/02/24/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Wed, 24 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/24/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>Facts (사실, 객관)  오늘 이력서를 간단하게 작성을 시도해보았다. 아침에 과제를 바로 하거나, 이력서 관련 분석을 해야겠다. 더 많은 일을 하면서 더 빠르게 하기(http://agile.egloos.com/1762301) 라는 글을 읽었다. 간단한 쿼리문을 작성해보았다.  Feelings (느낌, 주관)  경력 기술서를 간단하게 적고 있는데, 회사에서 했던일이 무엇인지 잘 생각이 나지 않는다. 어떤 일을 할 때, 작은 규모의 일을 하고 그 다음에 같은일을 좀 더 큰 규모로 하면 더 쉽다는 것이다. 조인에 대해서 내가 잘 이해하지 못하고 있는 것 같다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/02/23/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Tue, 23 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/23/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>Facts (사실, 객관)  오늘도 일찍 출근해서, 아침에 과제를 하였다. 테스트를 먼저 작성하다보니, 미완성인 클래스들을 우선 만들어주어야하는 경우가 있었다. 오늘 퍼블리싱 세미나에 참석했다. 스마트한 시간관리, 인생관리 습관이라는 책을 읽었다.  Feelings (느낌, 주관)  내가 자본주의를 살면서 느낀 것은 하이 리턴을 바랄 려면 하이 리스크를 감당할 줄 알아야하는 것과, 시간은 곧 돈이고 모든 서비스는 어떻게 보면 다른 사람들의 시간을 아껴주는데서 발생한다는 것이다. 따라서 다른 사람들이 어떤 일에 시간이라는 자원을 많이 들이는지 그리고 내가 어떻게 하면 그 시간을 줄여줄 수 있는지에 대해서 고민을 하자.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/02/22/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Mon, 22 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/22/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>Facts (사실, 객관)  어제 일찍 자고, 일찍 출근하여 개발 공부를 하였다. 오늘 퇴근하는 길에, 라인 개발자 공고를 보았다.  Feelings (느낌, 주관)  출근 시간이 훨씬 빨라진 느낌을 받았다. 하루가 길게 느껴졌고, 코드숨 강의를 여유롭게 들을 수 있었다. 나도 저런곳에서 한번 일해보고 싶은 마음이 있었다. 요즘 배우고 있는 TDD를 코딩 테스트를 풀면 일석이조의 효과를 누릴 수 있겠다는 생각을 했다. 빌 에반스가 성공한 사람들은 놀랍게도 현실적인 관점을 가지고 있다는 말을 했다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/02/21/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Sun, 21 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/21/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>Facts (사실, 객관)  백기선님의 유튜브 영상을 보았다. (https://www.youtube.com/watch?v=iua0nrfh4_Q&amp;amp;feature=share) 이직관련해서 좋은 영상들을 많이 보았다.  개발자가 이직하는 방법 (전략) (https://www.youtube.com/watch?v=W5Nx4Bq7Y-4&amp;amp;feature=share) 개발자 취업의 비밀 (역시사지)(https://www.youtube.com/watch?v=PWl9dmwnzoo&amp;amp;feature=share)   네이버 FINANCIAL에 지원을 해보았다.(https://recruit.navercorp.com/naver/job/detail/developer?annoId=20005127&amp;amp;classId=&amp;amp;jobId=&amp;amp;entTypeCd=&amp;amp;searchTxt=&amp;amp;searchSysComCd=) 자기 회고를 했던 일과 느낀점을 나열하고 있었다. 코딩을 할 때 세심하게 주의를 기울이지 않는 것 같다.  Feelings (느낌, 주관)  단지 회고를 할 때 내가 했던일, 느낀점, 자기 선언을 나열하는 형식보다는 알아보기 쉽게 하는 능력이 부러웠다. 이력서를 다시 작성하고 보니, 나의 부족한 점이 무엇인지 알 수 있었다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/02/20/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Sat, 20 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/20/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>Facts (사실, 객관)  오늘 TDD로 과제를 하기 위해서 회사에 나왔다. 오류 메시지가 나왔을 때, 아샬님은 어떤 오류 메시지가 발생하였는지 꼼꼼하게 읽어 보고 개선을 하지만, 나는 그냥 대충 읽어본다는 사실을 발견하였다. 매일 회고를 작성하니까, 주간 회고를 더 상세하고 의미 있게 작성할 수 있었다. 테스트 주도 개발 시작하기라는 책을 2장까지 읽어보았다. 회고를 작성하는 것도 좋지만, 내가 지난 회고를 보고 다시 리마인드 할 수 있게 만드는 것도 생각을 해봐야겠다. TDD를 진행하면서 과제를 하였다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/02/19/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Fri, 19 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/19/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>Facts (사실, 객관)  오늘 친구랑 같이 졸업 사진을 찍었다. 졸업 사진을 찍으면서 많은 이야기를 할 수 있었다. 개발 관련된 이야기를 하면서 많은 것을 생각해 볼 수 있었다. 개발자 이종립님이 코드에 작성한 주석을 바탕으로 문서화를 할 수 있다는 것을 알려주었다. 성공의 단계에 이르는 빌 에반스의 연습 방법이라는 영상을 보았다. (https://youtube.com/watch?v=anH8Y8vAz2Q&amp;amp;feature=share) 나 혼자 독단적으로 판단해서 과제를 진행하던 것을, 초기화 시켰다.  Feelings (느낌, 주관)  교수님이 추천한 곳으로 취직한 얘들은 별로 좋은 조건에 취업을 하지 못했다는 느낌을 받았다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/02/18/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Thu, 18 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/18/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>Facts (사실, 객관)  요즘 출퇴근 하면서 30대 방구석 이야기라는 유튜브 채널을 시청하고 있다. 개발 이야기 및 삶에 대한 좋은 자세를 배울 수 있었다. 이슈를 볼 때 현상에 집중하는 것 보다 빠르게 본질을 파악하는 것이 중요하다. 내가 작성한 코드에 대해서 근거와 논리가 있어야한다는 것을 알게 되었다. 오늘 내가 작성한 코드에 대해서 왜 이렇게 작성하였는지, 질문이 들어왔다. 우연하게 내가 작성한 코드가 올바른 이유를 가지고는 있었지만 의도했다고는 말을 하지 못하겠다.  Feelings (느낌, 주관)  나도 이러한 자세를 가지고 일을 하고 살아가고 싶다는 느낌을 받았다.</description>
    </item>
    
    <item>
      <title>일일 회고</title>
      <link>/post/2021/02/17/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</link>
      <pubDate>Wed, 17 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>/post/2021/02/17/%EC%9D%BC%EC%9D%BC-%ED%9A%8C%EA%B3%A0/</guid>
      <description>Facts (사실, 객관)   좋은 유튜브 채널을 찾았다. (https://www.youtube.com/channel/UCyCFnxi_hBaLvL6pV_zVILQ) 면접을 보면서 공부한 내용을 정리하면 좋을 것 같다는 생각을 했다.
  최근에 네트워크 관련한 문제로 골머리를 앓고 있는데, 네트워크 패킷 분석에 대해서 조금 알아둔다면 이러한 상황에 잘 대처를 할 수 있을 것 같다는 생각을 했다.
  아샬님의 강의를 보다가 느꼈는데, 실제 인터페이스와 서비스, 그리고 인터페이스를 상속받는 클래스와의 의존성을 간단히 확인하고 계셨다. 그 방법은 메서드를 변경해보는 것이다. 그러자 인텔리제이에서 에러를 알아서 표시를 해주었고, 자연스럽게 의존하고 있는 부분이 들어났다.</description>
    </item>
    
  </channel>
</rss>
