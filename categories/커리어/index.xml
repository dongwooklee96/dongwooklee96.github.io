<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>커리어 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/categories/%EC%BB%A4%EB%A6%AC%EC%96%B4.html</link>
    <description>Recent content in 커리어 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sat, 27 Mar 2021 10:31:33 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/categories/%EC%BB%A4%EB%A6%AC%EC%96%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>네이버 페이 배송 모듈 아키텍처 및 사용기술 분석</title>
      <link>https://dongwooklee96.github.io/post/2021/03/27/%EB%84%A4%EC%9D%B4%EB%B2%84-%ED%8E%98%EC%9D%B4-%EB%B0%B0%EC%86%A1-%EB%AA%A8%EB%93%88-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EA%B8%B0%EC%88%A0-%EB%B6%84%EC%84%9D.html</link>
      <pubDate>Sat, 27 Mar 2021 10:31:33 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/27/%EB%84%A4%EC%9D%B4%EB%B2%84-%ED%8E%98%EC%9D%B4-%EB%B0%B0%EC%86%A1-%EB%AA%A8%EB%93%88-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EA%B8%B0%EC%88%A0-%EB%B6%84%EC%84%9D.html</guid>
      <description>&lt;p&gt;많은 양의 트래픽을 감당하고 어떻게 고가용성의 시스템을 구축하는지 알아보기 위해서 네이버 기술 블로그 및 세미나를 보면서 사용하는 기술을 분석하고 어떤 고민을 하고 있는지 살펴보았다.&lt;/p&gt;
&lt;h3 id=&#34;네이버-페이가-고민했던-문제점&#34;&gt;네이버 페이가 고민했던 문제점&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://tv.naver.com/v/16970002&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112708898-58560c80-8ef8-11eb-8cbf-63e2c05e0c08.png&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;위에 있는 기술 세미나 영상을 보면서, 기존에 네이버 페이에서 발생했던 문제점들과 이를 해결하기 위한 기술들을 살펴볼 수 있었다.&lt;/p&gt;
&lt;h4 id=&#34;네이버-페이에서-유저와-상호-작용하는-서비스&#34;&gt;네이버 페이에서 유저와 상호 작용하는 서비스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;스마트 스토어에 보이는 주문형 페이&lt;/li&gt;
&lt;li&gt;배달의 민족에 연동되어 있는 결제형 페이&lt;/li&gt;
&lt;li&gt;송금&lt;/li&gt;
&lt;li&gt;네이버 통장&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;배송 모듈은 주문형 페이에 속하고, 주문형 페이에는 이커머스 삼대장인 &lt;code&gt;주문&lt;/code&gt;, &lt;code&gt;배송&lt;/code&gt;, &lt;code&gt;클레임&lt;/code&gt; 을 관리하는 부서이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112709049-59d40480-8ef9-11eb-8706-414fe24baa17.png&#34; alt=&#34;Screen Shot 2021-03-27 at 12 38 32 PM&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;배송-모듈의-특징-및-문제점&#34;&gt;배송 모듈의 특징 및 문제점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;배송 모듈은 트래픽이 높았고, 다른 모듈과는 다른 특성이 있었다.&lt;/li&gt;
&lt;li&gt;다른 모듈들은, 온라인에서 데이터가 생성되며 액션의 주체가 사용자 및 내부시스템이다.&lt;/li&gt;
&lt;li&gt;배송은 오프라인에 의해서 데이터가 생성되며 액션의 주체가 유저가 아닌 외부 시스템이다.&lt;/li&gt;
&lt;li&gt;다른 모듈은 자체적으로 데이터를 생산하기에 데이터 보정 및 생성 규칙에 대해서 지정을 할 수 있지만, &lt;strong&gt;배송 모듈은 외부에 의해서 생성되는 데이터이기 때문에 데이터에 대한 필터링 및 검증이 어렵다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112709148-11691680-8efa-11eb-81ee-b8f45b245d10.png&#34; alt=&#34;Screen Shot 2021-03-27 at 12 43 35 PM&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112709170-3fe6f180-8efa-11eb-959e-5729c28895f3.png&#34; alt=&#34;Screen Shot 2021-03-27 at 12 44 52 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;또한 점점 더 비즈니스 로직이 복잡해지고, 따라서 배송 모듈에 대한 트래픽도 증가했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;기존-배송-시스템&#34;&gt;기존 배송 시스템&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112709273-3dd16280-8efb-11eb-8648-562344390386.png&#34; alt=&#34;Screen Shot 2021-03-27 at 12 52 00 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;택배사와 다이렉터로 연결하는 것이 아니라, 배송 모듈을 엔드포인트로 하여, 택배사의 정보를 제공해주는 업체와 연동을 하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;배송 데이터가 생성되면 연동 업체에 전달하고, 변경 사항이 발생했을 때, 연동 업체에서 변경분에 대해서 &lt;code&gt;FTP&lt;/code&gt; 통신으로 정보를 주고 받았다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최소 설계시에는 빠른 배송에 대한 관심이 없었던 시절이라서 &lt;code&gt;FTP&lt;/code&gt; 통신으로도 문제가 없었지만, 빠른 배송에 대한 니즈 및 실시간성을 사용자들이 요구하면서 위의 구조는 한계점을 드러내었다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;배송 데이터 생성 패턴&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112709318-c0f2b880-8efb-11eb-86a3-e797569ce216.png&#34; alt=&#34;Screen Shot 2021-03-27 at 12 55 43 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배송의 경우 특정 시간대에 트래픽이 몰리게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;한계점&#34;&gt;한계점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;HPA(Horizontal Pod Autoscaler) 구성이 되어있지 않음&lt;/li&gt;
&lt;li&gt;배송 처리로 인해서 상품 주문 및 클래임으로 다른 모듈에 부하가 전파된다.&lt;/li&gt;
&lt;li&gt;장애 인지의 어려움 (지연, 누락, 장애)&lt;/li&gt;
&lt;li&gt;내부 시스템에서 장애가 발생한 경우에는 비교적 빠른 대응이 가능했지만, 외부 업체에서 생성된 장애를 인지하기에는 어려웠다.&lt;/li&gt;
&lt;li&gt;모니터링 시스템이 미비하여 쉽게 장애를 캐치하기 어려웠다.&lt;/li&gt;
&lt;li&gt;택배사가 코드에 적용되어 있어, 심심하면 나타나는 택배사를 추가해주어야하는 업무가 있었다.&lt;/li&gt;
&lt;li&gt;이전에는 국내 택배사만 있었지만 최근에는 (일반, 해외, 물류, 장보기) 등 다양한 종류의 택배사가 등장했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;개선-시도&#34;&gt;개선 시도&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;과거 &lt;code&gt;FTP&lt;/code&gt;를 통해서 통신하던 배치에서 &lt;code&gt;Kafka&lt;/code&gt;로 변경하여 적용하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;결제 모듈과 다르게, 배송은 특정 시간대에 몰리게 되며, 배송은 N개 단위의 벌크로 진행하게 된다. 이 통신 사이에는 데이터 밸리데이션을 수행하고 데이터가 유실될 경우 데이터를 재보정 처리할 수 있어야하는 구조여야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 데이터가 외부 업체와 연동이 되어야하므로, 누구 귀책으로 데이터가 처리되지 않았는지를 알아야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 한 요청당 약 1000건의 데이터 통신이 이루어 지므로, 통신이 길어지는 문제가 발생하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112709472-58a4d680-8efd-11eb-8968-274833727a20.png&#34; alt=&#34;Screen Shot 2021-03-27 at 1 07 06 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API로 수신한 내용들을 파일로 저장하고, 그 파일을 배치로 처리하는 구조로 변경하였다.&lt;/li&gt;
&lt;li&gt;하지만 여전히 대량의 데이터를 처리하는데에는 많은 한계를 가지고 있었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112709525-c2bd7b80-8efd-11eb-81d1-4b3bb51ca795.png&#34; alt=&#34;Screen Shot 2021-03-27 at 1 10 04 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;따라서 카프카를 이용하여, 이러한 작업을 처리해주었다.&lt;/li&gt;
&lt;li&gt;배치가 주는 모니터링의 장점을 버리게 되었다.&lt;/li&gt;
&lt;li&gt;배치가 카프카로 변경되는 건 기술을 적용했을 뿐 큰 변화는 없었다.&lt;/li&gt;
&lt;li&gt;데이터 누수 및 보정에 대한 새로운 FLOW 생성이 필요했다.&lt;/li&gt;
&lt;li&gt;메시지 스펙 정의 시 확장이 아닌 기능 기반 설계를 진행하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;배송-분리-프로젝트-plasma&#34;&gt;배송 분리 프로젝트 Plasma&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;네이버 페이 서비스의 &lt;code&gt;Scalability&lt;/code&gt; 확보&lt;/li&gt;
&lt;li&gt;모놀리틱 구조의 네이버 페이 주문 서비스를 분리&lt;/li&gt;
&lt;li&gt;기존 네이버 페이 서비스 개발자와 사내 플랫폼 개발자가 협업&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;문제 해결 접근 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기술적인 부분과 비즈니스 적인 부분을 나누어서 생각을 했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;이 부분에는 나도 공감하는데, 기술적으로 풀려고 시도했을 경우 많은 생각을 해야하지만 사실 비즈니스적으로 변경하여 문제가 쉽게 풀리는 경우가 많았다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;렉 모니터링에 대한 세분화된 알람이 필요할 것으로 보임&lt;/li&gt;
&lt;li&gt;앞 모듈에 컨트롤 할 수 있는 부분을 두어서 랙이 기준치 이상 도달 할 경우, 우선순위가 중요한 메시지는 특정 큐에 집어 넣고 특정 큐에 대한 오퍼레이션을 별도로 수행하는 구조를&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;배송-서비스를-분리한-후에-구조&#34;&gt;배송 서비스를 분리한 후에 구조&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112709855-192bb980-8f00-11eb-9807-d750cf2865c3.png&#34; alt=&#34;Screen Shot 2021-03-27 at 1 26 47 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복잡한 쿼리가 필요한 데이터들은 분산 &lt;code&gt;RDBMS&lt;/code&gt;에 저장을 한다.&lt;/li&gt;
&lt;li&gt;로직이 간단한 데이터들은 &lt;code&gt;Redis&lt;/code&gt;에 저장을 한다.&lt;/li&gt;
&lt;li&gt;간단한 조회의 경우에는 API 서버를 통해서 분산 저장소에서 데이터를 읽어와 처리한다.&lt;/li&gt;
&lt;li&gt;추가 처리가 필요한 경우에는 &lt;code&gt;Kafka&lt;/code&gt;에 추가 처리나 이벤트를 발송시키게 된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kafka&lt;/code&gt;에서 처리하는 모든 이벤트는 &lt;code&gt;Logstash&lt;/code&gt;를 통해서 &lt;code&gt;Elasticseach&lt;/code&gt;에 저장이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;이벤트-기반-모니터링&#34;&gt;이벤트 기반 모니터링&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스에는 최종 데이터만 저장하고 갱신하기 때문에, 이벤트 기반 모니터링 시스템을 구축하였다. 따라서 특정 시간에 대한 데이터를 배송 이벤트를 분석해서 데이터를 처리하기 때문에 상태를 추적하거나, 상태를 복원할 수 있었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;요약&#34;&gt;요약&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;확장성에 대해서는 분산 저장소를 사용하여, 스토리지 확장성을 높혔고, 쿠버네티스를 활용하여 컴퓨팅 확장성을 높혔다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모니터링을 강화함으로써, 운영 비용을 절감시켰다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인스턴스 분리 및 의존성 분리를 통해서 장애적으로 독립적인 상태가 되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;네이버-페이-아키텍처-및-인프라-구성&#34;&gt;네이버 페이 아키텍처 및 인프라 구성&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112706593-a2cf8d00-8ee8-11eb-902b-c52b16ce62d6.png&#34; alt=&#34;Screen Shot 2021-03-27 at 10 38 54 AM&#34;&gt;&lt;/p&gt;
&lt;p&gt;나도 현재는 웹 개발자로 일하고 있지만 언젠가는 플랫폼 개발을 경험하고 싶은 마음이 있는데, 멋있다는 생각이 들었다. 내가 만든 기능을 통해서 개발자들이 어떤 서비스를 만들었다고 생각하면 자부심과 동시에, 책임감을 느낄 수 있을 것 같다. 물론 이는 모든 개발자가 마찬가지지만 특히 플랫폼 개발을 하면 더욱 와닿을 것 같은 생각이 들었다. 내가 오픈 소스 활동을 하는 이유도 이와 비슷하다. 다른 사람들에게 선한 영향력을 주고 싶다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;네이버페이는 비즈니스 성장과 트래픽 급증에 대응할 수 있도록 마이크로 서비스 아키텍처와 이벤트 드리븐 아키텍처를 적용해서 개발하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이러한 구조를 사용하면 각각의 마이크로서비스가 독자적으로 유연하게 개발되고 데이터가 더 다양한 곳에 다양한 형태로 존재하게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 기존에 고려되었지 않았던 새로운 문제가 발하고 이러한 문제를 플랫폼에서 지원해서 시스템적으로 해결하면 서비스와 완성도를 높일 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 기존 서비스 개발자와 플랫폼 개발자가 협력하여 일을 하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;마이크로서비스 아키텍처 및 이벤트 드리븐 아키텍처에 대해서 대략적으로만 알고 있어서 이 기회에 정리를 해보았다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;마이크로 서비스 아키텍처&lt;/strong&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112706776-e5459980-8ee9-11eb-85d0-29316803cc43.png&#34; alt=&#34;Screen Shot 2021-03-27 at 10 47 46 AM&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112706932-e5926480-8eea-11eb-8161-373b02c6dd56.png&#34; alt=&#34;download&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;마이크로 서비스 아키텍처는 애플리케이션을 느슨하게 결합된 모임으로 구조화하는 서비스 지향 아키텍처(SOA) 스타일의 일종인 소프트웨어 개발 기법이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;마이크로서비스 아키텍처에서 서비스들은 섬세하고, 프로토콜은 가벼운 편이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;마이크로 서비스 아키텍처의 서비스들은 독립적인 배포가 가능하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;서비스의 교체가 쉽다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;이벤트 드리븐 아키텍처&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112706975-3dc96680-8eeb-11eb-8174-3e310a6fae21.png&#34; alt=&#34;download&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112707012-7f5a1180-8eeb-11eb-8828-510c5390ffc9.png&#34; alt=&#34;Screen Shot 2021-03-27 at 10 59 22 AM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이벤트 드리븐 아키텍처(EDA)는 이벤트의 생산, 감지, 소비 및 반응을 제고하는 소프트웨어 아키텍처 패턴이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이벤트는 &amp;ldquo;상태의 변화&amp;quot;로 정의할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시스템 내부 및 외부에 발생한 주목할 만한 상태의 변환에 기반하여 동작한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예를 들어, 소비자가 자동차를 구매할 때, 자동차의 상태는 &amp;ldquo;판매 중&amp;quot;에서 &amp;ldquo;판매 완료&amp;quot;로 바뀐다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정 행동이 자동으로, 순서에 따라서 발생하는 것이 아닌 어떤 일에 대한 반응으로 동작하는 패턴이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;이벤트-주도-마이크로서비스edm&#34;&gt;&lt;strong&gt;이벤트 주도 마이크로서비스(EDM)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;이벤트 주도 마이크로 서비스(EDM)은 &lt;strong&gt;MSA가 적용된 시스템에서 이벤트 발생시 해당 이벤트 로그를 보관하고 이를 기반으로 동작하며, 비동기 통신을 통해 시스템 내 통합(integeration)을 수행하는 아키텍처이다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112707540-8daa2c80-8eef-11eb-9e23-ee07bae1391d.png&#34; alt=&#34;0_FvyN47z7FwnKPflx&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이벤트 : 이벤트 주도에서 언급하는 이벤트는 상태의 변경, 즉 데이터의 변경, 생성, 삭제 (&lt;code&gt;CUD&lt;/code&gt;)를 통해서 발생하는 서비스의 의미있는 변화를 뜻한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이벤트 로그 보관: 현재의 데이터는 상태 변경의 누적이라는 생각에서 시작한다. 이 때의 상태 변경은 이벤트를 뜻하고 이를 누적하는 행위는 이벤트 로그를 보관하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;EDM&lt;/code&gt;에서 생성한 이벤트는 반드시 보관되어야 한다. 보관된 이벤트는 데이터의 현재 상태를 구성하는 근간이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 보관된 이벤트를 바탕으로 장애 발생 또는 특정 요구사항에 따라 지정된 시점으로 복원을 수행한다. 이벤트 로그를 보관하는 장소를 이벤트 스토어라고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비동기 통신 : &lt;code&gt;AMQP&lt;/code&gt;, &lt;code&gt;MQTT&lt;/code&gt;, &lt;code&gt;JMS&lt;/code&gt;등 메세지 프로토콜을 통한 메시지 큐 방식이 자주 사용된다. 서비스에서 데이터의 생성, 변경, 삭제(CUD)를 통해 이벤트가 발생하면, 발생 서비스는 메시지의 형태로 이벤트를 발생하고, 해당 이벤트에 관심이 있는 서비스에서 구독을 수행한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;네이버-페이를-뒷-받침하는-플랫폼&#34;&gt;네이버 페이를 뒷 받침하는 플랫폼&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112707316-c1845280-8eed-11eb-9a00-62e759d3b2d6.png&#34; alt=&#34;download&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/112707334-e8428900-8eed-11eb-89c5-e3397fd6f3cc.png&#34; alt=&#34;download&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;빠르고 유연한 확장을 위해서, 쿠버네티스 클러스터에서 서비스 이미지를 배포해서 사용하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메인 데이터베이스 저장소로는 자체 분산 데이터베이스 클러스터(&lt;code&gt;nBase-T&lt;/code&gt;)와 분산 레디스 클러스터를 사용하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이벤트 전달 및 저장을 위해서 &lt;code&gt;Kafka&lt;/code&gt;, &lt;code&gt;ElasticSearch&lt;/code&gt; 클러스터와 &lt;code&gt;LogStash&lt;/code&gt;를 사용하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모니터링과 분석을 위해서 사용하는 플랫폼은 &lt;code&gt;Grafana&lt;/code&gt;를 사용하고 있고, &lt;code&gt;Elasticsearch&lt;/code&gt; 상태와 데이터 확인을 위해서 &lt;code&gt;Kibana&lt;/code&gt;와 &lt;code&gt;Cerebro&lt;/code&gt;를 사용하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;로그 수집과 매트릭 수집은 자체 플랫폼을 사용하고 있고 &lt;code&gt;APM(application performance management)&lt;/code&gt;로는 사내에서 오픈 소스로 발표한 &lt;code&gt;Pinpoint&lt;/code&gt;를 사용하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 플랫폼을 활용해서 서비스를 개발하고 있고, 공통화가 필요한 부분은 플랫폼에 적용하거나 라이브러리화 하고 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;인상 깊었던 부분은 &lt;code&gt;Spring Data JDBC&lt;/code&gt;에서 제공하지 않는 추가 기능들은 직접 개발해서 사용한다는 것이다. 기술에 이해도가 높지 않으면 절대로 쉽지 않다는 것을 알기 때문이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;인프라-운영&#34;&gt;인프라 운영&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CI/CD&lt;/code&gt; 시스템으로 젠킨스를 적극적으로 활용하고 있다.&lt;/li&gt;
&lt;li&gt;서비스가 메모리나 CPU를 과도하게 사용하고 있으면 &lt;code&gt;Grafana&lt;/code&gt;가 알려주고, 오류 로그가 있으면 로깅 시스템이 알려주고, &lt;code&gt;Kafka&lt;/code&gt;에 &lt;code&gt;LAG&lt;/code&gt;이 생기면 매트릭 시스템이 알려주고, 에러 응답이 늘어나면 &lt;code&gt;Pinpoint&lt;/code&gt;가 알려주는 식으로 동작한다.&lt;/li&gt;
&lt;li&gt;서비스가 복잡해지고 문제 상황에서 확인해봐야 하는 곳이 늘어나도 이러한 알람을 통해서 빠르게 파악할 수 있다.&lt;/li&gt;
&lt;li&gt;이러한 플랫폼들을 활용하여 시간을 아낄 수 있었고, 아낀 시간을 서비스 개발에 투자할 수 있었다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;새로운 플랫폼을 접했을 때는 대부분 개념 증명부터 해보면서 필요한 부분만 빨리 익혀서 사용하는 편이라고 했다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;일하는-방식&#34;&gt;일하는 방식&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;길거나 짧은 목표를 설정한 후 거기까지 각자의 역량을 발휘해서 자유롭게 도달하는 방식으로 일한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;목표에 어떤 방법으로도 도달해도 좋지만, 그 방식에 타당한 이유가 있어야하고, 방식에 확신이 없을 때는 주위 사람과 활발하게 논의해서 진행한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;서비스의 목표 내지는 문제를 해결하는 과정에서 플랫폼이 지원하면 효율적인 일도 도출되었던 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기록과 공유가 권장되는 분위기이다. 그렇기에 팀에서는 사내/외 세미나나 기고를 통해서 경험을 활발하게 공유하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.naver.com/naver_diary/222059276316&#34;&gt;네피셜 플랫폼 개발자의 커머스 서비스 개발기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Microservices&#34;&gt;Wiki - Microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/dtevangelist/event-driven-microservice-%EB%9E%80-54b4eaf7cc4a&#34;&gt;Event Driven Architecture란?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tv.naver.com/v/16970002&#34;&gt;페이왕국 주문가문 배송용사 독립기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>네이버 신입 공채 체크 포인트 및 준비해야할 것들</title>
      <link>https://dongwooklee96.github.io/post/2021/03/07/%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%8B%A0%EC%9E%85-%EA%B3%B5%EC%B1%84-%EC%B2%B4%ED%81%AC-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%B0%8F-%EC%A4%80%EB%B9%84%ED%95%B4%EC%95%BC%ED%95%A0-%EA%B2%83%EB%93%A4.html</link>
      <pubDate>Sun, 07 Mar 2021 22:15:14 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/07/%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%8B%A0%EC%9E%85-%EA%B3%B5%EC%B1%84-%EC%B2%B4%ED%81%AC-%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%B0%8F-%EC%A4%80%EB%B9%84%ED%95%B4%EC%95%BC%ED%95%A0-%EA%B2%83%EB%93%A4.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110241534-b7c59a00-7f94-11eb-8b8c-3038b005cff4.png&#34; alt=&#34;Screen Shot 2021-03-07 at 10 29 29 PM&#34;&gt;&lt;/p&gt;
&lt;p&gt;네이버에서 신입을 뽑을 때 고려하는 부분을 알 수 있을 것 같아서 읽어보았다. 물론 다른 기업들도 이러한 점을 고려해서 신입을 뽑을 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://campaign.naver.com/recruit2020/checkpoint/&#34;&gt;2020신입개발공채체크포인트!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;네이버가-강조하는-세가지의-키워드&#34;&gt;네이버가 강조하는 세가지의 키워드&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;기본기!&lt;/li&gt;
&lt;li&gt;커뮤니케이션!&lt;/li&gt;
&lt;li&gt;성장가능성!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;기본기&#34;&gt;기본기&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;기술 생태계가 빠르기 때문에, 의욕만 앞서 모두 다 경험해보겠다는 태도는 그다지 효율적인 접근 방법이 아니다.
따라서 이럴 수록 기본기에 충실해야만 새로운 기술 흐름에 압도되지 않고, 스스로의 방향성과 페이스로 앞으로 나갈 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;새로운 기술을 배웠다거나, 사용할 수 있다고 어필을 하는 것 보다는 기본기가 탄탄하다는 인상을 주는 것이 유리할 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 자료구조, &lt;strong&gt;운영체제&lt;/strong&gt;, 알고리즘, &lt;strong&gt;네트워크&lt;/strong&gt;, &lt;strong&gt;데이터베이스&lt;/strong&gt; 관련된 블로그 포스팅을 하고 면접 때 이러한 기본기에 대한 답변을 잘 할 수 있도록 해야겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기초를 많이 깊게 공부하는 것이 네이버를 입사하는데 많은 도움이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;또한 다음과 같은 부분도 함께 본다고 했다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 너비보다 깊이.
2. 끝까지 파본 경험 
3. 창업자형 개발
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;면접&#34;&gt;면접&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;틀린답이라도 왜 그러한 답을 냈는지 설명하는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;문제를 해결하기 위한 자신의 노력을 어필하는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;모르면 찾으면 되고, 질문하면 되지만 끝까지 파고들고자 하는 마음가짐이 없으면 확실한 결과물을 만들어내지 못한다!&lt;/li&gt;
&lt;li&gt;공부를 하려는 사람을 많이 뽑으려고 했다.&lt;/li&gt;
&lt;li&gt;문제를 접근하는 방식에 있어서 어떤 식으로 접근하려고 하는지를 많이 보았다.&lt;/li&gt;
&lt;li&gt;1차 면접이 끝났다고, 거기서 안주하지 말고 어떤 점들을 더 보강하면 되는지를 생각을 해라.&lt;/li&gt;
&lt;li&gt;전산 기초 과목에 대한 학습을 충분히 하는 것을 추천한다. &lt;strong&gt;단순히 외우지 말고 이해해야 한다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;왜?&amp;lsquo;라고 스스로에게 질문하고 답을 찾아봐야한다. 왜 이런 개념이 나왔는지, 왜 이 개념이 더 좋은지, 한번 깊이 생각을 해보는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;잘 모르겠으면 솔직히 이야기를 하라! 그러면 면접관들이 힌트를 줄 것이다.&lt;/li&gt;
&lt;li&gt;정답을 맞추는 능력 이상으로 답을 유추해 가는 사고력 또한 굉장히 중요하기 때문이다.&lt;/li&gt;
&lt;li&gt;본인이 해결해왔던 문제를 어떤 식으로 대하고, 접근했고, 치열하게 고민하고, 솔루션을 도출했는지를 중점적으로 물어본다.&lt;/li&gt;
&lt;li&gt;성공했으면 성공한 대로, 실패했으면 실패한대로 의미가 있기 때문이다.&lt;/li&gt;
&lt;li&gt;개발을 정말 좋아하고 기저의 원리를 이해하는데, 많은 노력을 들였는지를 물어본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110243042-14788300-7f9c-11eb-80d1-a4f252ce7cda.png&#34; alt=&#34;Screen Shot 2021-03-07 at 11 22 52 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;최대한 구체적이고&amp;rdquo;, &amp;ldquo;솔직할 것이다.&amp;rdquo; 왜냐하면 개발자의 핵심 역량은 &lt;strong&gt;설계 역량&lt;/strong&gt;, &lt;strong&gt;논리적 사고&lt;/strong&gt;이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;커뮤니케이션&#34;&gt;커뮤니케이션&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;문제를 잘 듣고 이해하며, 자신이 생각한 답을 명확하고 간결하게 커뮤니케이션 할 수 있는지를 본다.&lt;/li&gt;
&lt;li&gt;협업에 대한 것을 강조해서 질문을 한다.&lt;/li&gt;
&lt;li&gt;여러가지 해결책들이 존재하는 질문을 던지게 되고, 아래 항목정도를 살펴본다.
&lt;ul&gt;
&lt;li&gt;문제를 어떤 수준에서 이해하고, 본인의 전문성/인사이트를 보여주는지&lt;/li&gt;
&lt;li&gt;면접관이 면접자의 의견과 방향이 다른 해결책을 제시했을 때, 다른 해결책에 대해서 어떻게 반응하는지, 수렴하여 시너지가 나는 새로운 방향을 제시하는지&lt;/li&gt;
&lt;li&gt;면접관이 면접자의 해결책의 안되는 이유를 여러가지 나열 했을 때, 이것들을 어떻게 정리하고 일이 되게 만드는 방향에 집중하는지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 부분은 어떻게 키워야 할지 조금 막막하다. 지금도 노력하고 있지만 가장 부족한 부분이 커뮤니케이션 부분이라고 생각하기 때문이다.&lt;/p&gt;
&lt;h2 id=&#34;지원서&#34;&gt;지원서&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;화려한 문체나 거창한 커리어보다는, 개발에 대한 나만의 열정과, 노력들을 보여주는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;개발을 정말로 좋아하는지를 많이 본다.&lt;/li&gt;
&lt;li&gt;이수한 컴퓨터공학 관련 과목, 기술적 문제를 해결한 경험, 에너지를 집중해 끝가지 파고 들었던 경험을 적는 것이 좋다.&lt;/li&gt;
&lt;li&gt;개발자로서 개선해보고 싶은 네이버 서비스등도 미리 생각하면 좋다.&lt;/li&gt;
&lt;li&gt;포기하지 않고 끝까지 몰입해본 경험, 세상의 불편을 개발로 풀고자 시도했던 경험 등 개발자로서 성장 의지를 보여줄 수 있는 본인만의 스토리가 있다면 잘 녹여서 적어라&lt;/li&gt;
&lt;li&gt;내가 무엇을 할 수 있는지가 명확히 드러나는 지원서를 선호한다.&lt;/li&gt;
&lt;li&gt;어떤 프로젝트를 했었고, 그 프로젝트에서 어떤 역할을 했고, 내가 만든 산출물이 어떤 것이고, 기술적으로 어떤 고민을 했었는지 등이 나와 있는 지원서의 경우 더 자세히 보게 된다.&lt;/li&gt;
&lt;li&gt;지원서에 개인 &lt;code&gt;GITHUB URL&lt;/code&gt;을 작성한 지원자의 경우, 꼭 들어가서 본다.&lt;/li&gt;
&lt;li&gt;소스코드를 통해서 지원자의 개발 역량을 파악할 수 있을 뿐더라, &lt;code&gt;GITHUB&lt;/code&gt;를 운영하고 공유할 정도라면 어느 정도 수준이 있는 개발자일 것이라는 기대를 하기 때문이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GITHUB&lt;/code&gt;는 생각보다 많은 정보를 준다. 소스 코드를 지속적으로 업로드 하고, 관리하고 공유하는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;지원서에서는 &amp;lsquo;결과&amp;rsquo;보다는 &amp;lsquo;무엇을 했는지&amp;rsquo; 강조하는 것이 좋다.&lt;/li&gt;
&lt;li&gt;학과 공부에서 배운 것 뿐만 아니라 새로 알게 된 경험에 관한 이야기도 좋다.&lt;/li&gt;
&lt;li&gt;협업에 대해서 이야기 하고 싶다면 갈등, 조정, 협의, 합의 등에 이르게 된 과정을 설명하는게 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;결론&#34;&gt;결론&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;네이버가 왜 이러한 점을 면접때 보는지 생각하면 업무에 도움이 되고 성장할 수 있는 개발자를 뽑으려고 하기 때문이다. 따라서 앞으로 내 업무 능력을 키워가는데도 도움이 될 것이라고 생각한다.&lt;/p&gt;
&lt;p&gt;그리고 일을 하면서 만나는 문제들을 끝까지 파보자라는 자세를 가지고 접근하며 이와 내가 문제를 어떤 식으로 대하고, 접근했고, 치열하게 고민했고, 파봤고, 솔루션을 도출한 과정을 적으려면 실제로 그러한 자세로 일을 해야한다.&lt;/p&gt;
&lt;p&gt;너무 많아서 다 정리하지는 못했다. 하지만 어떤 기업을 지원하더라도, 지원서를 작성하기 전에, 이 사이트에 들려서 내가 작성한 글이 적합한지에 대한 고민을 해봐야 할 것이다.&lt;/p&gt;
&lt;h2 id=&#34;코딩-테스트&#34;&gt;코딩 테스트&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/110243118-5d303c00-7f9c-11eb-9bdd-c9aa327aa421.png&#34; alt=&#34;Screen Shot 2021-03-07 at 11 24 31 PM&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://campaign.naver.com/recruit2020/checkpoint/&#34;&gt;naver 2020 신입개발공채 체크포인트!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>우아한 테크 코드 지원 후기 및 회고</title>
      <link>https://dongwooklee96.github.io/post/2021/03/03/%EC%9A%B0%EC%95%84%ED%95%9C-%ED%85%8C%ED%81%AC-%EC%BD%94%EB%93%9C-%EC%A7%80%EC%9B%90-%ED%9B%84%EA%B8%B0-%EB%B0%8F-%ED%9A%8C%EA%B3%A0.html</link>
      <pubDate>Wed, 03 Mar 2021 23:15:14 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/03/%EC%9A%B0%EC%95%84%ED%95%9C-%ED%85%8C%ED%81%AC-%EC%BD%94%EB%93%9C-%EC%A7%80%EC%9B%90-%ED%9B%84%EA%B8%B0-%EB%B0%8F-%ED%9A%8C%EA%B3%A0.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109818546-707a9900-7c76-11eb-857b-2ee77f773bf0.png&#34; alt=&#34;Screen Shot 2021-03-03 at 11 15 58 PM&#34;&gt;&lt;/p&gt;
&lt;p&gt;이전에 우아한 테크코스에 지원을 하여 코딩 테스트를 본 적이 있었다. 비록 탈락했지만 다음에 더 잘할 수 있도록 피드백을 주셨다.&lt;/p&gt;
&lt;h3 id=&#34;코딩-테스트&#34;&gt;코딩 테스트&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;코딩 테스트의 경우 알고리즘 역량이나 풀이 속도도 중요하지만, 문제를 명확하고 꼼꼼히 이해하는 능력이 가장 중요하다고 하셨다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로그래머에게 속도가 빠름도 중요하지만, 그 보다는 요구사항을 명확히 이해해 버그없는 프로그래밍을 구현하는게 더 중요하다고 하셨다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;자기소개서&#34;&gt;자기소개서&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;자기소개서는 구체적으로 쓰는 것이 좋다. 어떤 내용을 학습했다는 결과 위주의 내용이 아니라, 어떤 내용을 학습하는데 어떤 어려움이 있었고, 어떻게 극복했다와 같이 구체적인 사례를 들어서 공감을 얻는 것이 중요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자기소개서에서 얻고 싶은 가장 큰 부분은 여러분이 생각에만 그치지 않고 행동으로 얼마나 실행했는지를 보고 싶은 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;누구나 생각을 할 수는 있지만 이를 실행으로 옮겨 일정 수준의 성취를 만들기란 쉬운 것이 아니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;작은 성취라도 만들어가는 과정에서 깨달음들을 보여준다면, 합격률이 조금은 높아질 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>라인 개발자 입사기를 읽고 느낀점</title>
      <link>https://dongwooklee96.github.io/post/2021/03/03/%EB%9D%BC%EC%9D%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9E%85%EC%82%AC%EA%B8%B0%EB%A5%BC-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90.html</link>
      <pubDate>Wed, 03 Mar 2021 21:49:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/03/%EB%9D%BC%EC%9D%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9E%85%EC%82%AC%EA%B8%B0%EB%A5%BC-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90.html</guid>
      <description>&lt;h1 id=&#34;지원서-작성할-때-참고할-부분&#34;&gt;지원서 작성할 때, 참고할 부분&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109811374-1a095c80-7c6e-11eb-9077-d4d5a18b0768.png&#34; alt=&#34;Screen Shot 2021-03-03 at 10 16 05 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;대외 활동을 했다는 사실 그 자체보다는 그 활동에서 배우고 얼마나 성장했는지를 위주로 적자&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;무엇을 했는지가 중요한 것이 아니다, 무엇을 얻었고, 배웠는지를 위주로 작성하자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;어떤 활동을 하더라도, 자신의 성장을 연결하는 것이 중요하다, 자신의 성장을 감춰두고 혼자만 아는 것 보다는 어떠한 방식으로도 그것을 드러내서 어필하는 것이 중요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;신입-개발자가-아닌-경우&#34;&gt;신입 개발자가 아닌 경우&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109811905-bdf30800-7c6e-11eb-844c-0ec338e53c4f.png&#34; alt=&#34;Screen Shot 2021-03-03 at 10 20 14 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스스로 공부해 왔던 내용과, 더불어 내가 어떤 개발자가 되고 싶은지 목표를 설정&lt;/li&gt;
&lt;li&gt;지금 근무하는 곳에서 책임감을 가지고 근무하는 모습이 중요하다.&lt;/li&gt;
&lt;li&gt;이직을 준비하더라도 현재 다니고 있는 직장에 집중하고 최선을 다하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;코딩-테스트-준비&#34;&gt;코딩 테스트 준비&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;선택한 하나의 알고리즘을 난이도 별로 풀어보았다.&lt;/li&gt;
&lt;li&gt;특히 구현, 자료구조 부분은 다른 문제와 연계되는 경우가 많아서 더욱 집중적으로 풀어보았다.&lt;/li&gt;
&lt;li&gt;채용을 준비할 때는 취업을 준비하기전에 풀었던 문제의 절반정도를 풀면서 연습을 했다.&lt;/li&gt;
&lt;li&gt;코딩 테스트라는 과정은 단기간에 실력을 올릴 수 없기 때문에, 매일 또는 매주 꾸준히 코딩 테스트 문제를 풀어보는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;처음 준비를 할 때는 알고리즘 공부를 위한 영상을 찾고, 해당 영상을 들으면서 그날 배웠던 알고리즘과 관련된 문제를 2~3개 정도 풀면서 준비를 했다.&lt;/li&gt;
&lt;li&gt;꾸준히 흥미를 붙여가면서 하는것이 중요하다.&lt;/li&gt;
&lt;li&gt;단기간에 바짝 공부해서 관련 내용을 익히고 문제 풀이 능력을 성장시키는 것보다는, 꾸준하게 문제의 유형과 풀이의 방식을 익히면서 체득하는 것이 많은 도움이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;서류-제출과-관련된-팁&#34;&gt;서류 제출과 관련된 팁!&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;나 자신을 잘 아는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;&amp;lsquo;나&amp;rsquo;를 알아야 어필할 수 있는 포인트도 보이고, 나에게 잘 맞는 직무도 찾을 수 있다.&lt;/li&gt;
&lt;li&gt;내가 지금까지 활동했던 것을 정리해보는 것을 추천한다.&lt;/li&gt;
&lt;li&gt;어떤 경험을 했고, 어떤 일이 일어났고, 어떤 것을 배우고 얻었는지를 중점으로 작성해보는 것이다.&lt;/li&gt;
&lt;li&gt;그리고 나서 지원할 직무와 연결지어서 어떤 경험들을 추려낼지 고민하면서 서류를 작성하면 조금 더 쉬워질 것이다.&lt;/li&gt;
&lt;li&gt;내가 흥미를 느끼는 분야와 기술, 그리고 쌓아온 역량을 직무와 연결지어서 생각해보면 좋을 것이다.&lt;/li&gt;
&lt;li&gt;포트폴리오의 경우에는 진행 했던 프로젝트의 전체 구조와 내가 맡았던 역할, 사용한 기술을 중점으로 만들었다. 그리고 각각의 프로젝트에 해당하는 &lt;code&gt;Git Repository&lt;/code&gt;를 추가하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/109813328-8d13d280-7c70-11eb-9fc4-5fbb310702a4.png&#34; alt=&#34;Screen Shot 2021-03-03 at 10 33 50 PM&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;포트폴리오를 작성할 때는, &lt;code&gt;문제 발생 - 문제 원인 파악 - 해결책 적용 - 결과&lt;/code&gt; 와 같은 순서로 프로젝트 문제 해결 과정을 서술 하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;이 부분에 공감을 하는데, 포트폴리오에서 내가 보여줘야할 것은 내가 얼마만큼 알고 할 수 있는 능력이 있는지 보다는, 내가 어떤 분야를 얼마만큼 고민했다는 사실을 어필하는 것이 더 효과적일 것이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;포트폴리오에서는 자신의 개발 역량이나 팀으로 활동할 때의 자신의 모습을 보여줄 수 있는 것 등 자기소개서에서 드러내지 못한 부분을 보여주면 좋을 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;면접을-위해서-따로-준비한-것들&#34;&gt;면접을 위해서 따로 준비한 것들&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;CS(Computer Science) 지식과 프로젝트에서 사용한 기술들을 다시 한 번 정리하였다.&lt;/li&gt;
&lt;li&gt;운영체제, 데이터베이스, 자료구조/알고리즘, 네트워크에 대해서 정리를 하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;되도록 공식 개발 문서를 레퍼런스로 하여, CS 지식들을 틈틈히 정리하도록 해야겠다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트에서 사용한 기술은 왜 그 기술을 사용했고, 어떤 장/단점을 가지고 있으며, 어떤한 원리로 동작하는지를 중점으로 준비하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;나의 포트폴리오에서 보완해야할 점이다. 왜 그 기술을 사용했는지, 그리고 어떤 장/단점을 가지고 있는지, 어떠한 원리로 동작하는지 고민을 많이하지 않았다.따라서 이러한 부분을 개선하자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다른 사람들에게 자신의 포트폴리오를 보여주고 피드백을 얻는 것도 좋은 방법이 될 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;면접을 위해서는 자기소개서와 포트폴리오를 다시 확인하면서 예상 질문을 확인하였고, 또한 블로그에 포스팅한 내용들을 공부하며 범위를 넓혔다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;면접을 보기 전에, 친구들과 모의 면접을 보거나 휴대폰으로 답변하는 모습을 촬영하면서 준비하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;답변할 때는 스스로 어필하고 싶거나 강조하고 싶은 점에 대해서는 톤을 달리하고, 시선 처리는 한곳만 바라보거나 허공을 바라보지 않게 면접관들을 번갈아 볼 수 있게 준비하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;답변할 수 있는 것은 자신있게 답변하고, 모르는 것은 모른다고 답하되 보완할 방법이나 알고 있는 비슷한 개념을 엮어 답변을 할 수 있도록 준비해라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자신이 제출한 자기소개서, 이력서, 포트폴리오를 2 ~ 3번 정독하고 면접관들이 어떤 부분에서 궁금할지를 예측하여 자문자답하면서 내용을 정리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;면접은 &amp;lsquo;어떻게&amp;rsquo;보다 &amp;lsquo;왜&amp;rsquo;라는 질문을 받았을 때 제대로 답변할 수 있도록 준비를 하면 좋을 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대답을 못한다고 감점은 없다, 따라서 모르면 모른다고 답변을 하고 모든 것을 후회없이 보여줄 수 있도록 준비를 하자.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;결론&#34;&gt;결론&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;코딩 테스트 준비를 꾸준히 하자.&lt;/li&gt;
&lt;li&gt;컴퓨터 공학 관련 지식들을 꾸준히 리마인드 하고, 블로그에 잘 정리를 하자.&lt;/li&gt;
&lt;li&gt;포트폴리오는 왜 이러한 기술을 사용했고, 문제점, 및 문제를 해결한 과정이 잘 녹아들어 있어야 한다.&lt;/li&gt;
&lt;li&gt;면접은 &amp;lsquo;어떻게&amp;rsquo;보다는 &amp;lsquo;왜&amp;rsquo;라는 질문에 답을 할 수 있어야 한다.&lt;/li&gt;
&lt;li&gt;면접 질문 기반이 자기소개서 및 포트폴리오에서 나오므로 자기소개서 및 포트폴리오를 처음부터 잘 작성하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.linecorp.com/ko/blog/2020-first-half-new-liners-interview/&#34;&gt;2020 상반기 LINE 신입 개발자 3인의 WOW한 입사기!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>개발자 채용 프로세스</title>
      <link>https://dongwooklee96.github.io/post/2021/02/27/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%B1%84%EC%9A%A9-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4.html</link>
      <pubDate>Sat, 27 Feb 2021 22:56:33 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/02/27/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%B1%84%EC%9A%A9-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4.html</guid>
      <description>&lt;h1 id=&#34;개발자-채용-프로세스&#34;&gt;개발자 채용 프로세스&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;개발자 채용 프로세스는 다음과 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;서류 검토&lt;/li&gt;
&lt;li&gt;코딩 테스트&lt;/li&gt;
&lt;li&gt;기술 면접&lt;/li&gt;
&lt;li&gt;인성 면접&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;코딩 테스트는 주로 알고리즘 문제를 출제하므로, 알고리즘을 열심히 공부하고 연습했다면 합격할 수 있다.&lt;/li&gt;
&lt;li&gt;하지만 기술 면접에서는 알고리즘 외에도 컴퓨터구조, 운영체제 등 컴퓨터공학 전반에 대한 다양한 지식에 관해서 질문하므로 공부해야할 범위가 상당히 넓다.&lt;/li&gt;
&lt;li&gt;또한 아무리 실력이 좋더라도 성실성과 팀원으로서 잘 어울릴 수 있는지 그리고 커뮤니케이션 능력 또한 무시할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;기술-면접의-대표-유형&#34;&gt;기술 면접의 대표 유형&lt;/h1&gt;
&lt;hr&gt;
&lt;h3 id=&#34;알고리즘-문제-풀이와-질의-응답-형식&#34;&gt;알고리즘 문제 풀이와 질의 응답 형식&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;코딩 테스트를 치른 내용을 토대로 면접을 진행하며 알고리즘 역량이 제대로 갖추었는지를 평가한다.&lt;/li&gt;
&lt;li&gt;알고리즘의 원리를 완전히 자기것으로 만들 수 있어야한다.&lt;/li&gt;
&lt;li&gt;자료구조와 알고리즘에 대한 이해가 바탕이 되어야한다.&lt;/li&gt;
&lt;li&gt;단순히 알고리즘의 시간 복잡도를 평가하는 것만으로는 부족하고, 실제로 서로 다른 알고리즘을 비교하여 &amp;lsquo;특정한 상황&amp;rsquo;에서 무엇이 더 좋을지를 설명할 수 있어야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;포트폴리오-질의-응답-형식&#34;&gt;포트폴리오 질의 응답 형식&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;투입될 개발 프로젝트에 필요한 지식을 가지고 있는지 물어볼 때 주로 이용되는 유형이다.&lt;/li&gt;
&lt;li&gt;개발 경험에 가중치를 부여하는 회사는 포트폴리오를 상당히 중요하게 본다.&lt;/li&gt;
&lt;li&gt;이를 대비해 공부하면서 만든 토이 프로젝트를 정리하여 포트폴리오로 만들어두면 좋다.&lt;/li&gt;
&lt;li&gt;다른 사람들이 보기 편하게 문서화를 하는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;만약 팀 프로젝트라면 본이이 맡은 역할 및 이슈를 해결하면서 배운 내용 등을 문서에 담도록 하자.&lt;/li&gt;
&lt;li&gt;또한 전체 소스코드를 깃 허브에 올리고 이력서에 깃허브 주소를 첨부하는 것이 좋다.&lt;/li&gt;
&lt;li&gt;AWS, GCP에 배포하는 형식으로 포트폴리오를 제출해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;컴퓨터-공학-질의-응답-형식&#34;&gt;컴퓨터 공학 질의 응답 형식&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;기술 면접 때 컴퓨터공학에 대한 전반적인 지식을 질문하기도 한다.&lt;/li&gt;
&lt;li&gt;운영체제, 컴퓨터아키텍처, 개발 방법론 등에 대한 이해가 있어야 개발할 수 있는 분야도 있기 때문이다.&lt;/li&gt;
&lt;li&gt;예를 들어서 서버 개발을 할 때는 멀티 스레딩, 메모리 관리 등을 알아야한다.&lt;/li&gt;
&lt;li&gt;또한 어느 분야든 네트워크에 대한 지식이 필요하다. 예를 들어서 웹 개발 직군에 지원한다면 (GET, POST 방식의 차이나) TCP, UDP, HTTP, HTTPS의 개념과 원리에 대해서 알고 있어야 한다.&lt;/li&gt;
&lt;li&gt;데이터베이스 관련 직군이라면 데이터베이스의 정규화, 인덱스, NoSQL 등 다양한 데이터베이스 관련 내용에 대해서 물어볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;기술-면접-준비&#34;&gt;기술 면접 준비&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;알고리즘 문제를 잘 풀었다고 해서, 기술 면접을 쉽게 통과할 수 있다고 생각을 하면 안된다.&lt;/li&gt;
&lt;li&gt;기업에서 원하는 직원은 문제를 풀어 &amp;lsquo;정답 판정&amp;rsquo;을 받는 지원자가 아니라, 어떤 방법으로 문제에 접근하여 어떠한 알고리즘을 사용했는지를 논리 정연하게 설명할 수 있는 지원자를 원한다.&lt;/li&gt;
&lt;li&gt;회사에서 같이 일할 사람을 뽑는 과정이므로 논리적으로 말로 정리하는 능력도 매우 중요하다.&lt;/li&gt;
&lt;li&gt;이러한 능력은 하루 아침에 생기는 것이 아니므로, 평소에 기술 블로그나 깃허브 저장소를 운영하며 능력을 키워갈 수 있다. 또한 글로도 논리적인 풀이 능력을 확인할 수 있으므로 채용시에 장점이 될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;기술-면접의-어려움&#34;&gt;기술 면접의 어려움&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;면접관마다 중요하게 생각하는 개발자의 자질이 다들 수 있어서, 기술 면접을 &amp;lsquo;완벽&amp;rsquo;하게 대비하는 일은 불가능하다.&lt;/li&gt;
&lt;li&gt;어떤 면접관은 (개발자) 수학과 알고리즘의 원리를 중요하게 생각해서 업무에서 필요한 알고리즘 원리에 초점을 맞추어 질문을 할 수 있는 반면에, 다른 면접관은 프레임워크나 라이브러리를 다룬 경험을 중요하게 생각하여 관련 경험을 주로 물어볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;인성-면접-질문-리스트&#34;&gt;인성 면접 질문 리스트&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;다음은 대표적인 인성 면접 질문 리스트이다. 아무것도 모르는 것보다는 이러한 유형으로 질문을 받을 수 있다는 것을 알고 미리 자신만의 대답을 질문하는 것이 좋을 것이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;개발하면서 가장 행복했던 일은 무엇인가요?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 질문은 개발자로서의 열정을 느낀 경험을 물어보는 질문이다. 개발하면서 행복감을 느꼈던 순간이나, 보람을 느꼈던 경험을 이야기하면 좋다. 채용자는 같이 일할 만한 사람인지를 확인하고자 이러한 질문을 한다. 따라서 자신이 개발하면서 얼마나 행복감을 느끼는지, 어떨 때 기쁜지 등을 설명하면서 개발을 좋아한다는 점을 알리면 좋다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;자신이 가장 열정적으로 참여했던 프로젝트가 있다면 이야기해주세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 질문에는 자신이 열정적으로 참여했던 프로젝트를 소개하고, 누구와 함께 했는지, 자신이 맡은 역할이 무엇이었는지를 답하면 된다. 특히 프로젝트에서 자신이 기여한 파트를 구체적으로 언급하고 그 과정에서 겪었던 어려운 점을 어떻게 해결하여 실력 향상을 이룰 수 있었는지에 대해서 설명할 수 있을 정도로 준비를 하자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;회사에 대해 궁금한 점이 있다면 말해주세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;면접은 단순히 회사에 채용되는 과정이 아니라, 여러분 또한 회사를 선택하는 입장이라는 점을 기억하자. 따라서 회사에 대하여 궁금한 점이 있다면 질문할 수 있도록 사전에 회사에 대해 알아보고 면접에 임하자.&lt;/p&gt;
&lt;p&gt;1차원적으로 궁금한 것을 물어보는 것보다는 자신의 개발자로서의 성향 중에서 &amp;lsquo;긍정적인 성향&amp;rsquo;을 드러낼 만한 질문을 하는 것이 좋다.&lt;/p&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>코딩 테스트 출제 경향 및 준비 방향</title>
      <link>https://dongwooklee96.github.io/post/2021/02/27/%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%B6%9C%EC%A0%9C-%EA%B2%BD%ED%96%A5-%EB%B0%8F-%EC%A4%80%EB%B9%84-%EB%B0%A9%ED%96%A5.html</link>
      <pubDate>Sat, 27 Feb 2021 22:28:35 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/02/27/%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%B6%9C%EC%A0%9C-%EA%B2%BD%ED%96%A5-%EB%B0%8F-%EC%A4%80%EB%B9%84-%EB%B0%A9%ED%96%A5.html</guid>
      <description>&lt;h1 id=&#34;최신-출제-경향과-준비-방향&#34;&gt;최신 출제 경향과 준비 방향&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;정확한 알고리즘을 사용하여 얼마나 빠르게 많은 문제를 풀었는지를 토대로 순위를 매긴다.&lt;/li&gt;
&lt;li&gt;기업은 코딩 테스트를 통해서 취업 준비생들에게 뛰어난 프로그래밍 실력을 원하는 것이 아니라, 기초 알고리즘에 기반하는 문제들이 출제된다.&lt;/li&gt;
&lt;li&gt;가장 출제 빈도가 높은 문제는 그리디, 구현(implementation), DFS/BFS를 활용한 탐색 문제이다.&lt;/li&gt;
&lt;li&gt;또한 상대적으로 높은 사고력을 요구하는 다이나믹 프로그래밍이나, 그래프 이론 문제도 출제된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다음은 카카오 기술 블로그에 언급된 코딩 테스트 문제 난이도에 대한 내용이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ACM-ICPC 같은 어려운 알고리즘 설계 능력을 겨루는 문제가 아닌, 업무에서 있을만한 상황을 가정하여 독창적이고 다양한 분야의 문제를 출제했고 난이도 또한 비교적 쉬운 수준으로 조정하였습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;다양한 케이스를 고려해야 안정적으로 만점을 받을 수 있는 문제들이 주로 출제 된다.&lt;/li&gt;
&lt;li&gt;위와 같은 경우 테스트 코드를 활용하면 안정적으로 구현을 할 수 있을 것이다.&lt;/li&gt;
&lt;li&gt;시간이 촉박하기 때문에, 평상시 프로그램을 개발하거나 학교 과제용 문제 풀이에 비하면 심리적으로 부담이 되는 편이다.&lt;/li&gt;
&lt;li&gt;따라서 연습해두지 않으면 평소의 문제 해결 기량에 비하여 좋은 성과가 나오지 않을 수 있다.&lt;/li&gt;
&lt;li&gt;알고리즘 역량을 벗어나 REST API, JSON 등의 원리를 이해하고 있어야 풀 수 있는 문제들도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=247882118&#34;&gt;이것이 취업을 위한 코딩테스트다, 나동빈, 한빛미디어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>이것이 코딩 테스트다</title>
      <link>https://dongwooklee96.github.io/post/2021/02/27/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%A4.html</link>
      <pubDate>Sat, 27 Feb 2021 12:29:39 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/02/27/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%A4.html</guid>
      <description>&lt;h1 id=&#34;내가-코딩-테스트를-준비하는-이유&#34;&gt;내가 코딩 테스트를 준비하는 이유&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;당장 구직하지 않더라도, 이러한 준비를 미리 해두어야 좋은 기회를 잡을 수 있다.&lt;/li&gt;
&lt;li&gt;대기업이나, 누구나 가고 싶은 기업에는 코딩 테스트가 존재한다.&lt;/li&gt;
&lt;li&gt;항상 서류에서 통과가 되더라도, 코딩 테스트에서 떨어지곤 했는데 이번에는 떨어지지 않고 면접까지 가는 것이 목표이다.&lt;/li&gt;
&lt;li&gt;대기업 면접을 통해서 합격하지 못하더라도 내가 미쳐 생각하지 못했던 부분과, 부족한 부분을 배울 수 있는 기회로 삼고 싶은데 코딩 테스트때문에 면접까지 갈 수가 없기 때문에 배울 기회가 없다.&lt;/li&gt;
&lt;li&gt;물론 코딩 테스트를 통해서 테스트 코드를 작성하는 법과 사고력을 키울 수 있을 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;코딩-테스트를-공부하는-팁&#34;&gt;코딩 테스트를 공부하는 팁&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;문제를 많이 풀고, 복기하는 방법이 실력향상에 많은 도움이 되었다.&lt;/li&gt;
&lt;li&gt;복기한 내용을 깃허브에 기록으로 꼭 남기자, 이 기록은 코딩 테스트 직전에 훌륭한 요약집이 된다.&lt;/li&gt;
&lt;li&gt;상대적으로 어려운 알고리즘을 만나면, 한번에 완벽하게 이해하려 하지 말고 여러 번 읽어 체화시키려고 해야한다.&lt;/li&gt;
&lt;li&gt;총 3번에 걸쳐 읽고, 각 시간을 30, 20, 10 시간으로 쪼개서 점점 더 속도를 올리는 방법을 권한다.&lt;/li&gt;
&lt;li&gt;나는 추가적으로 테스트 코드를 작성하면서 문제를 풀려고 한다, 테스트 코드를 작성하는 실력도 높히고 놓치는 부분이 없는지 확인할 수 있어 TDD를 적용하면서 코딩 테스트를 준비하면 좋을 것 같다.&lt;/li&gt;
&lt;li&gt;시간 복잡도 분석은 문제 풀이의 핵심이다.&lt;/li&gt;
&lt;li&gt;알고리즘 문제 풀이에 능숙한 숙련자들은 문제를 해석하기 전에 먼저 조건을 보기도 하는데 문제의 조건부터 확인하면 문제를 풀기 위해 얼마나 효율적인 알고리즘을 작성해야하는지 눈치챌 수 있기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;시간과-메모리-측정&#34;&gt;시간과 메모리 측정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;파이썬에서는 쉽게 프로그램 수행 시간과 메모리 사용량을 측정할 수 있다.&lt;/li&gt;
&lt;li&gt;알고리즘을 공부하는 과정에서 시간을 측정하는 작업을 굉장히 많이 사용한다.&lt;/li&gt;
&lt;li&gt;실질적으로 알고리즘의 소요 시간을 확인해야 자신이 제대로 알고리즘을 작성하고 있는지 체크할 수 있기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#75715e&#34;&gt;# 측정 시작&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 프로그램 소스 코드...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#75715e&#34;&gt;# 측정 종료&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;end_time &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start_time&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 수행 시간 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;자신이 설계한 알고리즘의 성능을 실제로 확인하기 위해서, 시간 측정 라이브러리를 사용해보는 습관을 기르는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=247882118&#34;&gt;이것이 취업을 위한 코딩테스트다, 나동빈, 한빛미디어&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
