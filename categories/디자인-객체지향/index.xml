<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>디자인 - 객체지향 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/</link>
    <description>Recent content in 디자인 - 객체지향 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sat, 13 Mar 2021 13:40:33 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/categories/%EB%94%94%EC%9E%90%EC%9D%B8-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>객체지향 5원칙 (SOLID)</title>
      <link>https://dongwooklee96.github.io/post/2021/03/13/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-5%EC%9B%90%EC%B9%99-solid/</link>
      <pubDate>Sat, 13 Mar 2021 13:40:33 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/03/13/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-5%EC%9B%90%EC%B9%99-solid/</guid>
      <description>&lt;p&gt;회사에서 객체지향 및 SOLID 원칙에 대해서 설명하는 세미나를 진행하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dongwooklee96/java-chap02-assignment&#34;&gt;사내 세미나 과제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;객체지향-5원칙-solid-원칙&#34;&gt;객체지향 5원칙 (SOLID) 원칙&lt;/h2&gt;
&lt;hr&gt;
&lt;h4 id=&#34;srp-single-responsiblity-principle---단일-책임-원칙&#34;&gt;SRP (Single Responsiblity Principle) - 단일 책임 원칙&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;하나의 클래스는 하나의 책임만 가져야 한다.&lt;/li&gt;
&lt;li&gt;어떤 변화 (요구 사항등의 변화)에 의해서 클래스를 변경해야하는 이유는 오직 하나여야 한다.&lt;/li&gt;
&lt;li&gt;나머지 4원칙의 기초가 되는 원칙으로 SRP만 잘 지키면 다른 책임의 변경으로 인한 연쇄 작용을 방지할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ocp-open-closed-principle---개방-폐쇄-원칙&#34;&gt;OCP (Open-Closed Principle) - 개방, 폐쇄 원칙&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;SW의 구성 요소 (모듈, 컴포넌트, 클래스, 메서드)는 확장에는 열려있고 변경에는 닫쳐있어야 한다.
&lt;ul&gt;
&lt;li&gt;변경을 위한 비용은 가능한 줄이고, 확장을 위한 비용은 극대화 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OCP를 가능하게 하는 중요 매커니즘은 추상화와 다형성이다.&lt;/li&gt;
&lt;li&gt;새로운 기능이 추가되는 경우, 기존에 제공하던 클래스 (또는 메서드)를 수정하는 것이 아니라 새로운 클래스 (또는 메서드)를 추가해서 기능을 확장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lsp-the-liskov-subsitution-principle---리스코프-치환-원칙&#34;&gt;LSP (The Liskov Subsitution Principle) - 리스코프 치환 원칙&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;서브 클래스는 언제나 슈퍼 클래스를 대체할 수 있어야 한다.
&lt;ul&gt;
&lt;li&gt;슈퍼 클래스가 들어갈 자리에 서브 클래스를 넣어도, 원래대로 잘 작동해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;상속의 오용을 방지하게 하는 원칙&lt;/li&gt;
&lt;li&gt;슈퍼 클래스와 서브 클래스의 동작이 일관성 있게 동작해야함.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;isp-interface-segregation-principle---인터페이스-분리-원칙&#34;&gt;ISP (Interface Segregation Principle) - 인터페이스 분리 원칙&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;한 클래스는 자신이 사용하지 않는 인터페이스의 메서드에 의존하지 않아야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 일반적인 인터페이스 보다는, 여러 개의 구체적인 인터페이스가 낫다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SRP가 클래스의 단일 책임을 강조한다면, ISP는 인터페이스의 단일 책임을 강조함.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UserService&lt;/code&gt;, &lt;code&gt;BoardService&lt;/code&gt; (X)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UserCreateService&lt;/code&gt;, &lt;code&gt;BoardCreateService&lt;/code&gt; (O)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dip-dependency-inversion-principle---의존성-역전의-원칙&#34;&gt;DIP (Dependency Inversion Principle) - 의존성 역전의 원칙&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;변화하기 쉬운 것, 자주 변화하는 것 보다 변화하기 어려운 것, 거의 변화가 없는 것에 의존하라.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;고차원 모듈은 주로 변화하지 않음, 저 차원 모듈에 주로 자주 변화함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구체적인 구현 클래스 보다 추상화된 인터페이스에 의존하라, 구체적이며 변동성이 크다면 절대로 이름을 언급하지 마라.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>
