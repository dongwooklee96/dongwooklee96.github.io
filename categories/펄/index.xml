<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>펄 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/categories/%ED%8E%84.html</link>
    <description>Recent content in 펄 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Tue, 30 Nov 2021 19:20:40 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/categories/%ED%8E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LEARING PERL - 3 (문자열)</title>
      <link>https://dongwooklee96.github.io/post/2021/11/30/learing-perl-3-%EB%AC%B8%EC%9E%90%EC%97%B4.html</link>
      <pubDate>Tue, 30 Nov 2021 19:20:40 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/30/learing-perl-3-%EB%AC%B8%EC%9E%90%EC%97%B4.html</guid>
      <description>&lt;h3 id=&#34;홑따옴표-문자열&#34;&gt;홑따옴표 문자열&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;홑따옴표 문자열은 다음과 같이 표시할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&#39;fred&#39; # four characters: f, r, e, d
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;그리고 특수 홑따음표나 백슬레시를 표현하고 싶다면 앞에 &amp;lsquo;&#39; 백슬레시를 붙여주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&#39;Don\&#39;t let an apostrophe end this string prematurely!&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;주의할 점은 백슬레시는 오직 &lt;code&gt;&#39;&lt;/code&gt; 홑따옴표를 나타내거나, 백슬레시를 나타낼 때만 사용할 수 있다는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&#39;hello\nthere&#39; # hellonthere
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;쌍따옴표-문자열&#34;&gt;쌍따옴표 문자열&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;쌍따옴표는 기본적으롤 홑따옴표 문자열과 큰 차이는 없지만, 백슬레시를 이용하여 활용할 수 있는 표현이 훨씬 더 많다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;barney&amp;quot; # &#39;barney&#39;와 같다.
&amp;quot;hello world\n&amp;quot; # &#39;hello world&#39; 다음에 개행이 추가된다.
&amp;quot;the last character of this string is a quote mark: \&amp;quot;&amp;quot;
&amp;quot;coke\tsprite&amp;quot; # coke, 다음에 탭문자 그리고 sprite
&amp;quot;\x{2668}&amp;quot; # 유니코드로 &#39;♨&#39; 문자가 표현된다.
&amp;quot;\N{SNOWMAN}&amp;quot; # 유니코드로 &#39;☃&#39; 문자가 표현된다.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;그리고 쌍따옴표 문자열은 변수의 값을 표현할 수 있는 장치가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;문자열-연산자&#34;&gt;문자열 연산자&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;펄에는 스트링을 반복해서 더할 수 있는 문법이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;fref&amp;quot; x 3 # &amp;quot;fredfredfred&amp;quot; 로 나타내진다.
&amp;quot;barney&amp;quot; x (4 + 1) # &amp;quot;barneybarneybarneybarneybarney&amp;quot; 로 나타내진다.
5 x 4.8 # 5555 로 나타내진다.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;마지막 예제는 조금은 특이한데, &lt;code&gt;x&lt;/code&gt; 연산자는 왼쪽에 오는 값을 문자열로 치환해서 생각을 한다. 따라서 &amp;ldquo;5&amp;quot;가 되고 그것을 오른쪽에 있는 4와 곱해서 &amp;ldquo;5555&amp;quot;가 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;뒤의 숫자 4.8은 내림처리되어서 4로 표현된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 반복할 숫자가 0이라면 빈 문자열을 나타낸다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;펄은-자동으로-숫자와-문자-타입을-변경한다&#34;&gt;펄은 자동으로 숫자와 문자 타입을 변경한다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;펄은 연산자에 따라서, 앞에 오는 타입을 변환시키는데 앞에 오는 타입이 문자열을 요구하면 문자열로 생각하고 숫자를 요구하면 숫자로 판단하게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 숫자 타입을 원하는 연산자에 문자열을 적게 되면 자동으로 숫자로 타입으로 변경된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 &amp;ldquo;12&amp;rdquo; * &amp;ldquo;3&amp;rdquo; 같은 숫자 타입을 원하는 연산자에 문자열을 적게 된다면 문자열은 자동으로 숫자로 변환되고 36이라는 결과가 반환된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 문자열로 변환될 수 없는 숫자와 문자가 섞여 있는 타입이라면 문자열에서 앞쪽의 숫자만 뽑아서 계산을 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 절대로 숫자로 변환할 수 없다면 숫자 0으로 변경되어서 계산된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;12abcde34&amp;quot; * &amp;quot; 3&amp;quot; # 36 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;경고-표시&#34;&gt;경고 표시&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;펄 스크립트를 작성할 때, 아래 코드를 적으면 프로그램에서 어떻게 동작할지 잘 모르겠는 부분을 워닝으로 표시해줄 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
use warnings;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또는&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl -w
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;그 경고는 모듈을 추가하였을 때 내가 작성하지 않은 부분에 대해서도 경로를 표시해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ perl -w my_program
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;그리고 &lt;code&gt;use diagnostics;&lt;/code&gt; pragma를 사용하면 더 상세한 내용을 알 수 있다. 이것은 프로그램을 최적화하는데 많은 도움이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Learning-Perl-Randal-L-Schwartz/dp/1449303587&#34;&gt;Learning Perl, 7th Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LEARING PERL - 2 (데이터 타입)</title>
      <link>https://dongwooklee96.github.io/post/2021/11/26/learing-perl-2-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85.html</link>
      <pubDate>Fri, 26 Nov 2021 19:20:40 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/26/learing-perl-2-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85.html</guid>
      <description>&lt;h3 id=&#34;자료형&#34;&gt;자료형&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;펄의 데이터 타입은 상당히 간단하다, 스칼라 타입으로 불리는 데이터는 단지 하나의 값을 나타낸다고 생각을 하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예를 들어서 숫자와 문자열 같은 데이터들이 바로 스칼라 타입이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다른 프로그래밍 언어에서는 숫자와 문자열 타입은 엄연히 다른 타입으로 취급하는 경우가 많은데 펄에서는 비슷하게 처리된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이는 처음에는 이상하게 느껴질 수도 있지만, 데이터를 다루기에는 더 편할 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;스칼라-값과-스칼라-변수&#34;&gt;스칼라 값과 스칼라 변수&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;숫자와 문자열 같은 스칼라 값이 있고 이 값을 저장할 수 있는 스칼라 변수가 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;당연하게도 스칼라 값은 변경할 수 없지만, 변수에 어떤 스칼라가 들어갈지는 변경할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;펄은 숫자를 처리할 때 모든 숫자를 내부적으로 실수로 처리한다. 이는 정확도와 숫자 크기에 제한이 있다는 뜻이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 파이썬과 같이 지수 연산을 다음과 같이 할 수 있다. 어쩌면 파이썬이 펄을 보고 참고한 것일 수도 있을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;2**3 # 8
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;펄에서 가장 짧은 문자열의 길이는 아무것도 없는 것이고, 가장 긴 문자열의 길이는 메모리가 허락하는 한 제한이 없다. 이는 펄이 추구하는 원칙중에 &amp;ldquo;제약 없음&amp;quot;에 기인한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;펄 문자열에는 어떠한 값이라도 들어갈 수 있는데, 예를들어, 그래픽 이미지 값을 변경할 수도 있고, 컴파일된 프로그램을 문자열로 읽어들일 수도 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 펄은 유니코드 문자에 대해서, 완벽한 지원을 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 펄 컴파일러가 자동적으로 유니코드로 해석하지는 않고, 아래 &lt;code&gt;pragma&lt;/code&gt;를 입력해야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;use utf8;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pragma&lt;/code&gt;는 펄 컴파일러가 어떻게 동작해야하는지 알려주는 역할을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Learning-Perl-Randal-L-Schwartz/dp/1449303587&#34;&gt;Learning Perl, 7th Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LEARING PERL을 읽고 느낀점 1</title>
      <link>https://dongwooklee96.github.io/post/2021/11/26/learing-perl%EC%9D%84-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90-1.html</link>
      <pubDate>Fri, 26 Nov 2021 18:20:40 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/11/26/learing-perl%EC%9D%84-%EC%9D%BD%EA%B3%A0-%EB%8A%90%EB%82%80%EC%A0%90-1.html</guid>
      <description>&lt;h3 id=&#34;펄을-공부하게-된-이유&#34;&gt;펄을 공부하게 된 이유&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테스트 코드를 확인하거나, 작성해야할 일이 있는데, 그 코드가 펄로 작성되어 있었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 펄을 어느정도는 배워야지 이해할 수 있을 것 같았다. 따라서 책을 보면서 공부를 하려고 하였는데, 펄이라는 언어 자체가 번역서가 많이 존재하지 않았다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 어쩔 수 없이 영어 원서 그대로 읽고 있다. 다행히 알아듣기 힘든 영어를 사용하지는 않아서 아직까지는 이해하는데 큰 지장은 없는 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;펄을-공부하면서-느끼게-된-점&#34;&gt;펄을 공부하면서 느끼게 된 점&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;펄은 파이썬과 같은 스크립트 언어이지만, 개발자들이 생각하는 철학이 다른 것 같았다. 파이썬 같은 경우에는 유용하다고 생각이 되면 객체에 기능을 많이 추가하여서, 사용할 수 있는 기능이 매우 많다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 반대로 펄은 객체에게 최소한의 기능을 제공하고 가능하면 추가하지 않으려고 한다. 그리고 해당 기능이 어느정도 최적화가 될 때까지 릴리즈를 하지 않고 미룬다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 펄을 이용하여 주로 문자열 처리를 하는 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;펄은 특이하게도 스크립트 언어이지만, 실행하기전에 펄의 내부적인 컴파일러가 모든 코드를 실행한다. 따라서 문법 에러가 있더라도, 바로 잡아준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 방대한 양의 펄 코드로, 아주 작은 양의 코드만 실행한다면 이것은 비효율적일 수 있다. 왜냐하면, 펄은 처음에 컴파일러가 전체 코드를 실행시켜서 최적화를 하기 때문이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;간단한-perl-문법&#34;&gt;간단한 PERL 문법&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
@lines = `perdoc -u -f atan2`;
foreach (@lines) {
    s/\w&amp;lt;([^&amp;gt;]+)/\U$1/g;
    print;
}

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;먼저 백틱(`) 문자로 감싸진 부분은 터미널에서 명령어를 입력하는 것과 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 두 번째 줄에 있는 코드는 터미널 창에서 아래와 같이 코드를 입력한 것과 같은 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ perdoc -u -f atan2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그리고 해당 명령어의 결과는 배열에 저장된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 밑에서 반복문에 의해서 배열의 결과가 처리되게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그리고 마지막 줄에서 출력이 이루어지게 된다. 다음의 과정을 요약하자면 하나의 명령어를 실행해서 출력된 결과를 가공하여 다시 출력하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Learning-Perl-Randal-L-Schwartz/dp/1449303587&#34;&gt;Learning Perl, 7th Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
