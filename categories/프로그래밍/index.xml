<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>프로그래밍 on 개발자 이동욱</title>
    <link>https://dongwooklee96.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D.html</link>
    <description>Recent content in 프로그래밍 on 개발자 이동욱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Fri, 22 Oct 2021 01:09:24 +0900</lastBuildDate><atom:link href="https://dongwooklee96.github.io/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>POSTGRES 메인터이너를 인터뷰한 사이트</title>
      <link>https://dongwooklee96.github.io/post/2021/10/22/postgres-%EB%A9%94%EC%9D%B8%ED%84%B0%EC%9D%B4%EB%84%88%EB%A5%BC-%EC%9D%B8%ED%84%B0%EB%B7%B0%ED%95%9C-%EC%82%AC%EC%9D%B4%ED%8A%B8.html</link>
      <pubDate>Fri, 22 Oct 2021 01:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/10/22/postgres-%EB%A9%94%EC%9D%B8%ED%84%B0%EC%9D%B4%EB%84%88%EB%A5%BC-%EC%9D%B8%ED%84%B0%EB%B7%B0%ED%95%9C-%EC%82%AC%EC%9D%B4%ED%8A%B8.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/whmfd8rdcmli04e/Screen%20Shot%202021-10-22%20at%209.00.20%20AM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;매우 재미있는 사이트를 발견하였다. 그것은 POSTGRES 메인테이너를 인터뷰한 내용이 있는 웹사이트였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;평소 메일링 리스트나, 커밋을 보았을 때 자주 보이는 사람들이 있었고, 그 사람들이 어떤 생각을 하는지 알 수 있어서 궁금한 점들이 해결되었다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://postgresql.life/&#34;&gt;POSTGRES PERSON OF WEEK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>프로그래밍을 학습하는 좋은 접근 방법</title>
      <link>https://dongwooklee96.github.io/post/2021/07/20/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%84-%ED%95%99%EC%8A%B5%ED%95%98%EB%8A%94-%EC%A2%8B%EC%9D%80-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95.html</link>
      <pubDate>Tue, 20 Jul 2021 01:09:24 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/07/20/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%84-%ED%95%99%EC%8A%B5%ED%95%98%EB%8A%94-%EC%A2%8B%EC%9D%80-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EB%B2%95.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=91501933&#34;&gt;자바 웹 프로그래밍 Next Step&lt;/a&gt; 이라는 책을 읽다가 &lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=31679090&#34;&gt;코딩을 지탱하는 기술&lt;/a&gt;이라는 책에서 좋은 글귀를 발견했다고 인용하였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;책의 목차를 살펴보니, 읽어보는 것도 나쁘지 않겠다. 이 책에서 말하는 프로그래밍 학습 방법은 다음과 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;첫번째 단계, 필요한 부분부터 흡수한다&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;책이나 자료 전체가 동일한 정도로 중요하다고 말할 수 없다. 목적이 명확하고, 목적 달성을 위해서
어디를 읽어야 할지 알고 있다면 다른 페이지는 신경쓰지 말고 바로 그곳을 읽도록 한다.
전체 모두 읽지 않은 것이 깨름칙한가? 하지만 좌절하고 전혀 읽지 않은 것보다는 낫다.
&#39;전부 읽지 않으면&#39;이라는 완벽주의가 배우고자 하는 동기를 짓누르고 있다면, 버려 버리는 것이 낫다.
동기는 매우 중요하다. 이 전략을 사용하기 위해서는 읽고 싶은 부분이 어디인지 대략적으로 전체적인
구조를 파악하고 있어야 한다. 만약 그게 어려우면 다음 전략인 
&#39;대략적인 부분을 잡아서 조금씩 상세화한다.&#39;를 시험해보도록 하자.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;두 번째 단계, 대략적인 부분을 잡아서 조금씩 상세화 한다&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;책이나 문서에는 목차가 있다. 목차를 보면 전체 구조를 대략적으로 알 수 있다.
그리고나서 본문을 속독으로 읽어나간다.
자세히 보지 않고 우선은 소제목이나 강조 부분, 그림과 그림 제목 등을 본다.
소스 코드를 읽을 때는 우선 디렉토리 구조와 파일 명을 본다. 그리고 파일을 속독으로 읽고
거기서 정의하고 있는 함수나 클래스 이름, 자주 호출되는 함수명 등을 본다. 이 방법들에는
&#39;우선 대략적인 구조를 잡고, 조금씩 상세한 정보로 접근한다&#39;는 공통점이 있다. 이것이 기본 원칙이다.
소스코드에는 다른 방식의 독해 방법이 있다. 디버거의 과정을 사용해서, 실행되는 순서나 호출 계층으로
읽는 방법이다. 이 경우도 동일하게 우선은 대략적인 처리 흐름을 따라가고, 조금씩 깊이를 더해서 함수 
안의 처리를 따라가는 것이 중요하다. 이 방법으로 읽이도 정보가 한쪽 귀로 들어와서 한쪽 귀로 나가버리는 
느낌을 받는 경우가 있다면, 마지막 방법인 &#39;끝에서부터 차례대로 배껴간다&#39;를 시도해보자.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;세 번째 단계, 끝에서부터 차례대로 배껴간다&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;명확히 &#39;하고 싶은 것&#39;, &#39;조사하고 싶은 것이 없이 &#39;대충 읽으면&#39; 읽은 내용이 뇌를 그냥 스쳐 지나갈 뿐이다.
이런 상태에서 어떻게 배울까를 고민한다고 해도, 판단을 위한 지식 자체가 없기 때문에 무의미하다.
그래서 지식의 밑바탕을 만들기 위해서 교과서를 그대로 배껴 쓴다. 이것이 &#39;베끼기&#39;라 불리는 기술이다.
지식이 없는 상태에서 고민하는 것은 무익하기 때문에 우선 아무것도 생각하지 않고 지식을 복사하는 것이다.
이 이상의 방법은 없다. 저자는 시간을 정해서 &#39;25분간 어디까지 베낄 수 있는지&#39; 도전하는 것을 좋아한다.
분량으로 나눈 것도 좋은 방법이다. 중요한 것은 간격을 적절히 해서 목표를 이루었다는 만족감을 얻을 수 있도록
하는 것이다.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=91501933&#34;&gt;자바 웹 프로그래밍 Next Step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=31679090&#34;&gt;코딩을 지탱하는 기술&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C 포인터 이해와 활용 (2)</title>
      <link>https://dongwooklee96.github.io/post/2021/06/26/c-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9-2.html</link>
      <pubDate>Sat, 26 Jun 2021 23:27:23 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/06/26/c-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9-2.html</guid>
      <description>&lt;h2 id=&#34;chap-02-동적-메모리-관리&#34;&gt;CHAP 02. 동적 메모리 관리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터에서 강력한 기능의 대부분은 동적으로 할당된 메모리를 추적할 수 있는 포인터의 능력에서 기인한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C 프로그램은 런타임 시스템안에서 실행된다. 런타임 시스템은 일반적으로 운영체제에서 제공되는 환경이며, 많은 프로그램 기능들과 함께, 스택과 힙을 지원한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;동적-메모리-할당&#34;&gt;동적 메모리 할당&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;malloc&lt;/code&gt; 류의 함수로 메모리를 할당한다.&lt;/li&gt;
&lt;li&gt;애플리케이션에서 할당된 메모리를 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;free&lt;/code&gt; 함수를 이용해 할당된 메모리를 해제한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 단계는 매우 일반적인 동적 메모리 할당 순서이다. 다음 예제에선 &lt;code&gt;malloc&lt;/code&gt; 함수를 사용하여 정수를 저장할 메모리를 할당한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int *pi = (int*)malloc(sizeof(int));
*pi = 5;
printf(&amp;quot;*pi: %d\n&amp;quot;, *pi);
free(pi);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;malloc&lt;/code&gt; 함수의 유일한 인자에는 할당할 바이트 수를 저장한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리 할당에 성공하면 이 함수는 힙으로부터 할당된 메모리에 대한 포인터를 반환하고, 실패하면 널 포인터를 반환한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;할당할 바이트 수를 지정할 때, &lt;code&gt;sizeof&lt;/code&gt; 연산자를 사용하면 애플리케이션의 이식성을 높일 수 있고, 시스템에 할당할 정확한 바이트 수를 결정할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리가 해제 되는 즉시 해당 메모리에 다시 접근해서는 안된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;해제된 메모리에 대한 접근은 뜻하지 않게 발생하는데 일반적으로 해제된 포인터에는 항상 &lt;code&gt;NULL&lt;/code&gt;을 할당하는 것이 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리가 할당되면 추가적인 정보가 힙 관리자에 의해 관리되는 데이터 구조의 일부로 저장된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;메모리-누수&#34;&gt;메모리 누수&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메모리 누수는 할당된 메모리가 더는 사용되지 않지만, 해제되지 않을 때 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리의 주소를 잃어버리는 경우와 &lt;code&gt;free&lt;/code&gt; 함수가 호출되어야 하는 상황에 호출되지 않을 경우 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리 누수의 문제점은 해당 메모리가 반환되지 않고, 다시 사용될 수 없다는 것이다. 그 결과로 힙 관리자가 사용할 수 있는 메모리의 양이 감소하게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;char *chunk;

while (1) {
  chunk = (char*)malloc(10000000);
  printf(&amp;quot;Allocating\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;만약 메모리를 반복적으로 사용하고 누수가 발생하면, 추가적인 메모리가 필요할 때, &lt;code&gt;malloc&lt;/code&gt; 함수가 OOM(Out of Memory) 오류로 인해서 추가 메모리를 할당할 수 없어 프로그램이 종료된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;메모리-주소-손실&#34;&gt;메모리 주소 손실&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;int *pi = (int*) malloc(sizeof(int));

*pi = 5;

pi = (int*) malloc(sizeof(int));
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pi&lt;/code&gt; 포인터는 해제되지 않고 새로운 메모리 주소로 재할당 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;char *name = (char*) malloc(strlen(&amp;quot;Susan&amp;quot;) + 1);
strcpy(name, &amp;quot;Susan&amp;quot;);

while (*name != 0) {
  printf(&amp;quot;c&amp;quot;, *name);
  name++;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위의 예제는 &lt;code&gt;name&lt;/code&gt; 변수의 루프를 하나씩 증가시키고 마지막에 NULL을 가리키고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;할당된 메모리의 시작 주소를 잃어버린 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;함수&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;malloc&lt;/td&gt;
&lt;td&gt;힙에서 메모리 할당&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;realloc&lt;/td&gt;
&lt;td&gt;기존 할당된 메모리의 크기 변경&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;calloc&lt;/td&gt;
&lt;td&gt;힙에서 메모리 할당 그리고 0으로 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;free&lt;/td&gt;
&lt;td&gt;할당된 메모리를 힙으로 반환&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;정적-포인터-및-전역-포인터에-malloc-사용하기&#34;&gt;정적 포인터 및 전역 포인터에 &lt;code&gt;malloc&lt;/code&gt; 사용하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;정적 변수나 전역 변수는 선언시 초기화를 위해 함수 호출을 사용할 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래 코드는 정적 변수를 선언하고, &lt;code&gt;malloc&lt;/code&gt; 함수를 사용하여 초기화를 시도 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;static int *pi = (int*)malloc(sizeof(int));
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;따라서 위의 코드는 컴파일 시에 오류가 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;static int *pi;
pi = malloc(sizeof(int));
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;따라서 선언과 초기화를 분리함으로써, 오류를 피할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일러 관점에서 초기화 연산자 (=)의 사용과 할당 연산자의 사용은 차이가 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;힙-메모리와-시스템-메모리&#34;&gt;힙 메모리와 시스템 메모리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;힙은 일반적으로 운영체제의 기능을 이용해 메모리를 관리한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;힙의 크기는 프로그램이 실행될 때 고정된 크기로 정해지거나, 실행 도중에 크기를 늘리도록 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만, &lt;code&gt;free&lt;/code&gt; 함수가 호출되었다고 해도, 힙 관리자가 반드시 해제된 메모리를 운영체제로 반환하는 것은 아니고, 애플리케이션에서 해당 메모리를 다시 사용할 수 있게 할 뿐이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그래서 프로그램이 메모리를 할당한 후에, 다시 해제한다고 해도 일반적으로 운영체제 측면에서는 해제된 메모리가 애플리케이션의 메모리 사용량에 반영되지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;댕글링-포인터-다루기&#34;&gt;댕글링 포인터 다루기&lt;/h3&gt;
&lt;p&gt;포인터가 원인인 문제들의 디버깅은 때로 해결하기 어려울 때가 있다. 댕글링 포인터 문제를 처리하기 위한 몇 가지 접근 방법이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;메모리 해제 후 포인터를 NULL로 설정하라. NULL로 설정한 포인터를 그 이후에 사용하면, 애플리케이션이 종료될 것이다. 그러나 해당 포인터에 대한 다수의 복사본이 존재할 경우에는 문제는 여전히 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;free&lt;/code&gt; 함수를 대체할 새로운 함수를 작성하라.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;몇몇 런타임 시스템이나 디버깅 시스템은 해제된 메모리를 특별한 값으로 덮어쓴다. 예외가 발생하지 않은 상황이라도, 프로그래머는 예상치 못한 곳에 이러한 값이 포함된 것을 보고 프로그램이 해제된 메모리에 접근한 것을 알 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;댕글링 포인터와 다른 문제들을 발견하기 위한 서드 파티 도구들을 활용하라.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;동적-메모리-할당-기술&#34;&gt;동적 메모리 할당 기술&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;힙 관리자의 메모리 할당과 해제의 구현은 컴파일러마다 다를 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대부분의 힙 관리자들은 메모리를 할당하기 위해서, 힙 또는 데이터 세그먼트를 사용하며, 이 방식은 메모리 단편화나 프로그램 스택과 충돌이 일어나기도 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=33784887&#34;&gt;C 포인터의 이해와 활용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C 포인터 이해와 활용 (1)</title>
      <link>https://dongwooklee96.github.io/post/2021/06/26/c-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9-1.html</link>
      <pubDate>Sat, 26 Jun 2021 13:27:23 +0900</pubDate>
      
      <guid>https://dongwooklee96.github.io/post/2021/06/26/c-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9-1.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/123501837-a78c1480-d682-11eb-892e-eb7378e1ef67.jpg&#34; alt=&#34;8994506799_1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;포인터에 대해서 복습하고 모르던 내용을 다시 되집어 보기 위해서 다음 책을 읽고 정리한 내용이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;시작하기&#34;&gt;시작하기&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터를 얼마나 확실하게 이해하고 효율적으로 사용하는 가로 초보와 전문 C 프로그래머를 구분할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사실 포인터의 기본적인 개념은 매우 간닪다. 포인터는 메모리 위치의 주소를 저장하는 변수일 뿐이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;포인터와-메모리&#34;&gt;포인터와 메모리&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;컴파일된 C 프로그램은 다음 세가지 종류의 메모리를 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정적(Static) / 전역(Global)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;정적으로 선언된 변수들은 정적/전역 메모리에 할당된다. 또한 전역 변수들 또한 같은 메모리 공간에 할당된다.
정적/전역 변수들은 프로그램이 시작될 때 할다오디며, 프로그램이 종료될 때까지 메모리 공간에 남아 있다. 모든 함수에서 접근할 수 있는 전역 변수와는 달리 &lt;strong&gt;정적 변수의 접근 범위는 해당 변수를 선언한 함수로 제한된다&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자동 (Automatic) / 로컬 (Local)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자동 변수는 함수 안에서 선언되고 함수가 호출될 때 생성된다. 자동 변수의 접근 범위는 선언된 함수로 제한되며, 함수가 호출되는 동안에만 존재한다. 일반적으로 블록문 안에서 선언된 변수의 범위는 해당 블록으로 제한한다. 이들은 종종 자동 변수라고 언급된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동적 (Dynamic)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;동적 (Dynamic) 메모리는 힙(Heap) 메모리 영역에 할당되고 필요한 경우에 해제된다. 포인터를 사용하여 할당된 메모리 영역을 참조하며, 포인터에 의해 접근이 제한 된다. 메모리를 해제하지 않는 한 메모리레 존재한다.&lt;/p&gt;
&lt;h4 id=&#34;포인터를-잘-알아야하는-이유&#34;&gt;포인터를 잘 알아야하는 이유&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;빠르고 효율적인 코드 작성&lt;/li&gt;
&lt;li&gt;다양한 문제에 대한 효과적인 해결 방법 제공&lt;/li&gt;
&lt;li&gt;동적 메모리 할당 지원&lt;/li&gt;
&lt;li&gt;작고 간결한 표현의 사용&lt;/li&gt;
&lt;li&gt;큰 오버헤드 없이 데이터 구조를 포인터로 전달&lt;/li&gt;
&lt;li&gt;함수의 매개 변수로 전달된 데이터 보호&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;포인터를 잘 사용하면 강력한 도구이지만, 포인터를 이용할 때는 다음과 같은 다양한 문제가 발생할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배열이나 데이터 구조의 경계를 넘는 접근&lt;/li&gt;
&lt;li&gt;소멸한 자동/로컬 변수의 참조&lt;/li&gt;
&lt;li&gt;할당 해제된 힙 메모리의 참조&lt;/li&gt;
&lt;li&gt;아직 할당되지 않은 포인터에 대한 역참조&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;포인터-선언하기&#34;&gt;포인터 선언하기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;포인터 변수는 데이터 타입과 별표 그리고 변수 이름을 순서대로 나열하여 선언한다. 아래 예제 에서는 정수 변수와 정수 포인터 변수를 선언하고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;int num;
int *pi;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;주소-연산자&#34;&gt;주소 연산자&lt;/h4&gt;
&lt;p&gt;주소 연산자(&amp;amp;)는 변수의 주소를 반환하다. 아래와 같이 주소 연산자를 사용하여 &lt;code&gt;pi&lt;/code&gt; 포인터를 &lt;code&gt;num&lt;/code&gt; 변수의 주소로 초기화 할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;num = 0
pi = &amp;amp;num;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;가상-메모리와-포인터&#34;&gt;가상 메모리와 포인터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;주소 출력을 좀 더 복잡하게 하기 위해서 가상 운영체제에서 표시되는 포인터의 주소가 실제 물리 메모리 주소가 될 가능성은 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가상 운영체제는 프로그램이 머신의 물리 주소 공간을 나눠 사용할 수 있게 하며, 프로그램은 페이지/프레임 단위로 물리 주소 공간을 나눠 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;애플리케이션의 페이지는 잠재적으로 연속적이지 않은 메모리 공간에 할당되거나 동시에 메모리상에 존재 하지 않을 수 도 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;운영체제는 페이지에 의해 메모리를 유지할 필요가 있을 때 보조 기억장치에 기록하고 필요한 시점에 다시 읽어들이며 이전과는 다른 메모리 공간에 할당된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;운영체제에서 실행되는 각각의 프로그램들은 머신의 전체 물리 메모리 공간에 접근할 수 있다고 가정되지만, 실제로는 그렇지 않다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;각각의 프로그램에서 사용하는 주소는 실제 물리 메모리 주소와는 다른 가상 주소이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;운영체제는 필요한 시점에 이 가상 주소를 실제 물리 메모리 주소로 변환한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;즉 페이지에 있는 코드와 데이터는 프로그램이 실행될 때 메모리의 서로 다른 물리 위치에 존재할 수 있다. 애플리케이션의 가상 주소는 실행중에 변경되지 않으며, 포인턴의 내용을 출력할 때 우리가 보게 되는 주소이다 또한 가상 주소는 실제 주소로 운영체제에 의해서 투명하게 변환된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;간접지정-연산자로-포인터-역참조하기&#34;&gt;간접지정 연산자로 포인터 역참조하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;간접 지정 연산자 (&lt;code&gt;*&lt;/code&gt;)는 포인터 변수가 가리키는 위치의 값을반환하며 참조 연산자로 포인터 값의 역참조를 하는 역할을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;int num = 5;
int *pi = &amp;amp;num;


printf(&amp;quot;%d\n&amp;quot;, *pi); // 5
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그리고 또한 좌변값(left-value)에 의해서 참조 연산자의 결과를 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;좌변값은 할당 연산자의 좌측에 위치한 피연산자를 말한다. 모든 좌변값은 값이 할당될 수 있도록 변경 가능한 값이어야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;*pi = 200;
printf(&amp;quot;%d\n&amp;quot;, num);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;함수-포인터&#34;&gt;함수 포인터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;포인터는 함수를 가리키도록 선언할 수 있으며 함수 포인터 선언은 일반적인 포인터 표기법에 비해서 다소 복잡하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;void (*foo)();
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;null의-개념&#34;&gt;NULL의 개념&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;널은 흥미로운 주제이다. 하지만 종종 널이 가진 다양한 개념들이 잘못 이해되거나 혼란을 일으킨다. 널은 다음과 같은 개념들을 포함한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;- 널 개념
- 널 포인터 상수
- NULL 매크로
- NUL 아스키 문자
- 널 문자열
- 널 문장
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터에서 NULL이 할당되면 해당 포인터는 아무것도 가리키지 않음을 의미한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;널 개념은 포인터가 다른 포인터와 다른 포인터와 특별한 값을 가질 수 있다는 것을 의미한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;널이 할당된 포인터는 메모리의 어떤 영역도 가리키지 않으며 두 개의 널 포인터는 항상 서로 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일반적이지는 않지만, 문자 포인터나 정수 포인터와 같이 포인터 타입을 위한 널 포인터 타입이 있는 경우도 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실제 널의 개념은 널 포인터 상수에 의해 지원되는 추상적인 개념이다. 널 포인터 상수는 0이거나 0이 아닐 수 있으며, C 개발자는 널 상수의 실제 내부적인 표현에 대해서 신경쓰지 않아도 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NULL 매크로는 상수 정수 0을 &lt;code&gt;void&lt;/code&gt; 포인터로 캐스팅 한 것이다. 많은 라이브러리에서 다음과 같이 정의한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;#define NULL ((void*) 0)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NULL 포인터는 연결 리스트에서 종종 리스트의 끝을 표시하기 위해 사용되는 것 처럼, 많은 데이터 구조의 표현에서 매우 유용하게 사용된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;포인터 변수 &lt;code&gt;pi&lt;/code&gt;에 널 값을 할당하기 위해서는 다음과 같이 NULL 타입을 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;pi = NULL;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;널 포인터와 초기화되지 않은 포인터는 명백히 다르다. NULL을 포함한 포인터가 메모리상의 어떤 위치도 참조하지 않지만, 초기화되지 않은 포인터는 어떤 값이라도 포함될 수 있으며 참조될 수 있다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;포인터는 논리식에서 단독으로 피연산자로 사용될 수 있다. 예를 들어서, 아래 코드처럼 포인터가 NULL로 설정되었는지 테스트 할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (pi) {
  // 널이 아닌 경우
} else {
  // 널인 경우
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;널 포인터가 포함한 주소는 유효한 주소가 아니므로 절대로 역참조 해서는 안되며, 널 포인터에 대한 역참조는 프로그램에 대한 비정상 종료를 초래한다.&lt;/p&gt;
&lt;h3 id=&#34;void-포인터&#34;&gt;void 포인터&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt; 포인터는 어떤 타입의 데이터도 참조할 수 있는 범용 포인터이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void *pv;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;void&lt;/code&gt; 포인터 선어에는 두 가지 흥미로운 것이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt; 포인터는 &lt;code&gt;char&lt;/code&gt; 포인터와 같은 표현과 메모리 정렬 방법을 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt; 포인터는 다른 포인터와 절대 같지 않다. 하지만 NULL 값이 할당된 두 개의 &lt;code&gt;void&lt;/code&gt; 포인터는 서로 같다. &lt;code&gt;void&lt;/code&gt; 포인터의 실제 동작은 시스템에 따라서 서로 다르다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;int num;
int *pi = &amp;amp;num;
printf(&amp;quot;Value of pi: %p\n&amp;quot;, pi); // Value of pi: 0x7ffee6dfd9cc
void* pv = pi;
pi = (int*) pv;
printf(&amp;quot;Value of pi: %p\n&amp;quot;, pi); // Value of pi: 0x7ffee6dfd9cc
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;void 포인터 사용시 주의가 필요하다.
임의의 포인터를 void 포인터로 캐싱팅 한 후에, 기존 타입이 아닌 전혀 다른 타입의 포인터로 캐스팅하더라도 이를 막을 방법이 없다.
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;size_t size = sizeof(void*); // valid
size_t size = sizeof(void); // invalid
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;전역-포인터와-정적-포인터&#34;&gt;전역 포인터와 정적 포인터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;포인터가 전역 또는 정적으로 선언되면, 해당 포인터는 프로그램 시작 시에 &lt;code&gt;NULL&lt;/code&gt;로 초기화 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;int *globalpi;

void foo() {
  static int *staticpi;
}

int main() {
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;포인터의-크기와-데이터-타입&#34;&gt;포인터의 크기와 데이터 타입&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터의 크기는 애플리케이션의 호환성과 다른 환경으로의 이식 가능성을 고민할 때 문제가 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;포인터의 크기는 사용하는 장비와 컴파일러에 따라서 다르다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;메모리-모델&#34;&gt;메모리 모델&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;64&lt;/code&gt;비트 컴퓨터의 도입으로 C 기본 데이터 타입의 메모리 크기 차이가 더 확실해졌다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴퓨터와 컴파일러들은 C 기본 데이터 타입의 메모리 할당을 위해서 저마다 다른 옵션의 메모리 모델을 가지고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;I In L Ln LL LLn P Pn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14002238/123513904-c3b3a400-d6ca-11eb-8d44-66838289b5f0.png&#34; alt=&#34;Screen Shot 2021-06-26 at 10 06 25 PM&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;사전-정의된-포인터-관련-데이터-타입&#34;&gt;사전 정의된 포인터 관련 데이터 타입&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터를 다룰 때, 네 가지의 사전 정의된 데이터 타입이 종종 사용된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size_t&lt;/code&gt;, &lt;code&gt;ptrdiff_t&lt;/code&gt;, &lt;code&gt;intptr_t&lt;/code&gt;, &lt;code&gt;uintptr_t&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;size_t-타입의-이해&#34;&gt;&lt;code&gt;size_t&lt;/code&gt; 타입의 이해&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size_t&lt;/code&gt; 타입은 C 언어에서 임의의 객체가 가질 수 있는 최대 크기를 나타낸다. 크기를 표현하는 데 음수의 사용은 의미가 없기 때문에, &lt;code&gt;size_t&lt;/code&gt;는 부호 없는 정수를 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size_t&lt;/code&gt; 타입을 쓰는 이유는 시스템에서 주소 지정이 가능한 메모리 영역과 일치하는 크기를 선언하는 이식 가능한 방법을 제공하기 위해서이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;문자의 수나 배열 인덱스와 같은 크기 변수를 선언할 때는
size_t 타입을 사용하는 것이 좋다.
size_t 타입은 반복문이나 카운터나 배열의 참조 그리고 때로는 포인터 연산에서 사용될 수 있다.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;intptr_t-uintptr_t-사용하기&#34;&gt;&lt;code&gt;intptr_t&lt;/code&gt;, &lt;code&gt;uintptr_t&lt;/code&gt; 사용하기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;intptr_t&lt;/code&gt;, &lt;code&gt;uintptr_t&lt;/code&gt; 타입은 포인터의 주소를 저장하는데 사용된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 두 타입은 다른 환경으로 이식이 가능하고, 안전한 포인터 선언 방법을 제공하며, 시스템 내부에서 사용하는 포인터와 같은 크기다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;포인터를 정수 표현으로 변환할 때 유용하게 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;상수와-포인터&#34;&gt;상수와 포인터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C&lt;/code&gt; 에서 포인터와 &lt;code&gt;const&lt;/code&gt; 키워드를 함게 사용하면 매우 강력한 기능이 제공된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt; 키워드와 포인터의 사용은 몇몇 상황에 전혀 새로운 방식의 데이터 보호 방법을 제공한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;상수에-대한-포인터&#34;&gt;상수에 대한 포인터&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터는 상수를 가리키도록 정의될 수 있다. 이 말은 곧 포인터가 참조하는 값을 수정하는 데 사용될 수 없음을 의미한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 예제에서 상수 정수를 선언한다. 다음으로 정수에 대한 포인터와 상수 정수에 대한 포인터를 선언하고 각각의 정수로 초기화 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;int num = 0;
const int limit = 500;
int *pi;
const int *pci;

pi = &amp;amp;num;
pci = &amp;amp;limit;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;상수 포인터에 대한 역참조는 단지 정수의 값을 읽기만 한다면 문제가 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;printf(&amp;quot;%d\n&amp;quot;, *pci);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터가 참조하는 값을 변경하기 위해서 상수 포인터를 역참조할 수는 없다. 그러나 포인터 값 자체는 상수가 아니므로 포인터 자체의 값은 변경할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;즉, 포인터는 다른 상수 정수나 정수를 사용하기 위해서 변경될 수 있다. 상숭 포인터 값 자체의 변경은 전혀 문제가 되지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상수 포인터 선언은 단지 포인터를 통해 참조된 값의 변경만을 제한한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;pci = &amp;amp;num;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;상수 정수를 가리키는 &lt;code&gt;pci&lt;/code&gt; 포인터 변수의 선언은 다음을 의미한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pci&lt;/code&gt;는 다른 상수 정수를 가리키도록 할당될 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pci&lt;/code&gt;는 다른 비상수 정수를 가리키도록 할당될 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pci&lt;/code&gt;는 가리키는 정수의 값을 읽기 위해 역참조 될 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pci&lt;/code&gt;는 가리키는 정수의 값을 변경하기 위해 역참조 될 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;비상수를-가리키는-상수-포인터&#34;&gt;비상수를 가리키는 상수 포인터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;비상수를 가리키는 상수 포인터 역시 선언할 수 있으며, 이 선언의 의미는 포인터 자체의 값, 즉 가리키는 대상은 변경할 수 없지만 포인터가 가리키는 곳의 값은 변경할 수 있음을 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;int num;
int *const cpi = &amp;amp;num;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위 선언은 다음을 의미한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cpi&lt;/code&gt; 변수는 비상수 변수로 초기화 되어야한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpi&lt;/code&gt; 변수는 변경될 수 없다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpi&lt;/code&gt; 포인터 변수가 가리키는 변수의 값은 변경할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;상수를-가리키는-상수-포인터&#34;&gt;상수를 가리키는 상수 포인터&lt;/h3&gt;
&lt;p&gt;상수를 가리키는 상수 포인터는 거의 사용되지 않는다. 포인터 값은 변경될 수 없으며, 포인터가 가리키는 값 역시 포인터를 통해 변경될 수 없다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const int* const cpic = &amp;amp;limit;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;다중-수준-상수-포인터&#34;&gt;다중 수준 상수 포인터&lt;/h3&gt;
&lt;p&gt;상수 포인터는 다중 수준의 간접 지정이 가능하다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const int * const cpci = &amp;amp;limit;
const int * const * pcpci;
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;포인터의 종류&lt;/th&gt;
&lt;th&gt;포인터 데이터 변경&lt;/th&gt;
&lt;th&gt;포인터 대상 데이터 변경&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;비상수를 가리키는 포인터&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;상수를 가리키는 포인터&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;비상수를 가리키는 상수 포인터&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;상수를 가리키는 상수 포인터&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;참고-문헌&#34;&gt;참고 문헌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=33784887&#34;&gt;C 포인터의 이해와 활용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
